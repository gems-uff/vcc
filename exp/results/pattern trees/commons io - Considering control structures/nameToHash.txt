1 - java.lang.String.equals(java.lang.Object)
2 - org.apache.commons.io.IOCase.forName(java.lang.String)
3 - java.lang.String.compareTo(java.lang.String)
4 - java.lang.String.compareToIgnoreCase(java.lang.String)
5 - java.lang.String.equalsIgnoreCase(java.lang.String)
6 - java.lang.String.length()
7 - java.lang.String.regionMatches(Z, I, java.lang.String, I, I)
8 - org.apache.commons.io.IOCase.checkRegionMatches(java.lang.String, I, java.lang.String)
9 - java.lang.Throwable.initCause(java.lang.Throwable)
10 - java.lang.Throwable.toString()
11 - org.apache.commons.io.FileCleaningTracker.track(java.io.File, java.lang.Object)
12 - org.apache.commons.io.FileCleaningTracker.track(java.io.File, java.lang.Object, org.apache.commons.io.FileDeleteStrategy)
13 - org.apache.commons.io.FileCleaningTracker.track(java.lang.String, java.lang.Object)
14 - org.apache.commons.io.FileCleaningTracker.track(java.lang.String, java.lang.Object, org.apache.commons.io.FileDeleteStrategy)
15 - org.apache.commons.io.FileCleaningTracker.getTrackCount()
16 - org.apache.commons.io.FileCleaningTracker.exitWhenFinished()
17 - java.io.File.getPath()
18 - org.apache.commons.io.FileCleaningTracker.addTracker(java.lang.String, java.lang.Object, org.apache.commons.io.FileDeleteStrategy)
19 - java.lang.Thread.start()
20 - java.util.Collection.add(org.apache.commons.io.FileCleaningTracker$Tracker)
21 - java.util.Collection.size()
22 - java.lang.Thread.interrupt()
23 - java.lang.Thread.setPriority(I)
24 - java.lang.Thread.setDaemon(Z)
25 - java.lang.ref.ReferenceQueue.remove()
26 - org.apache.commons.io.FileCleaningTracker$Tracker.delete()
27 - java.lang.ref.Reference.clear()
28 - java.util.Collection.remove(java.lang.Object)
29 - org.apache.commons.io.FileDeleteStrategy.deleteQuietly(java.io.File)
30 - java.io.File.exists()
31 - org.apache.commons.io.FileDeleteStrategy.doDelete(java.io.File)
32 - java.io.File.delete()
33 - org.apache.commons.io.FileUtils.forceDelete(java.io.File)
34 - java.io.Reader.close()
35 - java.nio.channels.Channel.close()
36 - java.io.Writer.close()
37 - java.io.InputStream.close()
38 - java.io.OutputStream.close()
39 - org.apache.commons.io.IOUtils.copy(java.io.InputStream, java.io.OutputStream)
40 - org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()
41 - org.apache.commons.io.IOUtils.copy(java.io.Reader, java.io.OutputStream)
42 - org.apache.commons.io.IOUtils.copy(java.io.Reader, java.io.OutputStream, java.lang.String)
43 - java.lang.String.getBytes()
44 - org.apache.commons.io.IOUtils.copy(java.io.InputStream, java.io.Writer)
45 - java.io.CharArrayWriter.toCharArray()
46 - org.apache.commons.io.IOUtils.copy(java.io.InputStream, java.io.Writer, java.lang.String)
47 - org.apache.commons.io.IOUtils.copy(java.io.Reader, java.io.Writer)
48 - org.apache.commons.io.output.StringBuilderWriter.toString()
49 - org.apache.commons.io.IOUtils.readLines(java.io.Reader)
50 - org.apache.commons.io.IOUtils.readLines(java.io.InputStream)
51 - java.io.BufferedReader.readLine()
52 - java.util.List.add(java.lang.String)
53 - java.lang.CharSequence.toString()
54 - org.apache.commons.io.IOUtils.toInputStream(java.lang.String)
55 - org.apache.commons.io.IOUtils.toInputStream(java.lang.String, java.lang.String)
56 - java.lang.String.getBytes(java.lang.String)
57 - java.io.OutputStream.write([B)
58 - java.io.Writer.write(java.lang.String)
59 - org.apache.commons.io.IOUtils.write([B, java.io.Writer)
60 - java.io.Writer.write([C)
61 - org.apache.commons.io.IOUtils.write([C, java.io.OutputStream)
62 - org.apache.commons.io.IOUtils.write(java.lang.String, java.io.Writer)
63 - org.apache.commons.io.IOUtils.write(java.lang.String, java.io.OutputStream)
64 - org.apache.commons.io.IOUtils.write(java.lang.String, java.io.OutputStream, java.lang.String)
65 - java.lang.StringBuffer.toString()
66 - org.apache.commons.io.IOUtils.write(java.lang.StringBuffer, java.io.OutputStream)
67 - java.util.Collection.iterator()
68 - java.util.Iterator.hasNext()
69 - java.util.Iterator.next()
70 - java.lang.Object.toString()
71 - org.apache.commons.io.IOUtils.writeLines(java.util.Collection, java.lang.String, java.io.OutputStream)
72 - org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream, java.io.OutputStream)
73 - java.io.InputStream.read([B)
74 - java.io.OutputStream.write([B, I, I)
75 - org.apache.commons.io.IOUtils.copyLarge(java.io.Reader, java.io.Writer)
76 - java.io.Reader.read([C)
77 - java.io.Writer.write([C, I, I)
78 - java.io.OutputStreamWriter.flush()
79 - java.io.InputStream.read()
80 - java.io.Reader.read()
81 - org.apache.commons.io.HexDump.dump(java.lang.StringBuilder, J)
82 - java.lang.StringBuilder.append(C)
83 - org.apache.commons.io.HexDump.dump(java.lang.StringBuilder, B)
84 - java.lang.StringBuilder.append(java.lang.String)
85 - java.lang.StringBuilder.toString()
86 - java.io.OutputStream.flush()
87 - java.lang.AbstractStringBuilder.setLength(I)
88 - org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String, Z)
89 - org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)
90 - java.lang.String.getChars(I, I, [C, I)
91 - java.lang.System.arraycopy(java.lang.Object, I, java.lang.Object, I, I)
92 - org.apache.commons.io.FilenameUtils.normalize(java.lang.String)
93 - java.lang.String.charAt(I)
94 - org.apache.commons.io.FilenameUtils.isSeparator(C)
95 - java.lang.String.indexOf(I)
96 - java.lang.String.replace(C, C)
97 - org.apache.commons.io.FilenameUtils.isSystemWindows()
98 - org.apache.commons.io.FilenameUtils.separatorsToWindows(java.lang.String)
99 - org.apache.commons.io.FilenameUtils.separatorsToUnix(java.lang.String)
100 - java.lang.String.indexOf(I, I)
101 - java.lang.Math.min(I, I)
102 - java.lang.Character.toUpperCase(C)
103 - java.lang.String.lastIndexOf(I)
104 - java.lang.Math.max(I, I)
105 - org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String)
106 - java.lang.String.substring(I, I)
107 - org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String, I)
108 - org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String, Z)
109 - org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)
110 - java.lang.String.substring(I)
111 - org.apache.commons.io.FilenameUtils.getName(java.lang.String)
112 - org.apache.commons.io.FilenameUtils.removeExtension(java.lang.String)
113 - org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)
114 - org.apache.commons.io.FilenameUtils.equals(java.lang.String, java.lang.String, Z, org.apache.commons.io.IOCase)
115 - org.apache.commons.io.IOCase.checkEquals(java.lang.String, java.lang.String)
116 - org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)
117 - java.util.Collection.isEmpty()
118 - org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String, java.lang.String, org.apache.commons.io.IOCase)
119 - org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)
120 - java.util.Vector.size()
121 - java.util.Stack.pop()
122 - org.apache.commons.io.IOCase.checkIndexOf(java.lang.String, I, java.lang.String)
123 - java.util.Stack.push([I)
124 - java.lang.String.indexOf(java.lang.String)
125 - java.lang.String.toCharArray()
126 - java.lang.AbstractStringBuilder.length()
127 - java.util.ArrayList.add(java.lang.String)
128 - java.util.ArrayList.size()
129 - java.util.ArrayList.get(I)
130 - java.util.ArrayList.toArray([Ljava.lang.String;)
131 - org.apache.commons.io.LineIterator.isValidLine(java.lang.String)
132 - org.apache.commons.io.LineIterator.close()
133 - org.apache.commons.io.LineIterator.nextLine()
134 - org.apache.commons.io.LineIterator.hasNext()
135 - org.apache.commons.io.IOUtils.closeQuietly(java.io.Reader)
136 - org.apache.commons.io.CopyUtils.copy(java.io.InputStream, java.io.Writer)
137 - org.apache.commons.io.CopyUtils.copy(java.io.InputStream, java.io.Writer, java.lang.String)
138 - org.apache.commons.io.CopyUtils.copy(java.io.Reader, java.io.Writer)
139 - org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.apache.commons.io.filefilter.IOFileFilter)
140 - org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(org.apache.commons.io.filefilter.IOFileFilter)
141 - org.apache.commons.io.filefilter.FileFilterUtils.orFileFilter(org.apache.commons.io.filefilter.IOFileFilter, org.apache.commons.io.filefilter.IOFileFilter)
142 - org.apache.commons.io.DirectoryWalker.handleStart(java.io.File, java.util.Collection)
143 - org.apache.commons.io.DirectoryWalker.walk(java.io.File, I, java.util.Collection)
144 - org.apache.commons.io.DirectoryWalker.handleEnd(java.util.Collection)
145 - org.apache.commons.io.DirectoryWalker.handleCancelled(java.io.File, java.util.Collection, org.apache.commons.io.DirectoryWalker$CancelException)
146 - org.apache.commons.io.DirectoryWalker.checkIfCancelled(java.io.File, I, java.util.Collection)
147 - org.apache.commons.io.DirectoryWalker.handleDirectory(java.io.File, I, java.util.Collection)
148 - org.apache.commons.io.DirectoryWalker.handleDirectoryStart(java.io.File, I, java.util.Collection)
149 - java.io.File.listFiles()
150 - java.io.File.listFiles(java.io.FileFilter)
151 - org.apache.commons.io.DirectoryWalker.handleRestricted(java.io.File, I, java.util.Collection)
152 - java.io.File.isDirectory()
153 - org.apache.commons.io.DirectoryWalker.handleFile(java.io.File, I, java.util.Collection)
154 - org.apache.commons.io.DirectoryWalker.handleDirectoryEnd(java.io.File, I, java.util.Collection)
155 - org.apache.commons.io.DirectoryWalker.handleIsCancelled(java.io.File, I, java.util.Collection)
156 - java.lang.Float.floatToIntBits(F)
157 - org.apache.commons.io.EndianUtils.swapInteger(I)
158 - java.lang.Float.intBitsToFloat(I)
159 - java.lang.Double.doubleToLongBits(D)
160 - org.apache.commons.io.EndianUtils.swapLong(J)
161 - java.lang.Double.longBitsToDouble(J)
162 - org.apache.commons.io.EndianUtils.writeSwappedInteger([B, I, I)
163 - org.apache.commons.io.EndianUtils.readSwappedInteger([B, I)
164 - org.apache.commons.io.EndianUtils.writeSwappedLong([B, I, J)
165 - org.apache.commons.io.EndianUtils.readSwappedLong([B, I)
166 - java.io.OutputStream.write(I)
167 - org.apache.commons.io.EndianUtils.read(java.io.InputStream)
168 - org.apache.commons.io.EndianUtils.writeSwappedInteger(java.io.OutputStream, I)
169 - org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)
170 - org.apache.commons.io.EndianUtils.writeSwappedLong(java.io.OutputStream, J)
171 - org.apache.commons.io.EndianUtils.readSwappedLong(java.io.InputStream)
172 - org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String, I, Z)
173 - org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String)
174 - org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String, Z, Z)
175 - org.apache.commons.io.FileSystemUtils.performCommand([Ljava.lang.String;, I)
176 - java.util.List.size()
177 - java.util.List.get(I)
178 - org.apache.commons.io.FileSystemUtils.parseDir(java.lang.String, java.lang.String)
179 - java.lang.Character.isDigit(C)
180 - java.lang.AbstractStringBuilder.charAt(I)
181 - java.lang.StringBuilder.deleteCharAt(I)
182 - org.apache.commons.io.FileSystemUtils.parseBytes(java.lang.String, java.lang.String)
183 - java.util.StringTokenizer.countTokens()
184 - java.util.StringTokenizer.nextToken()
185 - java.lang.Long.parseLong(java.lang.String)
186 - org.apache.commons.io.FileSystemUtils.openProcess([Ljava.lang.String;)
187 - java.lang.Process.getInputStream()
188 - java.lang.Process.getOutputStream()
189 - java.lang.Process.getErrorStream()
190 - java.lang.String.toLowerCase(java.util.Locale)
191 - java.lang.String.trim()
192 - java.lang.Process.waitFor()
193 - java.lang.Process.exitValue()
194 - java.util.Arrays.asList([Ljava.lang.String;)
195 - java.lang.Throwable.getMessage()
196 - org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)
197 - org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)
198 - java.lang.Process.destroy()
199 - java.lang.Runtime.getRuntime()
200 - java.lang.Runtime.exec([Ljava.lang.String;)
201 - java.io.File.canRead()
202 - java.io.File.canWrite()
203 - java.io.File.getParentFile()
204 - java.io.File.mkdirs()
205 - java.lang.String.valueOf(J)
206 - org.apache.commons.io.FileUtils.openOutputStream(java.io.File)
207 - java.lang.System.currentTimeMillis()
208 - java.io.File.setLastModified(J)
209 - java.util.Collection.toArray([Ljava.io.File;)
210 - org.apache.commons.io.FileUtils.innerListFiles(java.util.Collection, java.io.File, org.apache.commons.io.filefilter.IOFileFilter)
211 - java.util.Collection.add(java.io.File)
212 - org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)
213 - org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(org.apache.commons.io.filefilter.IOFileFilter, org.apache.commons.io.filefilter.IOFileFilter)
214 - org.apache.commons.io.FileUtils.listFiles(java.io.File, org.apache.commons.io.filefilter.IOFileFilter, org.apache.commons.io.filefilter.IOFileFilter)
215 - org.apache.commons.io.FileUtils.toSuffixes([Ljava.lang.String;)
216 - org.apache.commons.io.FileUtils.listFiles(java.io.File, [Ljava.lang.String;, Z)
217 - java.io.File.length()
218 - java.io.File.getCanonicalFile()
219 - java.io.File.equals(java.lang.Object)
220 - org.apache.commons.io.IOUtils.contentEquals(java.io.InputStream, java.io.InputStream)
221 - java.net.URL.getProtocol()
222 - java.net.URL.getFile()
223 - java.lang.Integer.parseInt(java.lang.String, I)
224 - org.apache.commons.io.FileUtils.toFile(java.net.URL)
225 - java.io.File.toURI()
226 - java.net.URI.toURL()
227 - org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File, java.io.File, Z)
228 - java.io.File.getName()
229 - org.apache.commons.io.FileUtils.copyFile(java.io.File, java.io.File, Z)
230 - java.io.File.getCanonicalPath()
231 - org.apache.commons.io.FileUtils.doCopyFile(java.io.File, java.io.File, Z)
232 - java.io.FileInputStream.getChannel()
233 - java.io.FileOutputStream.getChannel()
234 - java.nio.channels.FileChannel.size()
235 - java.nio.channels.FileChannel.transferFrom(java.nio.channels.ReadableByteChannel, J, J)
236 - org.apache.commons.io.IOUtils.closeQuietly(java.nio.channels.Channel)
237 - java.io.File.lastModified()
238 - org.apache.commons.io.FileUtils.copyDirectory(java.io.File, java.io.File, Z)
239 - org.apache.commons.io.FileUtils.copyDirectory(java.io.File, java.io.File, java.io.FileFilter, Z)
240 - java.lang.String.startsWith(java.lang.String)
241 - org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File, java.io.File, java.io.FileFilter, Z, java.util.List)
242 - java.util.List.contains(java.lang.Object)
243 - java.net.URL.openStream()
244 - org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)
245 - java.lang.Thread.sleep(J)
246 - org.apache.commons.io.FileUtils.openInputStream(java.io.File)
247 - org.apache.commons.io.IOUtils.toString(java.io.InputStream, java.lang.String)
248 - org.apache.commons.io.FileUtils.readFileToString(java.io.File, java.lang.String)
249 - org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)
250 - org.apache.commons.io.IOUtils.readLines(java.io.InputStream, java.lang.String)
251 - org.apache.commons.io.FileUtils.readLines(java.io.File, java.lang.String)
252 - org.apache.commons.io.IOUtils.lineIterator(java.io.InputStream, java.lang.String)
253 - org.apache.commons.io.FileUtils.lineIterator(java.io.File, java.lang.String)
254 - org.apache.commons.io.FileUtils.writeStringToFile(java.io.File, java.lang.String, java.lang.String)
255 - org.apache.commons.io.FileUtils.writeStringToFile(java.io.File, java.lang.String)
256 - org.apache.commons.io.FileUtils.writeLines(java.io.File, java.lang.String, java.util.Collection, java.lang.String)
257 - org.apache.commons.io.IOUtils.writeLines(java.util.Collection, java.lang.String, java.io.OutputStream, java.lang.String)
258 - org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)
259 - org.apache.commons.io.FileUtils.deleteDirectoryOnExit(java.io.File)
260 - java.io.File.deleteOnExit()
261 - org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)
262 - org.apache.commons.io.FileUtils.forceDeleteOnExit(java.io.File)
263 - java.io.File.isFile()
264 - org.apache.commons.io.FileUtils.sizeOfDirectory(java.io.File)
265 - org.apache.commons.io.FileUtils.isFileNewer(java.io.File, J)
266 - java.util.Date.getTime()
267 - org.apache.commons.io.FileUtils.isFileOlder(java.io.File, J)
268 - org.apache.commons.io.FileUtils.checksum(java.io.File, java.util.zip.Checksum)
269 - java.util.zip.CRC32.getValue()
270 - java.io.File.renameTo(java.io.File)
271 - org.apache.commons.io.FileUtils.copyDirectory(java.io.File, java.io.File)
272 - org.apache.commons.io.FileUtils.moveDirectory(java.io.File, java.io.File)
273 - org.apache.commons.io.FileUtils.copyFile(java.io.File, java.io.File)
274 - org.apache.commons.io.FileUtils.deleteQuietly(java.io.File)
275 - org.apache.commons.io.FileUtils.moveFile(java.io.File, java.io.File)
276 - org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File, java.io.File, Z)
277 - org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File, java.io.File, Z)
278 - org.apache.commons.io.IOCase.checkCompareTo(java.lang.String, java.lang.String)
279 - java.util.Comparator.compare(java.io.File, java.io.File)
280 - java.io.File.compareTo(java.io.File)
281 - java.util.List.toArray([Ljava.lang.String;)
282 - org.apache.commons.io.IOCase.checkEndsWith(java.lang.String, java.lang.String)
283 - org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String, java.lang.String)
284 - org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File, java.lang.String)
285 - org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File)
286 - java.lang.Object.getClass()
287 - java.lang.Class.getName()
288 - org.apache.commons.io.IOCase.checkStartsWith(java.lang.String, java.lang.String)
289 - org.apache.commons.io.filefilter.OrFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)
290 - java.util.List.add(org.apache.commons.io.filefilter.IOFileFilter)
291 - java.util.Collections.unmodifiableList(java.util.List)
292 - java.util.List.remove(java.lang.Object)
293 - org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)
294 - org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File, java.lang.String)
295 - java.io.File.isHidden()
296 - java.util.regex.Pattern.compile(java.lang.String)
297 - org.apache.commons.io.IOCase.isCaseSensitive()
298 - java.util.regex.Pattern.compile(java.lang.String, I)
299 - java.util.regex.Pattern.matcher(java.lang.CharSequence)
300 - java.util.regex.Matcher.matches()
301 - java.io.FileFilter.accept(java.io.File)
302 - java.io.FilenameFilter.accept(java.io.File, java.lang.String)
303 - org.apache.commons.io.filefilter.AndFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)
304 - org.apache.commons.io.filefilter.FileFilterUtils.directoryFileFilter()
305 - org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String)
306 - org.apache.commons.io.input.AutoCloseInputStream.close()
307 - java.io.InputStream.read([B, I, I)
308 - java.io.ObjectStreamClass.getName()
309 - java.lang.Class.forName(java.lang.String, Z, java.lang.ClassLoader)
310 - org.apache.commons.io.input.CountingInputStream.getByteCount()
311 - org.apache.commons.io.input.CountingInputStream.resetByteCount()
312 - org.apache.commons.io.input.NullReader.doEndOfFile()
313 - org.apache.commons.io.input.NullReader.processChar()
314 - org.apache.commons.io.input.NullReader.read([C, I, I)
315 - org.apache.commons.io.input.NullReader.processChars([C, I, I)
316 - java.io.InputStream.skip(J)
317 - java.io.InputStream.available()
318 - java.io.InputStream.mark(I)
319 - java.io.InputStream.reset()
320 - java.io.InputStream.markSupported()
321 - java.lang.ThreadLocal.get()
322 - java.lang.ThreadLocal.set(java.io.InputStream)
323 - java.lang.CharSequence.length()
324 - java.lang.CharSequence.charAt(I)
325 - org.apache.commons.io.input.CharSequenceReader.read()
326 - java.lang.Math.min(J, J)
327 - java.io.Reader.read([C, I, I)
328 - java.io.Reader.read(java.nio.CharBuffer)
329 - java.io.Reader.skip(J)
330 - java.io.Reader.ready()
331 - java.io.Reader.mark(I)
332 - java.io.Reader.reset()
333 - java.io.Reader.markSupported()
334 - org.apache.commons.io.input.SwappedDataInputStream.readByte()
335 - org.apache.commons.io.input.SwappedDataInputStream.readShort()
336 - org.apache.commons.io.EndianUtils.readSwappedDouble(java.io.InputStream)
337 - org.apache.commons.io.EndianUtils.readSwappedFloat(java.io.InputStream)
338 - org.apache.commons.io.input.SwappedDataInputStream.readFully([B, I, I)
339 - org.apache.commons.io.input.ProxyInputStream.read([B, I, I)
340 - org.apache.commons.io.EndianUtils.readSwappedShort(java.io.InputStream)
341 - org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(java.io.InputStream)
342 - org.apache.commons.io.input.NullInputStream.doEndOfFile()
343 - org.apache.commons.io.input.NullInputStream.processByte()
344 - org.apache.commons.io.input.NullInputStream.read([B, I, I)
345 - org.apache.commons.io.input.NullInputStream.processBytes([B, I, I)
346 - org.apache.commons.io.monitor.FilesystemEntry.getLevel()
347 - org.apache.commons.io.monitor.FilesystemEntry.getFile()
348 - java.util.List.add(org.apache.commons.io.monitor.FilesystemListener)
349 - org.apache.commons.io.monitor.FilesystemEntry.refresh()
350 - org.apache.commons.io.monitor.FilesystemObserver.listFiles(java.io.File)
351 - org.apache.commons.io.monitor.FilesystemObserver.createFileEntry(org.apache.commons.io.monitor.FilesystemEntry, java.io.File)
352 - org.apache.commons.io.monitor.FilesystemEntry.setChildren([Lorg.apache.commons.io.monitor.FilesystemEntry;)
353 - org.apache.commons.io.monitor.FilesystemListener.onStart(org.apache.commons.io.monitor.FilesystemObserver)
354 - org.apache.commons.io.monitor.FilesystemEntry.getChildren()
355 - org.apache.commons.io.monitor.FilesystemObserver.checkAndNotify(org.apache.commons.io.monitor.FilesystemEntry, [Lorg.apache.commons.io.monitor.FilesystemEntry;, [Ljava.io.File;)
356 - org.apache.commons.io.monitor.FilesystemEntry.isExists()
357 - org.apache.commons.io.monitor.FilesystemListener.onStop(org.apache.commons.io.monitor.FilesystemObserver)
358 - org.apache.commons.io.monitor.FilesystemObserver.doCreate(org.apache.commons.io.monitor.FilesystemEntry)
359 - org.apache.commons.io.monitor.FilesystemObserver.doMatch(org.apache.commons.io.monitor.FilesystemEntry, java.io.File)
360 - org.apache.commons.io.monitor.FilesystemObserver.doDelete(org.apache.commons.io.monitor.FilesystemEntry)
361 - org.apache.commons.io.monitor.FilesystemEntry.newChildInstance(java.io.File)
362 - org.apache.commons.io.monitor.FilesystemEntry.isDirectory()
363 - org.apache.commons.io.monitor.FilesystemListener.onDirectoryCreate(java.io.File)
364 - org.apache.commons.io.monitor.FilesystemListener.onFileCreate(java.io.File)
365 - org.apache.commons.io.monitor.FilesystemEntry.hasChanged()
366 - org.apache.commons.io.monitor.FilesystemListener.onDirectoryChange(java.io.File)
367 - org.apache.commons.io.monitor.FilesystemListener.onFileChange(java.io.File)
368 - org.apache.commons.io.monitor.FilesystemEntry.setFile(java.io.File)
369 - org.apache.commons.io.monitor.FilesystemListener.onDirectoryDelete(java.io.File)
370 - org.apache.commons.io.monitor.FilesystemListener.onFileDelete(java.io.File)
371 - java.util.Arrays.sort([Ljava.io.File;, java.util.Comparator)
372 - java.lang.Class.getSimpleName()
373 - org.apache.commons.io.monitor.FilesystemObserver.getDirectory()
374 - java.lang.StringBuilder.append(I)
375 - org.apache.commons.io.monitor.FilesystemMonitor.addObserver(org.apache.commons.io.monitor.FilesystemObserver)
376 - java.util.List.add(org.apache.commons.io.monitor.FilesystemObserver)
377 - org.apache.commons.io.monitor.FilesystemObserver.initialize()
378 - java.lang.Thread.join(J)
379 - org.apache.commons.io.monitor.FilesystemObserver.destroy()
380 - org.apache.commons.io.monitor.FilesystemObserver.checkAndNotify()
381 - java.lang.StringBuilder.append(java.lang.CharSequence)
382 - java.lang.StringBuilder.append(java.lang.CharSequence, I, I)
383 - java.lang.StringBuilder.append([C, I, I)
384 - org.apache.commons.io.output.FileWriterWithEncoding.initWriter(java.io.File, java.lang.Object, Z)
385 - org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer)
386 - java.io.Writer.write(I)
387 - java.io.Writer.write(java.lang.String, I, I)
388 - java.io.Writer.flush()
389 - org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(I)
390 - java.util.List.add([B)
391 - java.io.File.getAbsoluteFile()
392 - org.apache.commons.io.FileUtils.forceMkdir(java.io.File)
393 - java.lang.System.getProperty(java.lang.String)
394 - org.apache.commons.io.output.LockableFileWriter.testLockDir(java.io.File)
395 - org.apache.commons.io.output.LockableFileWriter.createLock()
396 - org.apache.commons.io.output.LockableFileWriter.initWriter(java.io.File, java.lang.String, Z)
397 - java.io.File.getAbsolutePath()
398 - java.io.File.createNewFile()
399 - java.lang.ThreadLocal.set(java.io.OutputStream)
400 - java.io.File.createTempFile(java.lang.String, java.lang.String, java.io.File)
401 - org.apache.commons.io.output.ByteArrayOutputStream.writeTo(java.io.OutputStream)
402 - org.apache.commons.io.output.ThresholdingOutputStream.isThresholdExceeded()
403 - org.apache.commons.io.output.DeferredFileOutputStream.isInMemory()
404 - org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(I)
405 - org.apache.commons.io.output.ThresholdingOutputStream.getStream()
406 - org.apache.commons.io.output.ThresholdingOutputStream.flush()
407 - org.apache.commons.io.output.ThresholdingOutputStream.thresholdReached()
408 - org.apache.commons.io.output.CountingOutputStream.getByteCount()
409 - org.apache.commons.io.output.CountingOutputStream.resetByteCount()
410 - java.io.Writer.append(C)
411 - java.io.Writer.append(java.lang.CharSequence, I, I)
412 - java.io.Writer.append(java.lang.CharSequence)
413 - org.apache.commons.io.FileCleaner.getInstance()
414 - org.apache.commons.io.FileCleanerTestCase.suite()
415 - junit.textui.TestRunner.run(junit.framework.Test)
416 - org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()
417 - java.io.File.mkdir()
418 - junit.framework.Assert.assertEquals(Z, Z)
419 - org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File, J)
420 - org.apache.commons.io.FileDeleteStrategy.delete(java.io.File)
421 - junit.framework.Assert.fail()
422 - org.apache.commons.io.FileDeleteStrategy.toString()
423 - junit.framework.Assert.assertEquals(java.lang.String, java.lang.String)
424 - org.apache.commons.io.FileUtilsListFilesTestCase.getLocalTestDirectory()
425 - org.apache.commons.io.FileUtils.touch(java.io.File)
426 - java.util.Collection.add(java.lang.Object)
427 - junit.framework.Assert.assertEquals(I, I)
428 - org.apache.commons.io.FileUtilsListFilesTestCase.filesToFilenames(java.util.Collection)
429 - java.util.Collection.contains(java.lang.Object)
430 - junit.framework.Assert.assertTrue(Z)
431 - junit.framework.Assert.assertFalse(Z)
432 - org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter()
433 - junit.framework.Assert.assertTrue(java.lang.String, Z)
434 - junit.framework.Assert.assertFalse(java.lang.String, Z)
435 - org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)
436 - org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(java.lang.String)
437 - junit.framework.Assert.fail(java.lang.String)
438 - org.apache.commons.io.LineIteratorTestCase.suite()
439 - org.apache.commons.io.LineIteratorTestCase.doTestFileWithSpecifiedLines(I)
440 - org.apache.commons.io.LineIterator.closeQuietly(org.apache.commons.io.LineIterator)
441 - org.apache.commons.io.LineIteratorTestCase.createFile(java.io.File, java.lang.String, I)
442 - org.apache.commons.io.LineIterator.next()
443 - junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object)
444 - junit.framework.Assert.assertEquals(java.lang.String, Z, Z)
445 - org.apache.commons.io.LineIterator.remove()
446 - junit.framework.Assert.assertEquals(java.lang.String, I, I)
447 - java.util.List.add(java.lang.Object)
448 - org.apache.commons.io.FileUtils.writeLines(java.io.File, java.lang.String, java.util.Collection)
449 - org.apache.commons.io.CopyUtilsTest.suite()
450 - org.apache.commons.io.CopyUtils.copy([B, java.io.OutputStream)
451 - org.apache.commons.io.output.ByteArrayOutputStream.size()
452 - java.util.Arrays.equals([B, [B)
453 - org.apache.commons.io.CopyUtils.copy([B, java.io.Writer)
454 - org.apache.commons.io.CopyUtils.copy(java.io.InputStream, java.io.OutputStream)
455 - org.apache.commons.io.CopyUtils.copy(java.io.Reader, java.io.OutputStream)
456 - org.apache.commons.io.CopyUtils.copy(java.lang.String, java.io.OutputStream)
457 - org.apache.commons.io.CopyUtils.copy(java.lang.String, java.io.Writer)
458 - org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(java.lang.String, java.lang.String)
459 - org.apache.commons.io.FilenameUtilsWildcardTestCase.assertArrayEquals([Ljava.lang.Object;, [Ljava.lang.Object;)
460 - junit.framework.Assert.assertEquals(java.lang.Object, java.lang.Object)
461 - org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch(java.lang.String, java.lang.String, Z)
462 - java.util.Locale.getDefault()
463 - java.util.Locale.getAvailableLocales()
464 - java.util.Locale.setDefault(java.util.Locale)
465 - java.util.Locale.toString()
466 - org.apache.commons.io.EndianUtils.swapShort(S)
467 - junit.framework.Assert.assertEquals(S, S)
468 - junit.framework.Assert.assertEquals(J, J)
469 - org.apache.commons.io.EndianUtils.swapFloat(F)
470 - junit.framework.Assert.assertEquals(D, D, D)
471 - org.apache.commons.io.EndianUtils.swapDouble(D)
472 - org.apache.commons.io.EndianUtils.readSwappedShort([B, I)
473 - org.apache.commons.io.EndianUtils.writeSwappedShort([B, I, S)
474 - org.apache.commons.io.EndianUtils.writeSwappedShort(java.io.OutputStream, S)
475 - java.io.ByteArrayOutputStream.toByteArray()
476 - org.apache.commons.io.EndianUtils.readSwappedUnsignedShort([B, I)
477 - org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger([B, I)
478 - org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)
479 - org.apache.commons.io.EndianUtils.readSwappedFloat([B, I)
480 - org.apache.commons.io.EndianUtils.writeSwappedFloat([B, I, F)
481 - org.apache.commons.io.EndianUtils.writeSwappedFloat(java.io.OutputStream, F)
482 - org.apache.commons.io.EndianUtils.readSwappedDouble([B, I)
483 - org.apache.commons.io.EndianUtils.writeSwappedDouble([B, I, D)
484 - org.apache.commons.io.EndianUtils.writeSwappedDouble(java.io.OutputStream, D)
485 - junit.framework.Assert.assertEquals(java.lang.String, J, J)
486 - org.apache.commons.io.FileCleaningTrackerTestCase.suite()
487 - org.apache.commons.io.FileCleaningTrackerTestCase.newInstance()
488 - java.util.Collection.clear()
489 - java.io.RandomAccessFile.close()
490 - org.apache.commons.io.FileCleaningTrackerTestCase.waitUntilTrackCount()
491 - java.lang.Thread.isAlive()
492 - java.lang.System.gc()
493 - org.apache.commons.io.FileUtilsTestCase.suite()
494 - org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile(java.io.File, [Ljava.lang.String;)
495 - java.io.FileInputStream.read()
496 - junit.framework.Assert.assertNull(java.lang.Object)
497 - java.io.FileOutputStream.write(I)
498 - org.apache.commons.io.FileUtilsTestCase.openOutputStream_noParent(Z)
499 - org.apache.commons.io.FileUtils.byteCountToDisplaySize(J)
500 - java.io.File.toString()
501 - org.apache.commons.io.FileUtils.toFiles([Ljava.net.URL;)
502 - org.apache.commons.io.FileUtils.toURLs([Ljava.io.File;)
503 - java.net.URL.toExternalForm()
504 - junit.framework.TestCase.getName()
505 - org.apache.commons.io.FileUtils.contentEquals(java.io.File, java.io.File)
506 - java.lang.Class.getResource(java.lang.String)
507 - org.apache.commons.io.FileUtils.copyURLToFile(java.net.URL, java.io.File)
508 - java.lang.Class.getResourceAsStream(java.lang.String)
509 - java.io.FileInputStream.close()
510 - org.apache.commons.io.FileUtils.isFileNewer(java.io.File, java.io.File)
511 - org.apache.commons.io.FileUtils.isFileNewer(java.io.File, java.util.Date)
512 - org.apache.commons.io.FileUtils.isFileOlder(java.io.File, java.io.File)
513 - org.apache.commons.io.FileUtils.isFileOlder(java.io.File, java.util.Date)
514 - org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File, java.io.File)
515 - org.apache.commons.io.FileUtilsTestCase.createFilesForTestCopyDirectory(java.io.File, java.io.File, java.io.File)
516 - org.apache.commons.io.FileUtils.copyDirectory(java.io.File, java.io.File, java.io.FileFilter)
517 - org.apache.commons.io.FileUtilsTestCase$ListDirectoryWalker.list(java.io.File)
518 - org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File, java.io.File)
519 - java.io.FileOutputStream.close()
520 - java.util.Calendar.getTime()
521 - java.util.Collection.toArray()
522 - java.util.Map.put(java.lang.Object, java.lang.Object)
523 - java.util.Map.size()
524 - org.apache.commons.io.FileUtils.iterateFiles(java.io.File, org.apache.commons.io.filefilter.IOFileFilter, org.apache.commons.io.filefilter.IOFileFilter)
525 - java.io.FileOutputStream.write([B)
526 - org.apache.commons.io.FileUtils.readFileToByteArray(java.io.File)
527 - org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)
528 - org.apache.commons.io.testtools.FileBasedTestCase.deleteFile(java.io.File)
529 - org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent([B, java.io.File)
530 - org.apache.commons.io.FileUtils.write(java.io.File, java.lang.CharSequence, java.lang.String)
531 - org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File, [B)
532 - java.util.Arrays.asList([Ljava.lang.Object;)
533 - java.util.zip.Checksum.update([B, I, I)
534 - java.util.zip.Checksum.getValue()
535 - org.apache.commons.io.FileUtils.checksumCRC32(java.io.File)
536 - junit.framework.Assert.assertSame(java.lang.Object, java.lang.Object)
537 - org.apache.commons.io.FileUtils.moveToDirectory(java.io.File, java.io.File, Z)
538 - org.apache.commons.io.DirectoryWalker.walk(java.io.File, java.util.Collection)
539 - org.apache.commons.io.FileSystemUtilsTestCase.suite()
540 - org.apache.commons.io.FileSystemUtils.freeSpace(java.lang.String)
541 - org.apache.commons.io.FileSystemUtils.freeSpaceKb(java.lang.String)
542 - org.apache.commons.io.FileUtilsWaitForTestCase.suite()
543 - org.apache.commons.io.FileUtils.waitFor(java.io.File, I)
544 - org.apache.commons.io.IOUtilsWriteTestCase.suite()
545 - org.apache.commons.io.IOUtils.write([B, java.io.OutputStream)
546 - org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()
547 - org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()
548 - org.apache.commons.io.IOUtils.write([B, java.io.Writer, java.lang.String)
549 - org.apache.commons.io.IOUtils.write(java.lang.CharSequence, java.io.OutputStream)
550 - org.apache.commons.io.IOUtils.write(java.lang.CharSequence, java.io.OutputStream, java.lang.String)
551 - org.apache.commons.io.IOUtils.write(java.lang.CharSequence, java.io.Writer)
552 - org.apache.commons.io.IOUtils.write([C, java.io.OutputStream, java.lang.String)
553 - org.apache.commons.io.IOUtils.write([C, java.io.Writer)
554 - org.apache.commons.io.output.ByteArrayOutputStream.toString()
555 - org.apache.commons.io.output.ByteArrayOutputStream.toString(java.lang.String)
556 - org.apache.commons.io.IOUtils.writeLines(java.util.Collection, java.lang.String, java.io.Writer)
557 - junit.framework.Assert.assertEquals(C, C)
558 - org.apache.commons.io.IOUtils.toString(java.io.InputStream)
559 - junit.framework.Assert.assertNotNull(java.lang.Object)
560 - java.io.FileInputStream.available()
561 - org.apache.commons.io.IOUtils.toString(java.io.Reader)
562 - java.io.InputStreamReader.close()
563 - org.apache.commons.io.testtools.FileBasedTestCase.checkFile(java.io.File, java.io.File)
564 - org.apache.commons.io.testtools.FileBasedTestCase.checkWrite(java.io.OutputStream)
565 - org.apache.commons.io.testtools.FileBasedTestCase.checkWrite(java.io.Writer)
566 - java.io.OutputStreamWriter.close()
567 - org.apache.commons.io.IOUtils.toByteArray(java.lang.String)
568 - org.apache.commons.io.IOUtilsTestCase.assertEqualContent([B, [B)
569 - org.apache.commons.io.IOUtils.toString([B)
570 - org.apache.commons.io.IOUtils.toInputStream(java.lang.CharSequence)
571 - org.apache.commons.io.IOUtils.toInputStream(java.lang.CharSequence, java.lang.String)
572 - org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream)
573 - org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent([C, java.io.File)
574 - org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream, java.lang.String)
575 - org.apache.commons.io.IOUtils.toCharArray(java.io.Reader)
576 - org.apache.commons.io.IOUtilsCopyTestCase.suite()
577 - org.apache.commons.io.FilenameUtilsTestCase.suite()
578 - org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(java.lang.String)
579 - org.apache.commons.io.FilenameUtils.concat(java.lang.String, java.lang.String)
580 - org.apache.commons.io.FilenameUtils.separatorsToSystem(java.lang.String)
581 - org.apache.commons.io.FilenameUtils.getPath(java.lang.String)
582 - org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(java.lang.String)
583 - org.apache.commons.io.FilenameUtils.getFullPath(java.lang.String)
584 - org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(java.lang.String)
585 - org.apache.commons.io.FilenameUtils.getBaseName(java.lang.String)
586 - org.apache.commons.io.FilenameUtils.equals(java.lang.String, java.lang.String)
587 - org.apache.commons.io.FilenameUtils.equalsOnSystem(java.lang.String, java.lang.String)
588 - org.apache.commons.io.FilenameUtils.equalsNormalized(java.lang.String, java.lang.String)
589 - org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(java.lang.String, java.lang.String)
590 - org.apache.commons.io.FilenameUtils.isExtension(java.lang.String, java.lang.String)
591 - org.apache.commons.io.FilenameUtils.isExtension(java.lang.String, [Ljava.lang.String;)
592 - org.apache.commons.io.FilenameUtils.isExtension(java.lang.String, java.util.Collection)
593 - org.apache.commons.io.DirectoryWalkerTestCase$TestFileFinder.find(java.io.File)
594 - org.apache.commons.io.DirectoryWalkerTestCase.checkContainsFiles(java.lang.String, [Ljava.io.File;, java.util.Collection)
595 - org.apache.commons.io.DirectoryWalkerTestCase.directoriesOnly(java.util.Collection)
596 - org.apache.commons.io.DirectoryWalkerTestCase.filesOnly(java.util.Collection)
597 - org.apache.commons.io.DirectoryWalkerTestCase$TestCancelWalker.find(java.io.File)
598 - org.apache.commons.io.DirectoryWalker$CancelException.getFile()
599 - junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String)
600 - org.apache.commons.io.DirectoryWalker$CancelException.getDepth()
601 - org.apache.commons.io.DirectoryWalkerTestCase$TestMultiThreadCancelWalker.find(java.io.File)
602 - org.apache.commons.io.PackageTestSuite.suite()
603 - junit.framework.TestSuite.addTest(junit.framework.Test)
604 - org.apache.commons.io.IOExceptionWithCauseTestCase.validate(java.lang.Throwable, java.lang.Throwable, java.lang.String)
605 - java.lang.Throwable.getCause()
606 - org.apache.commons.io.IOCaseTestCase.suite()
607 - org.apache.commons.io.IOCaseTestCase.serialize(org.apache.commons.io.IOCase)
608 - org.apache.commons.io.IOCase.getName()
609 - org.apache.commons.io.IOCase.toString()
610 - java.io.ObjectOutputStream.writeObject(java.lang.Object)
611 - java.io.ObjectOutputStream.flush()
612 - java.io.ObjectOutputStream.close()
613 - java.io.ObjectInputStream.readObject()
614 - java.util.HashMap.get(java.lang.Object)
615 - junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object)
616 - org.apache.commons.io.DemuxTestCase$ReaderThread.getData()
617 - java.util.HashMap.keySet()
618 - java.util.Set.iterator()
619 - java.lang.Thread.join()
620 - java.util.HashMap.put(java.lang.Object, java.lang.Object)
621 - org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String, java.lang.String, org.apache.commons.io.output.DemuxOutputStream)
622 - org.apache.commons.io.DemuxTestCase.doStart()
623 - org.apache.commons.io.DemuxTestCase.doJoin()
624 - org.apache.commons.io.DemuxTestCase.getOutput(java.lang.String)
625 - org.apache.commons.io.DemuxTestCase.startReader(java.lang.String, java.lang.String, org.apache.commons.io.input.DemuxInputStream)
626 - org.apache.commons.io.DemuxTestCase.getInput(java.lang.String)
627 - org.apache.commons.io.input.DemuxInputStream.bindStream(java.io.InputStream)
628 - org.apache.commons.io.input.DemuxInputStream.read()
629 - java.lang.StringBuffer.append(C)
630 - java.util.Random.nextInt()
631 - java.lang.Math.abs(I)
632 - java.lang.Throwable.printStackTrace()
633 - org.apache.commons.io.output.DemuxOutputStream.bindStream(java.io.OutputStream)
634 - org.apache.commons.io.output.DemuxOutputStream.write(I)
635 - org.apache.commons.io.AllIOTestSuite.suite()
636 - org.apache.commons.io.filefilter.PackageTestSuite.suite()
637 - org.apache.commons.io.input.PackageTestSuite.suite()
638 - org.apache.commons.io.output.PackageTestSuite.suite()
639 - org.apache.commons.io.FileUtilsCleanDirectoryTestCase.suite()
640 - org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod(java.io.File, I, Z)
641 - java.io.File.list()
642 - java.lang.Integer.toString(I)
643 - java.util.List.toArray([Ljava.lang.Object;)
644 - org.apache.commons.io.HexDump.dump([B, J, java.io.OutputStream, I)
645 - org.apache.commons.io.HexDumpTest.toHex(I)
646 - org.apache.commons.io.HexDumpTest.toAscii(I)
647 - junit.framework.Assert.assertEquals(java.lang.String, B, B)
648 - java.io.PrintStream.println(java.lang.String)
649 - junit.textui.TestRunner.run(java.lang.Class)
650 - org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String, java.io.File, J, Z)
651 - org.apache.commons.io.comparator.SizeFileComparatorTest.suite()
652 - java.util.Comparator.compare(java.lang.Object, java.lang.Object)
653 - org.apache.commons.io.comparator.PathFileComparatorTest.suite()
654 - org.apache.commons.io.comparator.PackageTestSuite.suite()
655 - org.apache.commons.io.comparator.DefaultFileComparatorTest.suite()
656 - org.apache.commons.io.comparator.NameFileComparatorTest.suite()
657 - org.apache.commons.io.comparator.ExtensionFileComparatorTest.suite()
658 - org.apache.commons.io.comparator.LastModifiedFileComparatorTest.suite()
659 - org.apache.commons.io.filefilter.FileFilterTestCase.suite()
660 - org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter, java.io.File, Z)
661 - org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(java.lang.String)
662 - java.util.ArrayList.add(java.lang.Object)
663 - org.apache.commons.io.filefilter.FileFilterUtils.falseFileFilter()
664 - org.apache.commons.io.filefilter.AndFileFilter.getFileFilters()
665 - java.util.List.isEmpty()
666 - org.apache.commons.io.filefilter.OrFileFilter.getFileFilters()
667 - org.apache.commons.io.filefilter.OrFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)
668 - org.apache.commons.io.filefilter.OrFileFilter.setFileFilters(java.util.List)
669 - org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File, java.lang.String)
670 - org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter)
671 - org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(J)
672 - org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(J, Z)
673 - org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(java.util.Date)
674 - org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(java.util.Date, Z)
675 - org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(java.io.File)
676 - org.apache.commons.io.filefilter.FileFilterUtils.ageFileFilter(java.io.File, Z)
677 - org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(J)
678 - org.apache.commons.io.filefilter.FileFilterUtils.sizeFileFilter(J, Z)
679 - org.apache.commons.io.filefilter.FileFilterUtils.sizeRangeFileFilter(J, J)
680 - java.io.File.setReadOnly()
681 - org.apache.commons.io.filefilter.OrFileFilterTestCase.suite()
682 - org.apache.commons.io.filefilter.OrFileFilterTestCase.setUpTestFilters()
683 - java.util.List.add(I, java.lang.Object)
684 - org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.isInvoked()
685 - org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.isInvoked()
686 - java.lang.System.getProperty(java.lang.String, java.lang.String)
687 - org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.reset()
688 - org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.reset()
689 - org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.setInvoked(Z)
690 - org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.setInvoked(Z)
691 - org.apache.commons.io.filefilter.AndFileFilterTestCase.suite()
692 - org.apache.commons.io.filefilter.AndFileFilterTestCase.setUpTestFilters()
693 - org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getWorkingPathNamePropertyKey()
694 - org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getDefaultWorkingPath()
695 - org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.determineWorkingDirectoryPath(java.lang.String, java.lang.String)
696 - org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getConditionalFileFilter()
697 - org.apache.commons.io.filefilter.ConditionalFileFilter.getFileFilters()
698 - org.apache.commons.io.filefilter.ConditionalFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)
699 - java.util.List.iterator()
700 - org.apache.commons.io.filefilter.ConditionalFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)
701 - org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(I, org.apache.commons.io.filefilter.IOFileFilter, java.io.File, Z)
702 - org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(I, org.apache.commons.io.filefilter.IOFileFilter, java.io.File, Z)
703 - org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getTestFilters()
704 - org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getTrueResults()
705 - org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFalseResults()
706 - org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFileResults()
707 - org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFilenameResults()
708 - java.lang.Boolean.booleanValue()
709 - org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.buildFilterUsingConstructor(java.util.List)
710 - org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetTrueFilters([Lorg.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter;)
711 - org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetFalseFilters([Lorg.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter;)
712 - org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(I, [Lorg.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter;, [Z)
713 - org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(I, [Lorg.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter;, [Z)
714 - org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.buildFilterUsingAdd(java.util.List)
715 - org.apache.commons.io.filefilter.RegexFileFilterTestCase.suite()
716 - org.apache.commons.io.filefilter.RegexFileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter, java.io.File, Z)
717 - org.apache.commons.io.input.NullInputStream.getPosition()
718 - org.apache.commons.io.input.NullReader.read()
719 - org.apache.commons.io.input.NullReader.close()
720 - org.apache.commons.io.input.NullReader.getPosition()
721 - java.io.ByteArrayOutputStream.toString(java.lang.String)
722 - org.apache.commons.io.input.SwappedDataInputStream.readBoolean()
723 - org.apache.commons.io.input.SwappedDataInputStream.readChar()
724 - org.apache.commons.io.input.SwappedDataInputStream.readDouble()
725 - org.apache.commons.io.input.SwappedDataInputStream.readFloat()
726 - junit.framework.Assert.assertEquals(F, F, F)
727 - org.apache.commons.io.input.SwappedDataInputStream.readFully([B)
728 - junit.framework.Assert.assertEquals(B, B)
729 - org.apache.commons.io.input.SwappedDataInputStream.readInt()
730 - org.apache.commons.io.input.SwappedDataInputStream.readLine()
731 - org.apache.commons.io.input.SwappedDataInputStream.readLong()
732 - org.apache.commons.io.input.SwappedDataInputStream.readUnsignedByte()
733 - org.apache.commons.io.input.SwappedDataInputStream.readUnsignedShort()
734 - org.apache.commons.io.input.SwappedDataInputStream.readUTF()
735 - org.apache.commons.io.input.SwappedDataInputStream.skipBytes(I)
736 - org.apache.commons.io.input.CountingInputStream.read([B)
737 - org.apache.commons.io.input.CountingInputStream.getCount()
738 - org.apache.commons.io.input.CountingInputStream.read()
739 - org.apache.commons.io.input.CountingInputStream.read([B, I, I)
740 - org.apache.commons.io.input.CountingInputStream.resetCount()
741 - org.apache.commons.io.input.NullInputStream.close()
742 - org.apache.commons.io.input.CountingInputStream.skip(J)
743 - org.apache.commons.io.input.ClosedInputStream.read()
744 - org.apache.commons.io.input.CharSequenceReaderTest.checkRead(java.io.Reader, java.lang.String)
745 - org.apache.commons.io.input.CharSequenceReaderTest.checkArray([C, [C)
746 - junit.framework.Assert.assertEquals(java.lang.String, C, C)
747 - java.lang.Class.getClassLoader()
748 - org.apache.commons.io.filefilter.FileFilterUtils.fileFileFilter()
749 - org.apache.commons.io.monitor.FilesystemObserverTestCase.createObserver(java.io.File, java.io.FileFilter)
750 - org.apache.commons.io.monitor.FilesystemObserver.addListener(org.apache.commons.io.monitor.FilesystemListener)
751 - org.apache.commons.io.monitor.FilesystemObserverTestCase.checkAndNotify()
752 - org.apache.commons.io.monitor.FilesystemObserverTestCase.checkCollectionsEmpty(java.lang.String)
753 - org.apache.commons.io.monitor.FilesystemObserverTestCase.touch(java.io.File)
754 - org.apache.commons.io.monitor.FilesystemObserverTestCase.checkCollectionSizes(java.lang.String, I, I, I, I, I, I)
755 - org.apache.commons.io.monitor.CollectionFilesystemListener.getCreatedDirectories()
756 - org.apache.commons.io.monitor.CollectionFilesystemListener.getCreatedFiles()
757 - org.apache.commons.io.monitor.CollectionFilesystemListener.getDeletedDirectories()
758 - org.apache.commons.io.monitor.CollectionFilesystemListener.getChangedFiles()
759 - org.apache.commons.io.monitor.CollectionFilesystemListener.getDeletedFiles()
760 - org.apache.commons.io.monitor.CollectionFilesystemListener.getChangedDirectories()
761 - org.apache.commons.io.output.NullWriter.write(I)
762 - org.apache.commons.io.output.NullWriter.write([C)
763 - org.apache.commons.io.output.NullWriter.write([C, I, I)
764 - org.apache.commons.io.output.NullWriter.write(java.lang.String)
765 - org.apache.commons.io.output.NullWriter.write(java.lang.String, I, I)
766 - org.apache.commons.io.output.NullWriter.flush()
767 - org.apache.commons.io.output.NullWriter.close()
768 - org.apache.commons.io.output.ByteArrayOutputStream.write(I)
769 - org.apache.commons.io.output.NullOutputStream.write([B)
770 - org.apache.commons.io.output.NullOutputStream.write([B, I, I)
771 - org.apache.commons.io.output.NullOutputStream.write(I)
772 - org.apache.commons.io.output.ThresholdingOutputStream.write([B, I, I)
773 - org.apache.commons.io.output.DeferredFileOutputStream.close()
774 - org.apache.commons.io.output.DeferredFileOutputStream.getData()
775 - org.apache.commons.io.output.DeferredFileOutputStreamTest.verifyResultFile(java.io.File)
776 - org.apache.commons.io.output.ThresholdingOutputStream.write([B)
777 - org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream)
778 - org.apache.commons.io.output.DeferredFileOutputStream.getFile()
779 - junit.framework.Assert.assertNull(java.lang.String, java.lang.Object)
780 - java.lang.String.endsWith(java.lang.String)
781 - java.io.File.getParent()
782 - java.io.FileInputStream.read([B)
783 - java.io.OutputStreamWriter.getEncoding()
784 - org.apache.commons.io.output.FileWriterWithEncoding.write(java.lang.String)
785 - org.apache.commons.io.output.FileWriterWithEncoding.flush()
786 - java.nio.charset.Charset.availableCharsets()
787 - java.util.Map.containsKey(java.lang.Object)
788 - org.apache.commons.io.output.ClosedOutputStream.write(I)
789 - org.apache.commons.io.output.CountingOutputStream.write(I)
790 - org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String, [B, I, I)
791 - org.apache.commons.io.output.CountingOutputStream.getCount()
792 - org.apache.commons.io.output.CountingOutputStream.write([B)
793 - org.apache.commons.io.output.CountingOutputStream.write([B, I, I)
794 - org.apache.commons.io.output.CountingOutputStream.resetCount()
795 - org.apache.commons.io.output.TeeOutputStream.write(I)
796 - org.apache.commons.io.output.TeeOutputStreamTest.assertByteArrayEquals(java.lang.String, [B, [B)
797 - org.apache.commons.io.output.TeeOutputStream.write([B)
798 - org.apache.commons.io.output.TeeOutputStream.write([B, I, I)
799 - org.apache.commons.io.output.StringBuilderWriter.append(java.lang.CharSequence)
800 - org.apache.commons.io.output.StringBuilderWriter.getBuilder()
801 - java.io.ByteArrayOutputStream.write(I)
802 - org.apache.commons.io.output.ByteArrayOutputStream.write([B, I, I)
803 - java.io.ByteArrayOutputStream.write([B, I, I)
804 - org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream, java.io.ByteArrayOutputStream, I)
805 - org.apache.commons.io.output.ByteArrayOutputStreamTestCase.byteCmp([B, [B)
806 - java.io.ByteArrayOutputStream.size()
807 - org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkByteArrays([B, [B)
808 - org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream, java.io.ByteArrayOutputStream, [I)
809 - org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkStreams(org.apache.commons.io.output.ByteArrayOutputStream, java.io.ByteArrayOutputStream)
810 - org.apache.commons.io.output.ByteArrayOutputStream.reset()
811 - java.io.ByteArrayOutputStream.reset()
812 - org.apache.commons.io.output.ByteArrayOutputStream.write(java.io.InputStream)
813 - java.io.ByteArrayOutputStream.writeTo(java.io.OutputStream)
814 - org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(java.io.OutputStream, J)
815 - java.io.PrintWriter.println(java.lang.String)
816 - org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(java.io.File, java.io.File)
817 - java.io.PrintStream.write(I)
818 - java.io.PrintWriter.write(I)
