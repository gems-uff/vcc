1 - java.lang.ref.ReferenceQueue.remove()
2 - org.apache.commons.io.FileCleaner$Tracker.delete()
3 - java.lang.ref.Reference.clear()
4 - java.util.Collection.remove(java.lang.Object)
5 - java.util.Collection.add(java.lang.Object)
6 - java.util.Collection.size()
7 - java.io.File.getPath()
8 - java.io.File.delete()
9 - java.lang.String.valueOf(J)
10 - java.io.File.exists()
11 - org.apache.commons.io.IOUtils.closeQuietly(java.io.OutputStream)
12 - java.lang.System.currentTimeMillis()
13 - java.io.File.setLastModified(J)
14 - java.io.File.listFiles(java.io.FileFilter)
15 - java.io.File.isDirectory()
16 - org.apache.commons.io.FileUtils.innerListFiles(java.util.Collection, java.io.File, org.apache.commons.io.filefilter.IOFileFilter)
17 - java.util.Collection.toArray([Ljava.lang.Object;)
18 - org.apache.commons.io.filefilter.FileFilterUtils.notFileFilter(org.apache.commons.io.filefilter.IOFileFilter)
19 - org.apache.commons.io.filefilter.FileFilterUtils.andFileFilter(org.apache.commons.io.filefilter.IOFileFilter, org.apache.commons.io.filefilter.IOFileFilter)
20 - org.apache.commons.io.filefilter.FileFilterUtils.orFileFilter(org.apache.commons.io.filefilter.IOFileFilter, org.apache.commons.io.filefilter.IOFileFilter)
21 - org.apache.commons.io.FileUtils.toSuffixes([Ljava.lang.String;)
22 - org.apache.commons.io.FileUtils.listFiles(java.io.File, org.apache.commons.io.filefilter.IOFileFilter, org.apache.commons.io.filefilter.IOFileFilter)
23 - org.apache.commons.io.IOUtils.contentEquals(java.io.InputStream, java.io.InputStream)
24 - org.apache.commons.io.IOUtils.closeQuietly(java.io.InputStream)
25 - java.net.URL.getProtocol()
26 - java.lang.String.equals(java.lang.Object)
27 - java.net.URL.getFile()
28 - java.lang.String.replace(C, C)
29 - java.lang.String.indexOf(I, I)
30 - java.lang.String.length()
31 - java.lang.String.substring(I, I)
32 - java.lang.Integer.parseInt(java.lang.String, I)
33 - java.lang.String.substring(I)
34 - org.apache.commons.io.FileUtils.toFile(java.net.URL)
35 - java.io.File.toURL()
36 - java.io.File.getName()
37 - org.apache.commons.io.FileUtils.copyFile(java.io.File, java.io.File, Z)
38 - java.io.File.getCanonicalPath()
39 - java.io.File.getParentFile()
40 - java.io.File.mkdirs()
41 - java.io.File.canWrite()
42 - org.apache.commons.io.FileUtils.doCopyFile(java.io.File, java.io.File, Z)
43 - org.apache.commons.io.IOUtils.copy(java.io.InputStream, java.io.OutputStream)
44 - java.io.File.length()
45 - java.io.File.lastModified()
46 - org.apache.commons.io.FileUtils.copyDirectory(java.io.File, java.io.File, Z)
47 - org.apache.commons.io.FileUtils.doCopyDirectory(java.io.File, java.io.File, Z)
48 - java.io.File.listFiles()
49 - java.net.URL.openStream()
50 - org.apache.commons.io.FileUtils.cleanDirectory(java.io.File)
51 - org.apache.commons.io.FileUtils.forceDelete(java.io.File)
52 - java.lang.Thread.sleep(J)
53 - org.apache.commons.io.IOUtils.toString(java.io.InputStream, java.lang.String)
54 - org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)
55 - org.apache.commons.io.IOUtils.readLines(java.io.InputStream, java.lang.String)
56 - org.apache.commons.io.IOUtils.write(java.lang.String, java.io.OutputStream, java.lang.String)
57 - java.io.OutputStream.write([B)
58 - org.apache.commons.io.FileUtils.writeLines(java.io.File, java.lang.String, java.util.Collection, java.lang.String)
59 - org.apache.commons.io.IOUtils.writeLines(java.util.Collection, java.lang.String, java.io.OutputStream, java.lang.String)
60 - org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)
61 - org.apache.commons.io.FileUtils.deleteDirectoryOnExit(java.io.File)
62 - java.io.File.deleteOnExit()
63 - org.apache.commons.io.FileUtils.cleanDirectoryOnExit(java.io.File)
64 - org.apache.commons.io.FileUtils.forceDeleteOnExit(java.io.File)
65 - java.io.File.isFile()
66 - org.apache.commons.io.FileUtils.sizeOfDirectory(java.io.File)
67 - org.apache.commons.io.FileUtils.isFileNewer(java.io.File, J)
68 - java.util.Date.getTime()
69 - org.apache.commons.io.HexDump.dump(J)
70 - java.lang.StringBuffer.append(java.lang.StringBuffer)
71 - java.lang.StringBuffer.append(C)
72 - org.apache.commons.io.HexDump.dump(B)
73 - java.lang.StringBuffer.append(java.lang.String)
74 - java.lang.StringBuffer.toString()
75 - java.lang.String.getBytes()
76 - java.io.OutputStream.flush()
77 - java.lang.StringBuffer.setLength(I)
78 - java.io.Reader.close()
79 - java.io.Writer.close()
80 - java.io.InputStream.close()
81 - java.io.OutputStream.close()
82 - org.apache.commons.io.output.ByteArrayOutputStream.toByteArray()
83 - org.apache.commons.io.IOUtils.copy(java.io.Reader, java.io.OutputStream)
84 - org.apache.commons.io.IOUtils.copy(java.io.Reader, java.io.OutputStream, java.lang.String)
85 - org.apache.commons.io.IOUtils.copy(java.io.InputStream, java.io.Writer)
86 - java.io.CharArrayWriter.toCharArray()
87 - org.apache.commons.io.IOUtils.copy(java.io.InputStream, java.io.Writer, java.lang.String)
88 - org.apache.commons.io.IOUtils.copy(java.io.Reader, java.io.Writer)
89 - java.io.StringWriter.toString()
90 - org.apache.commons.io.IOUtils.readLines(java.io.Reader)
91 - org.apache.commons.io.IOUtils.readLines(java.io.InputStream)
92 - java.io.BufferedReader.readLine()
93 - java.util.List.add(java.lang.Object)
94 - java.lang.String.getBytes(java.lang.String)
95 - java.io.Writer.write(java.lang.String)
96 - org.apache.commons.io.IOUtils.write([B, java.io.Writer)
97 - java.io.Writer.write([C)
98 - org.apache.commons.io.IOUtils.write([C, java.io.OutputStream)
99 - org.apache.commons.io.IOUtils.write(java.lang.String, java.io.OutputStream)
100 - org.apache.commons.io.IOUtils.write(java.lang.StringBuffer, java.io.OutputStream)
101 - java.util.Collection.iterator()
102 - java.util.Iterator.hasNext()
103 - java.util.Iterator.next()
104 - java.lang.Object.toString()
105 - org.apache.commons.io.IOUtils.writeLines(java.util.Collection, java.lang.String, java.io.OutputStream)
106 - java.io.InputStream.read([B)
107 - java.io.OutputStream.write([B, I, I)
108 - java.io.Reader.read([C)
109 - java.io.Writer.write([C, I, I)
110 - java.io.OutputStreamWriter.flush()
111 - java.io.InputStream.read()
112 - java.io.Reader.read()
113 - org.apache.commons.io.FilenameUtils.doNormalize(java.lang.String, Z)
114 - org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)
115 - java.lang.String.getChars(I, I, [C, I)
116 - java.lang.System.arraycopy(java.lang.Object, I, java.lang.Object, I, I)
117 - org.apache.commons.io.FilenameUtils.normalize(java.lang.String)
118 - java.lang.String.charAt(I)
119 - org.apache.commons.io.FilenameUtils.isSeparator(C)
120 - java.lang.String.indexOf(I)
121 - org.apache.commons.io.FilenameUtils.separatorsToWindows(java.lang.String)
122 - org.apache.commons.io.FilenameUtils.separatorsToUnix(java.lang.String)
123 - java.lang.Math.min(I, I)
124 - java.lang.Character.toUpperCase(C)
125 - java.lang.String.lastIndexOf(I)
126 - java.lang.Math.max(I, I)
127 - org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String)
128 - org.apache.commons.io.FilenameUtils.doGetPath(java.lang.String, I)
129 - org.apache.commons.io.FilenameUtils.doGetFullPath(java.lang.String, Z)
130 - org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)
131 - org.apache.commons.io.FilenameUtils.getName(java.lang.String)
132 - org.apache.commons.io.FilenameUtils.removeExtension(java.lang.String)
133 - org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)
134 - org.apache.commons.io.FilenameUtils.equals(java.lang.String, java.lang.String, Z, Z)
135 - java.lang.String.equalsIgnoreCase(java.lang.String)
136 - org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)
137 - java.util.Collection.isEmpty()
138 - org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String, java.lang.String, Z)
139 - java.lang.String.toLowerCase()
140 - org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)
141 - java.util.Vector.size()
142 - java.util.Stack.pop()
143 - java.lang.String.indexOf(java.lang.String, I)
144 - java.util.Stack.push(java.lang.Object)
145 - java.lang.String.startsWith(java.lang.String, I)
146 - java.lang.String.indexOf(java.lang.String)
147 - java.lang.String.toCharArray()
148 - java.lang.StringBuffer.length()
149 - java.util.ArrayList.add(java.lang.Object)
150 - java.util.ArrayList.size()
151 - java.util.ArrayList.get(I)
152 - java.lang.Object.equals(java.lang.Object)
153 - java.util.ArrayList.toArray([Ljava.lang.Object;)
154 - org.apache.commons.io.CopyUtils.copy(java.io.InputStream, java.io.Writer)
155 - org.apache.commons.io.CopyUtils.copy(java.io.InputStream, java.io.Writer, java.lang.String)
156 - org.apache.commons.io.CopyUtils.copy(java.io.Reader, java.io.Writer)
157 - java.lang.Float.floatToIntBits(F)
158 - org.apache.commons.io.EndianUtils.swapInteger(I)
159 - java.lang.Float.intBitsToFloat(I)
160 - java.lang.Double.doubleToLongBits(D)
161 - org.apache.commons.io.EndianUtils.swapLong(J)
162 - java.lang.Double.longBitsToDouble(J)
163 - org.apache.commons.io.EndianUtils.writeSwappedInteger([B, I, I)
164 - org.apache.commons.io.EndianUtils.readSwappedInteger([B, I)
165 - org.apache.commons.io.EndianUtils.writeSwappedLong([B, I, J)
166 - org.apache.commons.io.EndianUtils.readSwappedLong([B, I)
167 - java.io.OutputStream.write(I)
168 - org.apache.commons.io.EndianUtils.read(java.io.InputStream)
169 - org.apache.commons.io.EndianUtils.writeSwappedInteger(java.io.OutputStream, I)
170 - org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)
171 - org.apache.commons.io.EndianUtils.writeSwappedLong(java.io.OutputStream, J)
172 - org.apache.commons.io.EndianUtils.readSwappedLong(java.io.InputStream)
173 - org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String, I)
174 - org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String)
175 - org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String)
176 - org.apache.commons.io.FileSystemUtils.openProcessStream([Ljava.lang.String;)
177 - java.lang.String.trim()
178 - org.apache.commons.io.IOUtils.closeQuietly(java.io.Reader)
179 - java.lang.Character.isDigit(C)
180 - java.lang.StringBuffer.charAt(I)
181 - java.lang.StringBuffer.deleteCharAt(I)
182 - java.lang.Long.parseLong(java.lang.String)
183 - java.util.StringTokenizer.countTokens()
184 - java.util.StringTokenizer.nextToken()
185 - java.lang.Runtime.getRuntime()
186 - java.lang.Runtime.exec([Ljava.lang.String;)
187 - java.lang.Process.getInputStream()
188 - org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File, java.lang.String)
189 - org.apache.commons.io.filefilter.AbstractFileFilter.accept(java.io.File)
190 - java.io.FileFilter.accept(java.io.File)
191 - java.io.FilenameFilter.accept(java.io.File, java.lang.String)
192 - java.util.List.size()
193 - java.util.List.toArray([Ljava.lang.Object;)
194 - org.apache.commons.io.FilenameUtils.wildcardMatch(java.lang.String, java.lang.String)
195 - org.apache.commons.io.filefilter.AndFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)
196 - java.util.Collections.unmodifiableList(java.util.List)
197 - java.util.List.remove(java.lang.Object)
198 - java.util.List.iterator()
199 - org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File)
200 - org.apache.commons.io.filefilter.IOFileFilter.accept(java.io.File, java.lang.String)
201 - org.apache.commons.io.filefilter.FileFilterUtils.directoryFileFilter()
202 - org.apache.commons.io.filefilter.FileFilterUtils.nameFileFilter(java.lang.String)
203 - java.lang.String.endsWith(java.lang.String)
204 - org.apache.commons.io.filefilter.OrFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)
205 - java.lang.String.startsWith(java.lang.String)
206 - java.io.InputStream.read([B, I, I)
207 - java.io.InputStream.skip(J)
208 - java.io.InputStream.available()
209 - java.io.InputStream.mark(I)
210 - java.io.InputStream.reset()
211 - java.io.InputStream.markSupported()
212 - java.io.Reader.read([C, I, I)
213 - java.io.Reader.skip(J)
214 - java.io.Reader.ready()
215 - java.io.Reader.mark(I)
216 - java.io.Reader.reset()
217 - java.io.Reader.markSupported()
218 - org.apache.commons.io.input.DemuxInputStream.getStream()
219 - java.lang.ThreadLocal.set(java.lang.Object)
220 - java.lang.ThreadLocal.get()
221 - org.apache.commons.io.input.SwappedDataInputStream.readByte()
222 - org.apache.commons.io.input.SwappedDataInputStream.readShort()
223 - org.apache.commons.io.EndianUtils.readSwappedDouble(java.io.InputStream)
224 - org.apache.commons.io.EndianUtils.readSwappedFloat(java.io.InputStream)
225 - org.apache.commons.io.input.SwappedDataInputStream.readFully([B, I, I)
226 - org.apache.commons.io.input.ProxyInputStream.read([B, I, I)
227 - org.apache.commons.io.EndianUtils.readSwappedShort(java.io.InputStream)
228 - org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(java.io.InputStream)
229 - java.io.ObjectStreamClass.getName()
230 - java.lang.Class.forName(java.lang.String, Z, java.lang.ClassLoader)
231 - org.apache.commons.io.output.ByteArrayOutputStream.needNewBuffer(I)
232 - java.util.List.get(I)
233 - org.apache.commons.io.output.ByteArrayOutputStream.getBuffer(I)
234 - org.apache.commons.io.output.ByteArrayOutputStream.write([B, I, I)
235 - java.lang.System.getProperty(java.lang.String)
236 - org.apache.commons.io.output.LockableFileWriter.testLockDir(java.io.File)
237 - org.apache.commons.io.output.LockableFileWriter.createLock()
238 - java.io.File.getAbsolutePath()
239 - java.io.File.createNewFile()
240 - java.io.OutputStreamWriter.close()
241 - java.io.OutputStreamWriter.write([C, I, I)
242 - org.apache.commons.io.output.DemuxOutputStream.getStream()
243 - org.apache.commons.io.output.ThresholdingOutputStream.checkThreshold(I)
244 - org.apache.commons.io.output.ThresholdingOutputStream.getStream()
245 - org.apache.commons.io.output.ThresholdingOutputStream.flush()
246 - org.apache.commons.io.output.ThresholdingOutputStream.thresholdReached()
247 - java.io.Writer.write(I)
248 - java.io.Writer.write(java.lang.String, I, I)
249 - java.io.Writer.flush()
250 - org.apache.commons.io.output.ByteArrayOutputStream.writeTo(java.io.OutputStream)
251 - org.apache.commons.io.output.ThresholdingOutputStream.isThresholdExceeded()
252 - org.apache.commons.io.output.DeferredFileOutputStream.isInMemory()
253 - org.apache.commons.io.FilenameUtilsTestCase.suite()
254 - junit.textui.TestRunner.run(junit.framework.Test)
255 - org.apache.commons.io.testtools.FileBasedTestCase.getTestDirectory()
256 - org.apache.commons.io.testtools.FileBasedTestCase.createFile(java.io.File, J)
257 - junit.framework.Assert.assertEquals(java.lang.String, java.lang.String)
258 - org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(java.lang.String)
259 - org.apache.commons.io.FilenameUtils.concat(java.lang.String, java.lang.String)
260 - org.apache.commons.io.FilenameUtils.separatorsToSystem(java.lang.String)
261 - junit.framework.Assert.assertEquals(I, I)
262 - org.apache.commons.io.FilenameUtils.getPath(java.lang.String)
263 - org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(java.lang.String)
264 - org.apache.commons.io.FilenameUtils.getFullPath(java.lang.String)
265 - org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(java.lang.String)
266 - org.apache.commons.io.FilenameUtils.getBaseName(java.lang.String)
267 - org.apache.commons.io.FilenameUtils.equals(java.lang.String, java.lang.String)
268 - junit.framework.Assert.assertEquals(Z, Z)
269 - org.apache.commons.io.FilenameUtils.equalsOnSystem(java.lang.String, java.lang.String)
270 - org.apache.commons.io.FilenameUtils.equalsNormalized(java.lang.String, java.lang.String)
271 - org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(java.lang.String, java.lang.String)
272 - org.apache.commons.io.FilenameUtils.isExtension(java.lang.String, java.lang.String)
273 - org.apache.commons.io.FilenameUtils.isExtension(java.lang.String, [Ljava.lang.String;)
274 - org.apache.commons.io.FilenameUtils.isExtension(java.lang.String, java.util.Collection)
275 - java.util.Arrays.asList([Ljava.lang.String;)
276 - org.apache.commons.io.FileUtilsListFilesTestCase.getLocalTestDirectory()
277 - org.apache.commons.io.FileUtils.touch(java.io.File)
278 - org.apache.commons.io.FileUtils.listFiles(java.io.File, [Ljava.lang.String;, Z)
279 - org.apache.commons.io.FileUtilsListFilesTestCase.filesToFilenames(java.util.Collection)
280 - java.util.Collection.contains(java.lang.Object)
281 - junit.framework.Assert.assertTrue(Z)
282 - junit.framework.Assert.assertFalse(Z)
283 - org.apache.commons.io.filefilter.FileFilterUtils.trueFileFilter()
284 - junit.framework.Assert.assertTrue(java.lang.String, Z)
285 - junit.framework.Assert.assertFalse(java.lang.String, Z)
286 - org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)
287 - org.apache.commons.io.filefilter.FileFilterUtils.prefixFileFilter(java.lang.String)
288 - junit.framework.Assert.fail(java.lang.String)
289 - org.apache.commons.io.IOUtilsCopyTestCase.suite()
290 - org.apache.commons.io.output.ByteArrayOutputStream.size()
291 - junit.framework.Assert.assertEquals(java.lang.String, I, I)
292 - java.util.Arrays.equals([B, [B)
293 - junit.framework.Assert.fail()
294 - org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.off()
295 - org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewer(java.lang.String, java.io.File, J, Z)
296 - junit.framework.Assert.assertEquals(java.lang.String, Z, Z)
297 - org.apache.commons.io.FileUtils.isFileNewer(java.io.File, java.util.Date)
298 - org.apache.commons.io.FileUtils.isFileNewer(java.io.File, java.io.File)
299 - org.apache.commons.io.CopyUtilsTest.suite()
300 - org.apache.commons.io.CopyUtils.copy([B, java.io.OutputStream)
301 - org.apache.commons.io.CopyUtils.copy([B, java.io.Writer)
302 - org.apache.commons.io.CopyUtils.copy(java.io.InputStream, java.io.OutputStream)
303 - org.apache.commons.io.CopyUtils.copy(java.io.Reader, java.io.OutputStream)
304 - org.apache.commons.io.CopyUtils.copy(java.lang.String, java.io.OutputStream)
305 - org.apache.commons.io.CopyUtils.copy(java.lang.String, java.io.Writer)
306 - org.apache.commons.io.HexDump.dump([B, J, java.io.OutputStream, I)
307 - org.apache.commons.io.HexDumpTest.toHex(I)
308 - org.apache.commons.io.HexDumpTest.toAscii(I)
309 - junit.framework.Assert.assertEquals(java.lang.String, B, B)
310 - java.io.PrintStream.println(java.lang.String)
311 - junit.textui.TestRunner.run(java.lang.Class)
312 - org.apache.commons.io.PackageTestSuite.suite()
313 - junit.framework.TestSuite.addTest(junit.framework.Test)
314 - java.util.HashMap.get(java.lang.Object)
315 - junit.framework.Assert.assertNotNull(java.lang.String, java.lang.Object)
316 - org.apache.commons.io.output.ByteArrayOutputStream.toString()
317 - org.apache.commons.io.DemuxTestCase$ReaderThread.getData()
318 - java.util.HashMap.keySet()
319 - java.util.Set.iterator()
320 - java.lang.Thread.start()
321 - java.lang.Thread.join()
322 - java.util.HashMap.put(java.lang.Object, java.lang.Object)
323 - org.apache.commons.io.DemuxTestCase.startWriter(java.lang.String, java.lang.String, org.apache.commons.io.output.DemuxOutputStream)
324 - org.apache.commons.io.DemuxTestCase.doStart()
325 - org.apache.commons.io.DemuxTestCase.doJoin()
326 - org.apache.commons.io.DemuxTestCase.getOutput(java.lang.String)
327 - junit.framework.Assert.assertEquals(java.lang.String, java.lang.String, java.lang.String)
328 - org.apache.commons.io.DemuxTestCase.startReader(java.lang.String, java.lang.String, org.apache.commons.io.input.DemuxInputStream)
329 - org.apache.commons.io.DemuxTestCase.getInput(java.lang.String)
330 - org.apache.commons.io.input.DemuxInputStream.bindStream(java.io.InputStream)
331 - org.apache.commons.io.input.DemuxInputStream.read()
332 - java.util.Random.nextInt()
333 - java.lang.Math.abs(I)
334 - java.lang.Throwable.printStackTrace()
335 - org.apache.commons.io.output.DemuxOutputStream.bindStream(java.io.OutputStream)
336 - org.apache.commons.io.output.DemuxOutputStream.write(I)
337 - org.apache.commons.io.IOUtilsWriteTestCase.suite()
338 - org.apache.commons.io.IOUtils.write([B, java.io.OutputStream)
339 - org.apache.commons.io.testtools.YellOnFlushAndCloseOutputStream.flush()
340 - org.apache.commons.io.IOUtils.write([B, java.io.Writer, java.lang.String)
341 - org.apache.commons.io.IOUtils.write(java.lang.String, java.io.Writer)
342 - org.apache.commons.io.IOUtils.write([C, java.io.OutputStream, java.lang.String)
343 - org.apache.commons.io.IOUtils.write([C, java.io.Writer)
344 - java.util.Arrays.asList([Ljava.lang.Object;)
345 - org.apache.commons.io.output.ByteArrayOutputStream.toString(java.lang.String)
346 - org.apache.commons.io.IOUtils.writeLines(java.util.Collection, java.lang.String, java.io.Writer)
347 - org.apache.commons.io.FilenameUtils.wildcardMatchOnSystem(java.lang.String, java.lang.String)
348 - org.apache.commons.io.FilenameUtilsWildcardTestCase.assertArrayEquals([Ljava.lang.Object;, [Ljava.lang.Object;)
349 - junit.framework.Assert.assertEquals(java.lang.Object, java.lang.Object)
350 - org.apache.commons.io.FilenameUtilsWildcardTestCase.assertMatch(java.lang.String, java.lang.String, Z)
351 - org.apache.commons.io.FileUtilsCleanDirectoryTestCase.suite()
352 - org.apache.commons.io.FileUtilsCleanDirectoryTestCase.chmod(java.io.File, I, Z)
353 - java.io.File.list()
354 - java.lang.Throwable.getMessage()
355 - java.lang.Integer.toString(I)
356 - java.lang.Process.waitFor()
357 - org.apache.commons.io.AllIOTestSuite.suite()
358 - org.apache.commons.io.filefilter.PackageTestSuite.suite()
359 - org.apache.commons.io.input.PackageTestSuite.suite()
360 - org.apache.commons.io.output.PackageTestSuite.suite()
361 - org.apache.commons.io.FileCleanerTestCase.suite()
362 - org.apache.commons.io.FileCleaner.getTrackCount()
363 - org.apache.commons.io.FileCleaner.track(java.lang.String, java.lang.Object)
364 - java.io.RandomAccessFile.close()
365 - java.lang.System.gc()
366 - org.apache.commons.io.FileUtilsTestCase.suite()
367 - org.apache.commons.io.FileUtils.byteCountToDisplaySize(J)
368 - org.apache.commons.io.FileUtils.waitFor(java.io.File, I)
369 - java.io.File.toString()
370 - org.apache.commons.io.FileUtils.toFiles([Ljava.net.URL;)
371 - junit.framework.Assert.assertEquals(java.lang.String, java.lang.Object, java.lang.Object)
372 - org.apache.commons.io.FileUtils.toURLs([Ljava.io.File;)
373 - java.net.URL.toExternalForm()
374 - junit.framework.TestCase.getName()
375 - org.apache.commons.io.FileUtils.contentEquals(java.io.File, java.io.File)
376 - java.lang.Object.getClass()
377 - java.lang.Class.getResource(java.lang.String)
378 - org.apache.commons.io.FileUtils.copyURLToFile(java.net.URL, java.io.File)
379 - java.lang.Class.getResourceAsStream(java.lang.String)
380 - java.io.FileInputStream.close()
381 - org.apache.commons.io.FileUtils.forceMkdir(java.io.File)
382 - java.io.File.mkdir()
383 - junit.framework.Assert.assertEquals(java.lang.String, J, J)
384 - org.apache.commons.io.FileUtils.copyFile(java.io.File, java.io.File)
385 - org.apache.commons.io.FileUtils.writeStringToFile(java.io.File, java.lang.String, java.lang.String)
386 - org.apache.commons.io.FileUtils.copyDirectory(java.io.File, java.io.File)
387 - junit.framework.Assert.assertEquals(J, J)
388 - org.apache.commons.io.FileUtils.copyFileToDirectory(java.io.File, java.io.File)
389 - java.lang.StringBuffer.replace(I, I, java.lang.String)
390 - org.apache.commons.io.FileUtils.readFileToString(java.io.File, java.lang.String)
391 - java.io.FileOutputStream.write(I)
392 - java.io.FileOutputStream.close()
393 - java.util.Calendar.getTime()
394 - java.io.FileOutputStream.write([B)
395 - org.apache.commons.io.FileUtils.readFileToByteArray(java.io.File)
396 - org.apache.commons.io.testtools.FileBasedTestCase.newFile(java.lang.String)
397 - org.apache.commons.io.testtools.FileBasedTestCase.createLineBasedFile(java.io.File, [Ljava.lang.String;)
398 - org.apache.commons.io.FileUtils.readLines(java.io.File, java.lang.String)
399 - org.apache.commons.io.testtools.FileBasedTestCase.deleteFile(java.io.File)
400 - org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent([B, java.io.File)
401 - org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File, [B)
402 - org.apache.commons.io.FileUtils.writeLines(java.io.File, java.lang.String, java.util.Collection)
403 - org.apache.commons.io.FileSystemUtilsTestCase.suite()
404 - org.apache.commons.io.FileSystemUtils.freeSpace(java.lang.String)
405 - junit.framework.Assert.assertEquals(C, C)
406 - org.apache.commons.io.IOUtils.toString(java.io.InputStream)
407 - junit.framework.Assert.assertNotNull(java.lang.Object)
408 - java.io.FileInputStream.available()
409 - org.apache.commons.io.IOUtils.toString(java.io.Reader)
410 - java.io.InputStreamReader.close()
411 - org.apache.commons.io.testtools.FileBasedTestCase.checkFile(java.io.File, java.io.File)
412 - org.apache.commons.io.testtools.FileBasedTestCase.checkWrite(java.io.OutputStream)
413 - org.apache.commons.io.testtools.FileBasedTestCase.checkWrite(java.io.Writer)
414 - org.apache.commons.io.IOUtils.toByteArray(java.lang.String)
415 - org.apache.commons.io.IOUtilsTestCase.assertEqualContent([B, [B)
416 - org.apache.commons.io.IOUtils.toString([B)
417 - org.apache.commons.io.IOUtils.toInputStream(java.lang.String)
418 - org.apache.commons.io.IOUtils.toInputStream(java.lang.String, java.lang.String)
419 - org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream)
420 - org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent([C, java.io.File)
421 - org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream, java.lang.String)
422 - org.apache.commons.io.IOUtils.toCharArray(java.io.Reader)
423 - org.apache.commons.io.EndianUtils.swapShort(S)
424 - junit.framework.Assert.assertEquals(S, S)
425 - org.apache.commons.io.EndianUtils.swapFloat(F)
426 - junit.framework.Assert.assertEquals(D, D, D)
427 - org.apache.commons.io.EndianUtils.swapDouble(D)
428 - org.apache.commons.io.EndianUtils.readSwappedShort([B, I)
429 - org.apache.commons.io.EndianUtils.writeSwappedShort([B, I, S)
430 - org.apache.commons.io.EndianUtils.writeSwappedShort(java.io.OutputStream, S)
431 - java.io.ByteArrayOutputStream.toByteArray()
432 - org.apache.commons.io.EndianUtils.readSwappedUnsignedShort([B, I)
433 - org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger([B, I)
434 - org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)
435 - org.apache.commons.io.EndianUtils.readSwappedFloat([B, I)
436 - org.apache.commons.io.EndianUtils.writeSwappedFloat([B, I, F)
437 - org.apache.commons.io.EndianUtils.writeSwappedFloat(java.io.OutputStream, F)
438 - org.apache.commons.io.EndianUtils.readSwappedDouble([B, I)
439 - org.apache.commons.io.EndianUtils.writeSwappedDouble([B, I, D)
440 - org.apache.commons.io.EndianUtils.writeSwappedDouble(java.io.OutputStream, D)
441 - org.apache.commons.io.filefilter.FileFilterTestCase.suite()
442 - java.lang.Class.getName()
443 - org.apache.commons.io.filefilter.FileFilterTestCase.assertFiltering(org.apache.commons.io.filefilter.IOFileFilter, java.io.File, Z)
444 - org.apache.commons.io.filefilter.FileFilterUtils.suffixFileFilter(java.lang.String)
445 - org.apache.commons.io.filefilter.FileFilterUtils.falseFileFilter()
446 - org.apache.commons.io.filefilter.AndFileFilter.getFileFilters()
447 - java.util.List.isEmpty()
448 - org.apache.commons.io.filefilter.OrFileFilter.getFileFilters()
449 - org.apache.commons.io.filefilter.OrFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)
450 - org.apache.commons.io.filefilter.OrFileFilter.setFileFilters(java.util.List)
451 - org.apache.commons.io.filefilter.OrFileFilter.accept(java.io.File, java.lang.String)
452 - org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter)
453 - org.apache.commons.io.filefilter.AndFileFilterTestCase.suite()
454 - org.apache.commons.io.filefilter.AndFileFilterTestCase.setUpTestFilters()
455 - java.util.List.add(I, java.lang.Object)
456 - org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.isInvoked()
457 - org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.isInvoked()
458 - java.lang.System.getProperty(java.lang.String, java.lang.String)
459 - org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.reset()
460 - org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.reset()
461 - org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter.setInvoked(Z)
462 - org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter.setInvoked(Z)
463 - org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getWorkingPathNamePropertyKey()
464 - org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getDefaultWorkingPath()
465 - org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.determineWorkingDirectoryPath(java.lang.String, java.lang.String)
466 - org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getConditionalFileFilter()
467 - org.apache.commons.io.filefilter.ConditionalFileFilter.getFileFilters()
468 - org.apache.commons.io.filefilter.ConditionalFileFilter.addFileFilter(org.apache.commons.io.filefilter.IOFileFilter)
469 - java.util.List.contains(java.lang.Object)
470 - org.apache.commons.io.filefilter.ConditionalFileFilter.removeFileFilter(org.apache.commons.io.filefilter.IOFileFilter)
471 - org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFileFiltering(I, org.apache.commons.io.filefilter.IOFileFilter, java.io.File, Z)
472 - org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFilenameFiltering(I, org.apache.commons.io.filefilter.IOFileFilter, java.io.File, Z)
473 - org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getTestFilters()
474 - org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getTrueResults()
475 - org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFalseResults()
476 - org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFileResults()
477 - org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.getFilenameResults()
478 - java.lang.Boolean.booleanValue()
479 - org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.buildFilterUsingConstructor(java.util.List)
480 - org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetTrueFilters([Lorg.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter;)
481 - org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.resetFalseFilters([Lorg.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter;)
482 - org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertTrueFiltersInvoked(I, [Lorg.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterTrueFileFilter;, [Z)
483 - org.apache.commons.io.filefilter.IOFileFilterAbstractTestCase.assertFalseFiltersInvoked(I, [Lorg.apache.commons.io.filefilter.IOFileFilterAbstractTestCase$TesterFalseFileFilter;, [Z)
484 - org.apache.commons.io.filefilter.ConditionalFileFilterAbstractTestCase.buildFilterUsingAdd(java.util.List)
485 - org.apache.commons.io.filefilter.OrFileFilterTestCase.suite()
486 - org.apache.commons.io.filefilter.OrFileFilterTestCase.setUpTestFilters()
487 - org.apache.commons.io.input.SwappedDataInputStream.readBoolean()
488 - org.apache.commons.io.input.SwappedDataInputStream.readChar()
489 - org.apache.commons.io.input.SwappedDataInputStream.readDouble()
490 - org.apache.commons.io.input.SwappedDataInputStream.readFloat()
491 - junit.framework.Assert.assertEquals(F, F, F)
492 - org.apache.commons.io.input.SwappedDataInputStream.readFully([B)
493 - junit.framework.Assert.assertEquals(B, B)
494 - org.apache.commons.io.input.SwappedDataInputStream.readInt()
495 - org.apache.commons.io.input.SwappedDataInputStream.readLine()
496 - org.apache.commons.io.input.SwappedDataInputStream.readLong()
497 - org.apache.commons.io.input.SwappedDataInputStream.readUnsignedByte()
498 - org.apache.commons.io.input.SwappedDataInputStream.readUnsignedShort()
499 - org.apache.commons.io.input.SwappedDataInputStream.readUTF()
500 - org.apache.commons.io.input.SwappedDataInputStream.skipBytes(I)
501 - org.apache.commons.io.input.CountingInputStream.read([B)
502 - org.apache.commons.io.input.CountingInputStream.getCount()
503 - org.apache.commons.io.input.CountingInputStream.read()
504 - org.apache.commons.io.input.CountingInputStream.read([B, I, I)
505 - org.apache.commons.io.input.CountingInputStream.resetCount()
506 - org.apache.commons.io.input.CountingInputStream.skip(J)
507 - java.io.ObjectOutputStream.writeObject(java.lang.Object)
508 - java.lang.Class.getClassLoader()
509 - java.io.ObjectInputStream.readObject()
510 - org.apache.commons.io.output.TeeOutputStream.write(I)
511 - org.apache.commons.io.output.TeeOutputStreamTest.assertByteArrayEquals(java.lang.String, [B, [B)
512 - org.apache.commons.io.output.TeeOutputStream.write([B)
513 - org.apache.commons.io.output.TeeOutputStream.write([B, I, I)
514 - org.apache.commons.io.output.LockableFileWriter.close()
515 - org.apache.commons.io.output.ByteArrayOutputStream.write(I)
516 - java.io.ByteArrayOutputStream.write(I)
517 - java.io.ByteArrayOutputStream.write([B, I, I)
518 - org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream, java.io.ByteArrayOutputStream, I)
519 - org.apache.commons.io.output.ByteArrayOutputStreamTestCase.byteCmp([B, [B)
520 - java.io.ByteArrayOutputStream.size()
521 - org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkByteArrays([B, [B)
522 - org.apache.commons.io.output.ByteArrayOutputStreamTestCase.writeData(org.apache.commons.io.output.ByteArrayOutputStream, java.io.ByteArrayOutputStream, [I)
523 - org.apache.commons.io.output.ByteArrayOutputStreamTestCase.checkStreams(org.apache.commons.io.output.ByteArrayOutputStream, java.io.ByteArrayOutputStream)
524 - org.apache.commons.io.output.ByteArrayOutputStream.reset()
525 - java.io.ByteArrayOutputStream.reset()
526 - java.io.ByteArrayOutputStream.writeTo(java.io.OutputStream)
527 - java.io.ByteArrayOutputStream.toString(java.lang.String)
528 - org.apache.commons.io.output.ThresholdingOutputStream.write([B, I, I)
529 - org.apache.commons.io.output.DeferredFileOutputStream.close()
530 - org.apache.commons.io.output.DeferredFileOutputStream.getData()
531 - junit.framework.Assert.assertNull(java.lang.Object)
532 - org.apache.commons.io.output.DeferredFileOutputStreamTest.verifyResultFile(java.io.File)
533 - org.apache.commons.io.output.ThresholdingOutputStream.write([B)
534 - org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream)
535 - java.io.FileInputStream.read([B)
536 - org.apache.commons.io.output.NullOutputStream.write([B)
537 - org.apache.commons.io.output.NullOutputStream.write([B, I, I)
538 - org.apache.commons.io.output.NullOutputStream.write(I)
539 - org.apache.commons.io.output.CountingOutputStream.write(I)
540 - org.apache.commons.io.output.CountingOutputStreamTest.assertByteArrayEquals(java.lang.String, [B, I, I)
541 - org.apache.commons.io.output.CountingOutputStream.getCount()
542 - org.apache.commons.io.output.CountingOutputStream.write([B)
543 - org.apache.commons.io.output.CountingOutputStream.write([B, I, I)
544 - org.apache.commons.io.output.CountingOutputStream.resetCount()
545 - java.io.File.getAbsoluteFile()
546 - org.apache.commons.io.testtools.FileBasedTestCase.generateTestData(java.io.OutputStream, J)
547 - java.io.PrintWriter.println(java.lang.String)
548 - org.apache.commons.io.IOUtils.closeQuietly(java.io.Writer)
549 - org.apache.commons.io.testtools.FileBasedTestCase.assertEqualContent(java.io.File, java.io.File)
550 - java.io.PrintStream.write(I)
551 - java.io.PrintWriter.write(I)
