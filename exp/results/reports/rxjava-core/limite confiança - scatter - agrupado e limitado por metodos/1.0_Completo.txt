************************ Método Avaliado: call ************************
*Commit: commit 1d1066b1fa68afc60711ebc000dd33f7e7ca795f 1390283326 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.operators.OperationReplay$BaseState.lock()
rx.util.functions.Action0.call()
rx.operators.OperationReplay$ReplayState.addReplayer(rx.Observer)
add
rx.operators.OperationReplay$BaseState.unlock()
rx.operators.OperationReplay$VirtualList.start()
rx.operators.OperationReplay$VirtualList.end()
rx.operators.OperationReplay$VirtualList.get(I)
rx.util.functions.Func1.call(null)
rx.Observer.onNext(null)
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onCompleted()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.util.functions.Action0.call()
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.OperationReplay$BaseState.lock()
Também chamam:
rx.operators.OperationReplay$BaseState.unlock()
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: rx.operators.OperationReplay$ReplayState.addReplayer(rx.Observer)
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.OperationReplay$BaseState.lock()
rx.util.functions.Action0.call()
Também chamam:
rx.operators.OperationReplay$BaseState.unlock()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: add
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperationReplay$BaseState.unlock()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperationReplay$VirtualList.start()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperationReplay$VirtualList.end()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperationReplay$VirtualList.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func1.call(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func1.call(null)
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
************************ Método Avaliado: getOnSubscribeFunc ************************
*Commit: commit 1d1066b1fa68afc60711ebc000dd33f7e7ca795f 1390283326 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.util.functions.Action1.call(rx.subjects.SubjectSubscriptionManager$SubjectObserver)
java.util.concurrent.atomic.AtomicReference.get()
java.util.concurrent.CountDownLatch.await()
java.lang.Thread.currentThread()
java.lang.Thread.interrupt()
add
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
rx.subjects.SubjectSubscriptionManager$State.removeObserver(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.subjects.SubjectSubscriptionManager$State, rx.subjects.SubjectSubscriptionManager$State)
rx.subjects.SubjectSubscriptionManager$State.addObserver(rx.Subscription, rx.subjects.SubjectSubscriptionManager$SubjectObserver)
java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.subjects.SubjectSubscriptionManager$State, rx.subjects.SubjectSubscriptionManager$State)
rx.util.functions.Action1.call(rx.subjects.SubjectSubscriptionManager$SubjectObserver)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.CountDownLatch.await()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Thread.currentThread()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Thread.interrupt()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Thread.currentThread()
Também chamam:
java.lang.Thread.interrupt()
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: add
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subjects.SubjectSubscriptionManager$State.removeObserver(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.subjects.SubjectSubscriptionManager$State, rx.subjects.SubjectSubscriptionManager$State)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subjects.SubjectSubscriptionManager$State.addObserver(rx.Subscription, rx.subjects.SubjectSubscriptionManager$SubjectObserver)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.subjects.SubjectSubscriptionManager$State, rx.subjects.SubjectSubscriptionManager$State)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Action1.call(rx.subjects.SubjectSubscriptionManager$SubjectObserver)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperationReplay$CustomReplaySubjectSubscribeFunc.onSubscribe(rx.Observer) ************************
*Commit: commit 00f448819641f63fedb1eb5be64155e9bc574863 1390283349 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.operators.OperationReplay$BaseState.lock()
rx.util.functions.Action0.call()
rx.operators.OperationReplay$ReplayState.addReplayer(rx.Observer)
rx.operators.OperationReplay$BaseState.unlock()
rx.operators.OperationReplay$VirtualList.start()
rx.operators.OperationReplay$VirtualList.end()
rx.operators.OperationReplay$VirtualList.get(I)
rx.util.functions.Func1.call(null)
rx.Observer.onNext(null)
rx.Observer.onError(java.lang.Throwable)
rx.subscriptions.Subscriptions.empty()
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onCompleted()
rx.subscriptions.Subscriptions.empty()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.util.functions.Action0.call()
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.OperationReplay$BaseState.lock()
Também chamam:
rx.operators.OperationReplay$BaseState.unlock()
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: rx.operators.OperationReplay$ReplayState.addReplayer(rx.Observer)
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.OperationReplay$BaseState.lock()
rx.util.functions.Action0.call()
Também chamam:
rx.operators.OperationReplay$BaseState.unlock()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.operators.OperationReplay$BaseState.unlock()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperationReplay$VirtualList.start()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperationReplay$VirtualList.end()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperationReplay$VirtualList.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func1.call(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func1.call(null)
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperatorGroupBy.call(rx.Observer) ************************
*Commit: commit 5478e30caefe14b12a12c4e1e9c27ebaa40e2004 1390458827 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.values()
rx.subjects.PublishSubject.onCompleted()
java.util.concurrent.atomic.AtomicInteger.get()
rx.Observer.onCompleted()
rx.Observer.onError(java.lang.Throwable)
rx.util.functions.Func1.call(null)
java.util.Map.get(java.lang.Object)
isUnsubscribed
rx.subjects.PublishSubject.create()
java.util.concurrent.atomic.AtomicInteger.incrementAndGet()
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
add
null.completeInner()
toObservable
subscribe
rx.Observer.onCompleted()
null.completeInner()
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onNext(null)
java.util.Map.put(rx.operators.OperatorGroupBy$K, rx.subjects.PublishSubject)
rx.Observer.onNext(null)
rx.subjects.PublishSubject.onNext(rx.operators.OperatorGroupBy$T)
null.onError(java.lang.Throwable)
java.util.concurrent.atomic.AtomicInteger.decrementAndGet()
unsubscribe
java.util.Map.values()
rx.subjects.PublishSubject.onCompleted()
rx.Observer.onCompleted()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.subjects.PublishSubject.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicInteger.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func1.call(null)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.get(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: isUnsubscribed
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subjects.PublishSubject.create()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicInteger.incrementAndGet()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Nenhuma sugestão fornecida.
**************************
Chamada: add
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onError(java.lang.Throwable)
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onCompleted()
rx.Observer.onError(java.lang.Throwable)
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onCompleted()
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: null.completeInner()
Nenhuma sugestão fornecida.
**************************
Chamada: toObservable
Nenhuma sugestão fornecida.
**************************
Chamada: subscribe
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: null.completeInner()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.put(rx.operators.OperatorGroupBy$K, rx.subjects.PublishSubject)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subjects.PublishSubject.onNext(rx.operators.OperatorGroupBy$T)
Nenhuma sugestão fornecida.
**************************
Chamada: null.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicInteger.decrementAndGet()
Nenhuma sugestão fornecida.
**************************
Chamada: unsubscribe
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.values()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subjects.PublishSubject.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: doOnEach ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.operators.OperationDoOnEach.doOnEach(rx.Observable, rx.Observer)
rx.Observable.create(rx.Observable$OnSubscribe)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observable.create(rx.Observable$OnSubscribe)
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.OperationDoOnEach.doOnEach(rx.Observable, rx.Observer)
Também chamam:
rx.Observable.create(rx.Observable$OnSubscribeFunc)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 0
**************************
************************ Método Avaliado: activate ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.util.functions.Actions.onErrorFrom(rx.Observer)
rx.joins.Pattern1.first()
rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
rx.util.functions.Func1.call(rx.joins.Plan1$T1)
onError
onNext
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.set(rx.joins.ActivePlan1)
rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.joins.Pattern1.first()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func1.call(rx.joins.Plan1$T1)
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: rx.util.functions.Action1.call(rx.joins.ActivePlan0)
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.set(rx.joins.ActivePlan1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: activate ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.util.functions.Actions.onErrorFrom(rx.Observer)
rx.joins.Pattern2.first()
rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
rx.joins.Pattern2.second()
rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
rx.util.functions.Func2.call(rx.joins.Plan2$T1, rx.joins.Plan2$T2)
onError
onNext
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.set(rx.joins.ActivePlan2)
rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.joins.Pattern2.first()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Pattern2.second()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func2.call(rx.joins.Plan2$T1, rx.joins.Plan2$T2)
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
java.util.concurrent.atomic.AtomicReference.get()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.util.functions.Action1.call(rx.joins.ActivePlan0)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.set(rx.joins.ActivePlan2)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: activate ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.util.functions.Actions.onErrorFrom(rx.Observer)
rx.joins.Pattern3.first()
rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
rx.joins.Pattern3.second()
rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
rx.joins.Pattern3.third()
rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
rx.util.functions.Func3.call(rx.joins.Plan3$T1, rx.joins.Plan3$T2, rx.joins.Plan3$T3)
onError
onNext
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.set(rx.joins.ActivePlan3)
rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.joins.Pattern3.first()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Pattern3.second()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Pattern3.third()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func3.call(rx.joins.Plan3$T1, rx.joins.Plan3$T2, rx.joins.Plan3$T3)
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
java.util.concurrent.atomic.AtomicReference.get()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
java.util.concurrent.atomic.AtomicReference.get()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.util.functions.Action1.call(rx.joins.ActivePlan0)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.set(rx.joins.ActivePlan3)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicBoolean.get()
rx.util.functions.Func1.call(null)
java.util.concurrent.atomic.AtomicBoolean.getAndSet(Z)
onNext
onCompleted
unsubscribe
onError
unsubscribe
onError
java.util.concurrent.atomic.AtomicBoolean.get()
onNext
onCompleted
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.atomic.AtomicBoolean.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func1.call(null)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicBoolean.get()
Também chamam:
rx.Observer.onNext(null)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: java.util.concurrent.atomic.AtomicBoolean.getAndSet(Z)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.util.functions.Func1.call(null)
Também chamam:
rx.Observer.onNext(null)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 0
**************************
Chamada: onNext
Nenhuma sugestão fornecida.
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
Chamada: unsubscribe
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: unsubscribe
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicBoolean.get()
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicBoolean.get()
Também chamam:
rx.Observer.onNext(null)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
onNext
java.util.concurrent.atomic.AtomicBoolean.compareAndSet(Z, Z)
rx.operators.SafeObservableSubscription.unsubscribe()
onError
java.util.Collection.isEmpty()
java.util.concurrent.atomic.AtomicBoolean.get()
java.util.concurrent.atomic.AtomicBoolean.compareAndSet(Z, Z)
onCompleted
java.util.Queue.poll()
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.Queue.add(rx.Observable)
java.util.concurrent.atomic.AtomicBoolean.compareAndSet(Z, Z)
rx.Subscription.unsubscribe()
onError
java.util.concurrent.atomic.AtomicBoolean.set(Z)
java.util.concurrent.atomic.AtomicBoolean.compareAndSet(Z, Z)
onCompleted
rx.Subscription.unsubscribe()
rx.operators.SafeObservableSubscription.unsubscribe()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.atomic.AtomicBoolean.compareAndSet(Z, Z)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.SafeObservableSubscription.unsubscribe()
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.isEmpty()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicBoolean.get()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicBoolean.compareAndSet(Z, Z)
Nenhuma sugestão fornecida.
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Queue.poll()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Queue.add(rx.Observable)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicBoolean.compareAndSet(Z, Z)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Subscription.unsubscribe()
Nenhuma sugestão fornecida.
**************************
Chamada: onError
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicBoolean.get()
rx.Subscription.unsubscribe()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicBoolean.set(Z)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicBoolean.compareAndSet(Z, Z)
Nenhuma sugestão fornecida.
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Subscription.unsubscribe()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.SafeObservableSubscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicBoolean.get()
rx.Subscription.unsubscribe()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.SerialSubscription.set(rx.Subscription)
rx.util.functions.Func0.call()
onError
rx.subscriptions.Subscriptions.empty()
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.SerialSubscription.set(rx.Subscription)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.SerialSubscription.set(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func0.call()
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.CompositeSubscription.add(rx.Subscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func0.call()
rx.subscriptions.Subscriptions.empty()
Também chamam:
rx.Observable.subscribe(rx.Observer)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.SerialSubscription.set(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.Notification.getKind()
rx.Notification.getValue()
onNext
rx.Notification.getThrowable()
onError
onCompleted
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Notification.getKind()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Notification.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
** Sugestões fornecidas **
Usuários que chamam:
rx.Notification.getKind()
rx.Notification.getValue()
Também chamam:
rx.Notification.getThrowable()
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: rx.Notification.getThrowable()
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
onCompleted
onError
rx.util.functions.Func1.call(null)
null.alreadyEmitted(rx.operators.OperationDistinct$DistinctWithComparator$U)
java.util.List.add(rx.operators.OperationDistinct$DistinctWithComparator$U)
onNext
java.util.Comparator.compare(rx.operators.OperationDistinct$DistinctWithComparator$U, rx.operators.OperationDistinct$DistinctWithComparator$U)
---------------- Chamadas de método adicionadas ---------------
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func1.call(null)
Nenhuma sugestão fornecida.
**************************
Chamada: null.alreadyEmitted(rx.operators.OperationDistinct$DistinctWithComparator$U)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.util.functions.Func1.call(null)
Também chamam:
rx.Observer.onNext(null)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 0
**************************
Chamada: java.util.List.add(rx.operators.OperationDistinct$DistinctWithComparator$U)
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Comparator.compare(rx.operators.OperationDistinct$DistinctWithComparator$U, rx.operators.OperationDistinct$DistinctWithComparator$U)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
onCompleted
onError
rx.util.functions.Func1.call(null)
onNext
java.util.Comparator.compare(rx.operators.OperationDistinctUntilChanged$DistinctUntilChanged$U, rx.operators.OperationDistinctUntilChanged$DistinctUntilChanged$U)
onNext
---------------- Chamadas de método adicionadas ---------------
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func1.call(null)
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.util.functions.Func1.call(null)
Também chamam:
rx.Observer.onNext(null)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 0
**************************
Chamada: java.util.Comparator.compare(rx.operators.OperationDistinctUntilChanged$DistinctUntilChanged$U, rx.operators.OperationDistinctUntilChanged$DistinctUntilChanged$U)
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.util.functions.Func1.call(null)
onNext
onError
unsubscribe
onError
onCompleted
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.util.functions.Func1.call(null)
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.util.functions.Func1.call(null)
Também chamam:
rx.Observer.onNext(null)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 0
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: unsubscribe
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.util.functions.Func0.call()
rx.util.functions.Func1.call(null)
onError
rx.subscriptions.Subscriptions.empty()
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
rx.observables.ConnectableObservable.connect()
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.util.functions.Func1.call(null)
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func0.call()
rx.subscriptions.Subscriptions.empty()
Também chamam:
rx.Observable.subscribe(rx.Observer)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.observables.ConnectableObservable.connect()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.atomic.AtomicReference.get()
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
onNext
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Func1.call(java.lang.Throwable)
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.operators.SafeObservableSubscription, rx.operators.SafeObservableSubscription)
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.Arrays.asList([Ljava.lang.Throwable;)
onError
onCompleted
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
rx.Subscription.unsubscribe()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func1.call(java.lang.Throwable)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Func1.call(java.lang.Throwable)
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.operators.SafeObservableSubscription, rx.operators.SafeObservableSubscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicReference.get()
rx.Observable.subscribe(rx.Observer)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.operators.SafeObservableSubscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.operators.SafeObservableSubscription, rx.operators.SafeObservableSubscription)
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: java.util.Arrays.asList([Ljava.lang.Throwable;)
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
rx.operators.SafeObservableSubscription.unsubscribe()
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Func1.call(java.lang.Throwable)
rx.operators.SafeObservableSubscription.unsubscribe()
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 3
**************************
Usuários que chamam:
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
rx.operators.SafeObservableSubscription.unsubscribe()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 3
**************************
Chamada: onError
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.Arrays.asList([Ljava.lang.Throwable;)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
java.util.Arrays.asList([Ljava.lang.Throwable;)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.util.functions.Func1.call(java.lang.Throwable)
java.util.Arrays.asList([Ljava.lang.Throwable;)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Func1.call(java.lang.Throwable)
java.util.Arrays.asList([Ljava.lang.Throwable;)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Func1.call(java.lang.Throwable)
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.Arrays.asList([Ljava.lang.Throwable;)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.Arrays.asList([Ljava.lang.Throwable;)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.util.functions.Func1.call(java.lang.Throwable)
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.Arrays.asList([Ljava.lang.Throwable;)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Subscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicReference.get()
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
onNext
java.util.concurrent.atomic.AtomicReference.get()
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.operators.SafeObservableSubscription, rx.operators.SafeObservableSubscription)
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.concurrent.atomic.AtomicReference.get()
onCompleted
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
rx.Subscription.unsubscribe()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.operators.SafeObservableSubscription, rx.operators.SafeObservableSubscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicReference.get()
rx.Observable.subscribe(rx.Observer)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.operators.SafeObservableSubscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.operators.SafeObservableSubscription, rx.operators.SafeObservableSubscription)
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
rx.operators.SafeObservableSubscription.unsubscribe()
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 2
**************************
Usuários que chamam:
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
rx.operators.SafeObservableSubscription.unsubscribe()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 2
**************************
Chamada: onCompleted
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 2
**************************
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 2
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Subscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicReference.get()
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
onNext
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Func1.call(java.lang.Throwable)
null.onNext(rx.operators.OperationOnErrorReturn$OnErrorReturn$T)
null.onCompleted()
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.Arrays.asList([Ljava.lang.Throwable;)
onError
onCompleted
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
rx.Subscription.unsubscribe()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func1.call(java.lang.Throwable)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: null.onNext(rx.operators.OperationOnErrorReturn$OnErrorReturn$T)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Func1.call(java.lang.Throwable)
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: null.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.SafeObservableSubscription.unsubscribe()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Arrays.asList([Ljava.lang.Throwable;)
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
rx.operators.SafeObservableSubscription.unsubscribe()
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Func1.call(java.lang.Throwable)
rx.operators.SafeObservableSubscription.unsubscribe()
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 3
**************************
Usuários que chamam:
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
rx.operators.SafeObservableSubscription.unsubscribe()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 3
**************************
Chamada: onError
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.Arrays.asList([Ljava.lang.Throwable;)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
java.util.Arrays.asList([Ljava.lang.Throwable;)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.util.functions.Func1.call(java.lang.Throwable)
java.util.Arrays.asList([Ljava.lang.Throwable;)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Func1.call(java.lang.Throwable)
java.util.Arrays.asList([Ljava.lang.Throwable;)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Func1.call(java.lang.Throwable)
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.Arrays.asList([Ljava.lang.Throwable;)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.Arrays.asList([Ljava.lang.Throwable;)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.util.functions.Func1.call(java.lang.Throwable)
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.Arrays.asList([Ljava.lang.Throwable;)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Subscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00535475
Posição da Sugestão: 1
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
onNext
java.util.concurrent.atomic.AtomicReference.get()
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.operators.SafeObservableSubscription, rx.operators.SafeObservableSubscription)
rx.operators.SafeObservableSubscription.unsubscribe()
onError
java.util.concurrent.atomic.AtomicReference.get()
onCompleted
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
rx.Subscription.unsubscribe()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.operators.SafeObservableSubscription, rx.operators.SafeObservableSubscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicReference.get()
rx.Observable.subscribe(rx.Observer)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.operators.SafeObservableSubscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.operators.SafeObservableSubscription, rx.operators.SafeObservableSubscription)
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: onError
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
rx.operators.SafeObservableSubscription.unsubscribe()
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 2
**************************
Usuários que chamam:
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
rx.operators.SafeObservableSubscription.unsubscribe()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 2
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: onCompleted
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 2
**************************
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 2
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Subscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicReference.get()
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.observables.ConnectableObservable.connect()
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
rx.Subscription.unsubscribe()
rx.Subscription.unsubscribe()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.observables.ConnectableObservable.connect()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Subscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: rx.Subscription.unsubscribe()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.operators.OperationReplay$BaseState.lock()
rx.util.functions.Action0.call()
addReplayer
rx.operators.OperationReplay$BaseState.unlock()
rx.operators.OperationReplay$VirtualList.start()
rx.operators.OperationReplay$VirtualList.end()
rx.operators.OperationReplay$VirtualList.get(I)
rx.util.functions.Func1.call(null)
onNext
onError
rx.subscriptions.Subscriptions.empty()
onError
onCompleted
rx.subscriptions.Subscriptions.empty()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.util.functions.Action0.call()
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.OperationReplay$BaseState.lock()
Também chamam:
rx.operators.OperationReplay$BaseState.unlock()
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: addReplayer
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.OperationReplay$BaseState.lock()
rx.util.functions.Action0.call()
Também chamam:
rx.operators.OperationReplay$BaseState.unlock()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.operators.OperationReplay$BaseState.unlock()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperationReplay$VirtualList.start()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperationReplay$VirtualList.end()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperationReplay$VirtualList.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func1.call(null)
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
onError
rx.operators.OperationTakeUntil$Notification.halt()
onNext
---------------- Chamadas de método adicionadas ---------------
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperationTakeUntil$Notification.halt()
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.OperationTakeUntil$Notification.halt()
Também chamam:
rx.Observer.onNext(null)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.util.functions.Func0.call()
onError
rx.subscriptions.Subscriptions.empty()
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
---------------- Chamadas de método adicionadas ---------------
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func0.call()
rx.subscriptions.Subscriptions.empty()
Também chamam:
rx.Observable.subscribe(rx.Observer)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.util.functions.Func0.call()
onError
rx.subscriptions.Subscriptions.empty()
rx.Observable.subscribe(rx.Observer)
---------------- Chamadas de método adicionadas ---------------
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func0.call()
rx.subscriptions.Subscriptions.empty()
Também chamam:
rx.Observable.subscribe(rx.Observer)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.util.functions.Func0.call()
onError
rx.subscriptions.Subscriptions.empty()
rx.Observable.subscribe(rx.Observer)
---------------- Chamadas de método adicionadas ---------------
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func0.call()
rx.subscriptions.Subscriptions.empty()
Também chamam:
rx.Observable.subscribe(rx.Observer)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.Iterable.iterator()
java.util.Iterator.hasNext()
onError
rx.subscriptions.Subscriptions.empty()
onCompleted
rx.subscriptions.Subscriptions.empty()
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.SerialSubscription.set(rx.Subscription)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Iterator.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Iterable.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.SerialSubscription.set(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.Observable.doOnEach(rx.Observer) ************************
*Commit: commit 60af29e59b2a3353fb8727cd7028de15b435b1a5 1391060913 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.operators.OperationDoOnEach.doOnEach(rx.Observable, rx.Observer)
rx.Observable.create(rx.Observable$OnSubscribeFunc)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observable.create(rx.Observable$OnSubscribeFunc)
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.OperationDoOnEach.doOnEach(rx.Observable, rx.Observer)
Também chamam:
rx.Observable.create(rx.Observable$OnSubscribeFunc)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
************************ Método Avaliado: rx.operators.OperationAny$Any.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicBoolean.get()
rx.util.functions.Func1.call(null)
java.util.concurrent.atomic.AtomicBoolean.getAndSet(Z)
rx.Observer.onNext(null)
rx.Observer.onCompleted()
unsubscribe
rx.Observer.onError(java.lang.Throwable)
unsubscribe
rx.Observer.onError(java.lang.Throwable)
java.util.concurrent.atomic.AtomicBoolean.get()
rx.Observer.onNext(null)
rx.Observer.onCompleted()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.atomic.AtomicBoolean.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func1.call(null)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicBoolean.get()
Também chamam:
rx.Observer.onNext(null)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicBoolean.getAndSet(Z)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.util.functions.Func1.call(null)
Também chamam:
rx.Observer.onNext(null)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: unsubscribe
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: unsubscribe
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicBoolean.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func1.call(null)
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onNext(null)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicBoolean.get()
Também chamam:
rx.Observer.onNext(null)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onCompleted()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onNext(null)
rx.Observer.onCompleted()
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onNext(null)
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
************************ Método Avaliado: rx.operators.OperationConcat$Concat.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicBoolean.compareAndSet(Z, Z)
rx.operators.SafeObservableSubscription.unsubscribe()
rx.Observer.onError(java.lang.Throwable)
java.util.Collection.isEmpty()
java.util.concurrent.atomic.AtomicBoolean.get()
java.util.concurrent.atomic.AtomicBoolean.compareAndSet(Z, Z)
rx.Observer.onCompleted()
java.util.Queue.poll()
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.Queue.add(rx.Observable)
java.util.concurrent.atomic.AtomicBoolean.compareAndSet(Z, Z)
rx.Subscription.unsubscribe()
rx.Observer.onError(java.lang.Throwable)
java.util.concurrent.atomic.AtomicBoolean.set(Z)
java.util.concurrent.atomic.AtomicBoolean.compareAndSet(Z, Z)
rx.Observer.onCompleted()
rx.Subscription.unsubscribe()
rx.operators.SafeObservableSubscription.unsubscribe()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.atomic.AtomicBoolean.compareAndSet(Z, Z)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.SafeObservableSubscription.unsubscribe()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.isEmpty()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicBoolean.get()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicBoolean.compareAndSet(Z, Z)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Queue.poll()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Queue.add(rx.Observable)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicBoolean.compareAndSet(Z, Z)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Subscription.unsubscribe()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicBoolean.get()
rx.Subscription.unsubscribe()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicBoolean.set(Z)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onNext(null)
rx.Observable.subscribe(rx.Observer)
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicBoolean.compareAndSet(Z, Z)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Subscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onNext(null)
rx.Observable.subscribe(rx.Observer)
rx.Observer.onCompleted()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: rx.operators.SafeObservableSubscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicBoolean.get()
rx.Subscription.unsubscribe()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
************************ Método Avaliado: rx.operators.OperationDefaultIfEmpty$DefaultIfEmpty.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.Observer.onNext(null)
rx.Observer.onError(java.lang.Throwable)
unsubscribe
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onCompleted()
rx.Observer.onNext(null)
rx.Observer.onCompleted()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: unsubscribe
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onNext(null)
rx.Observer.onCompleted()
rx.Observer.onNext(null)
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
************************ Método Avaliado: rx.operators.OperationDelay$DelayViaObservable.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.SerialSubscription.set(rx.Subscription)
rx.util.functions.Func0.call()
rx.Observer.onError(java.lang.Throwable)
rx.subscriptions.Subscriptions.empty()
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.SerialSubscription.set(rx.Subscription)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.SerialSubscription.set(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func0.call()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.CompositeSubscription.add(rx.Subscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func0.call()
rx.Observer.onError(java.lang.Throwable)
rx.subscriptions.Subscriptions.empty()
Também chamam:
rx.Observable.subscribe(rx.Observer)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.SerialSubscription.set(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperationDelay$DelaySubscribeFunc.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Scheduler.schedule(rx.util.functions.Action0, J, java.util.concurrent.TimeUnit)
rx.subscriptions.SerialSubscription.setSubscription(rx.Subscription)
rx.subscriptions.SerialSubscription.isUnsubscribed()
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.SerialSubscription.setSubscription(rx.Subscription)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.subscriptions.SerialSubscription.setSubscription(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.SerialSubscription.isUnsubscribed()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.SerialSubscription.setSubscription(rx.Subscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.subscriptions.SerialSubscription.setSubscription(rx.Subscription)
rx.Observable.subscribe(rx.Observer)
Também chamam:
rx.subscriptions.SerialSubscription.setSubscription(rx.Subscription)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
************************ Método Avaliado: rx.operators.OperationDematerialize$DematerializeObservable.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.Notification.getKind()
rx.Notification.getValue()
rx.Observer.onNext(null)
rx.Notification.getThrowable()
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onCompleted()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Notification.getKind()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Notification.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
** Sugestões fornecidas **
Usuários que chamam:
rx.Notification.getKind()
rx.Notification.getValue()
Também chamam:
rx.Notification.getThrowable()
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: rx.Notification.getThrowable()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperationDistinct$DistinctWithComparator.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.Observer.onCompleted()
rx.Observer.onError(java.lang.Throwable)
rx.util.functions.Func1.call(null)
null.alreadyEmitted(rx.operators.OperationDistinct$DistinctWithComparator$U)
java.util.List.add(rx.operators.OperationDistinct$DistinctWithComparator$U)
rx.Observer.onNext(null)
java.util.Comparator.compare(rx.operators.OperationDistinct$DistinctWithComparator$U, rx.operators.OperationDistinct$DistinctWithComparator$U)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func1.call(null)
Nenhuma sugestão fornecida.
**************************
Chamada: null.alreadyEmitted(rx.operators.OperationDistinct$DistinctWithComparator$U)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.util.functions.Func1.call(null)
Também chamam:
rx.Observer.onNext(null)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: java.util.List.add(rx.operators.OperationDistinct$DistinctWithComparator$U)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Comparator.compare(rx.operators.OperationDistinct$DistinctWithComparator$U, rx.operators.OperationDistinct$DistinctWithComparator$U)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperationDistinct$Distinct.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.Observer.onCompleted()
rx.Observer.onError(java.lang.Throwable)
rx.util.functions.Func1.call(null)
java.util.Set.contains(java.lang.Object)
java.util.Set.add(rx.operators.OperationDistinct$Distinct$U)
rx.Observer.onNext(null)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func1.call(null)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Set.contains(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.util.functions.Func1.call(null)
Também chamam:
rx.Observer.onNext(null)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: java.util.Set.add(rx.operators.OperationDistinct$Distinct$U)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperationDistinctUntilChanged$DistinctUntilChanged.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.Observer.onCompleted()
rx.Observer.onError(java.lang.Throwable)
rx.util.functions.Func1.call(null)
rx.Observer.onNext(null)
java.util.Comparator.compare(rx.operators.OperationDistinctUntilChanged$DistinctUntilChanged$U, rx.operators.OperationDistinctUntilChanged$DistinctUntilChanged$U)
rx.Observer.onNext(null)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func1.call(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.util.functions.Func1.call(null)
Também chamam:
rx.Observer.onNext(null)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: java.util.Comparator.compare(rx.operators.OperationDistinctUntilChanged$DistinctUntilChanged$U, rx.operators.OperationDistinctUntilChanged$DistinctUntilChanged$U)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperationElementAt$ElementAt.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicInteger.getAndIncrement()
rx.Observer.onNext(null)
rx.Observer.onCompleted()
rx.operators.SafeObservableSubscription.unsubscribe()
rx.Observer.onError(java.lang.Throwable)
rx.operators.SafeObservableSubscription.unsubscribe()
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onError(java.lang.Throwable)
java.util.concurrent.atomic.AtomicInteger.get()
rx.Observer.onNext(null)
rx.Observer.onCompleted()
rx.Observer.onError(java.lang.Throwable)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicInteger.getAndIncrement()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.SafeObservableSubscription.unsubscribe()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.SafeObservableSubscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onNext(null)
rx.Observer.onCompleted()
rx.operators.SafeObservableSubscription.unsubscribe()
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onNext(null)
rx.Observer.onCompleted()
rx.operators.SafeObservableSubscription.unsubscribe()
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 2
**************************
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
rx.Observer.onNext(null)
rx.Observer.onCompleted()
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 2
**************************
Chamada: java.util.concurrent.atomic.AtomicInteger.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onNext(null)
rx.Observer.onCompleted()
rx.operators.SafeObservableSubscription.unsubscribe()
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 2
**************************
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
rx.Observer.onNext(null)
rx.Observer.onCompleted()
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 2
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
rx.Observer.onNext(null)
rx.Observer.onCompleted()
rx.Observer.onNext(null)
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperationFilter$Filter.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.util.functions.Func1.call(null)
rx.Observer.onNext(null)
rx.Observer.onError(java.lang.Throwable)
unsubscribe
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onCompleted()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.util.functions.Func1.call(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.util.functions.Func1.call(null)
Também chamam:
rx.Observer.onNext(null)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: unsubscribe
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func1.call(null)
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
************************ Método Avaliado: rx.operators.OperationInterval$Interval.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Scheduler.schedulePeriodically(rx.util.functions.Action0, J, J, java.util.concurrent.TimeUnit)
rx.Observer.onNext(null)
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
rx.Subscription.unsubscribe()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Subscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onNext(null)
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
************************ Método Avaliado: rx.operators.OperationMaterialize$MaterializeObservable.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
createOnCompleted
rx.Observer.onNext(null)
rx.Observer.onCompleted()
createOnError
rx.Observer.onNext(null)
rx.Observer.onCompleted()
createOnNext
rx.Observer.onNext(null)
---------------- Chamadas de método adicionadas ---------------
Chamada: createOnCompleted
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: createOnError
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onNext(null)
rx.Observer.onCompleted()
rx.Observer.onNext(null)
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: createOnNext
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperationMulticast$MulticastSubscribeFunc.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.util.functions.Func0.call()
rx.util.functions.Func1.call(null)
rx.Observer.onError(java.lang.Throwable)
rx.subscriptions.Subscriptions.empty()
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
rx.observables.ConnectableObservable.connect()
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.util.functions.Func1.call(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func0.call()
rx.Observer.onError(java.lang.Throwable)
rx.subscriptions.Subscriptions.empty()
Também chamam:
rx.Observable.subscribe(rx.Observer)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.observables.ConnectableObservable.connect()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperationOnErrorResumeNextViaFunction$OnErrorResumeNextViaFunction.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.atomic.AtomicReference.get()
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Func1.call(java.lang.Throwable)
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.operators.SafeObservableSubscription, rx.operators.SafeObservableSubscription)
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.Arrays.asList([Ljava.lang.Throwable;)
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onCompleted()
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
rx.Subscription.unsubscribe()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func1.call(java.lang.Throwable)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Func1.call(java.lang.Throwable)
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.operators.SafeObservableSubscription, rx.operators.SafeObservableSubscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onNext(null)
rx.Observable.subscribe(rx.Observer)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.operators.SafeObservableSubscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.operators.SafeObservableSubscription, rx.operators.SafeObservableSubscription)
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: java.util.Arrays.asList([Ljava.lang.Throwable;)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Func1.call(java.lang.Throwable)
rx.operators.SafeObservableSubscription.unsubscribe()
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.Arrays.asList([Ljava.lang.Throwable;)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onCompleted()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onNext(null)
rx.Observable.subscribe(rx.Observer)
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
rx.Observer.onCompleted()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Subscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
************************ Método Avaliado: rx.operators.OperationOnErrorResumeNextViaObservable$OnErrorResumeNextViaObservable.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.operators.SafeObservableSubscription, rx.operators.SafeObservableSubscription)
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.concurrent.atomic.AtomicReference.get()
rx.Observer.onCompleted()
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
rx.Subscription.unsubscribe()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.operators.SafeObservableSubscription, rx.operators.SafeObservableSubscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onNext(null)
rx.Observable.subscribe(rx.Observer)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.operators.SafeObservableSubscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.operators.SafeObservableSubscription, rx.operators.SafeObservableSubscription)
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
rx.operators.SafeObservableSubscription.unsubscribe()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onCompleted()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
rx.Observer.onCompleted()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Subscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
************************ Método Avaliado: rx.operators.OperationOnErrorReturn$OnErrorReturn.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Func1.call(java.lang.Throwable)
null.onNext(rx.operators.OperationOnErrorReturn$OnErrorReturn$T)
null.onCompleted()
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.Arrays.asList([Ljava.lang.Throwable;)
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onCompleted()
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
rx.Subscription.unsubscribe()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func1.call(java.lang.Throwable)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: null.onNext(rx.operators.OperationOnErrorReturn$OnErrorReturn$T)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Func1.call(java.lang.Throwable)
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: null.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.SafeObservableSubscription.unsubscribe()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Arrays.asList([Ljava.lang.Throwable;)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Func1.call(java.lang.Throwable)
rx.operators.SafeObservableSubscription.unsubscribe()
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.Arrays.asList([Ljava.lang.Throwable;)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onCompleted()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicReference.get()
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
rx.Observer.onCompleted()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Subscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
************************ Método Avaliado: rx.operators.OperationOnExceptionResumeNextViaObservable$OnExceptionResumeNextViaObservable.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.operators.SafeObservableSubscription, rx.operators.SafeObservableSubscription)
rx.operators.SafeObservableSubscription.unsubscribe()
rx.Observer.onError(java.lang.Throwable)
java.util.concurrent.atomic.AtomicReference.get()
rx.Observer.onCompleted()
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
rx.Subscription.unsubscribe()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.operators.SafeObservableSubscription, rx.operators.SafeObservableSubscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onNext(null)
rx.Observable.subscribe(rx.Observer)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.operators.SafeObservableSubscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.operators.SafeObservableSubscription, rx.operators.SafeObservableSubscription)
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
rx.operators.SafeObservableSubscription.unsubscribe()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onNext(null)
rx.Observable.subscribe(rx.Observer)
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onCompleted()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
rx.Observer.onCompleted()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Subscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
************************ Método Avaliado: rx.operators.OperationRefCount$RefCount.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.observables.ConnectableObservable.connect()
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
rx.Subscription.unsubscribe()
rx.Subscription.unsubscribe()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.observables.ConnectableObservable.connect()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Subscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: rx.Subscription.unsubscribe()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperationReplay$CustomReplaySubjectSubscribeFunc.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.operators.OperationReplay$BaseState.lock()
rx.util.functions.Action0.call()
rx.operators.OperationReplay$ReplayState.addReplayer(rx.Observer)
rx.operators.OperationReplay$BaseState.unlock()
rx.operators.OperationReplay$VirtualList.start()
rx.operators.OperationReplay$VirtualList.end()
rx.operators.OperationReplay$VirtualList.get(I)
rx.util.functions.Func1.call(null)
rx.Observer.onNext(null)
rx.Observer.onError(java.lang.Throwable)
rx.subscriptions.Subscriptions.empty()
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onCompleted()
rx.subscriptions.Subscriptions.empty()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.util.functions.Action0.call()
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.OperationReplay$BaseState.lock()
Também chamam:
rx.operators.OperationReplay$BaseState.unlock()
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: rx.operators.OperationReplay$ReplayState.addReplayer(rx.Observer)
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.OperationReplay$BaseState.lock()
rx.util.functions.Action0.call()
Também chamam:
rx.operators.OperationReplay$BaseState.unlock()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.operators.OperationReplay$BaseState.unlock()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperationReplay$VirtualList.start()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperationReplay$VirtualList.end()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperationReplay$VirtualList.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func1.call(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func1.call(null)
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperationRetry$Retry.attemptSubscription(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.atomic.AtomicInteger.incrementAndGet()
rx.Observable.subscribe(rx.Observer)
rx.Observer.onCompleted()
java.util.concurrent.atomic.AtomicInteger.get()
rx.subscriptions.CompositeSubscription.isUnsubscribed()
rx.operators.OperationRetry$Retry.attemptSubscription(rx.Observer)
rx.Scheduler.schedule(rx.subscriptions.MultipleAssignmentSubscription, rx.util.functions.Func2)
rx.subscriptions.MultipleAssignmentSubscription.set(rx.Subscription)
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onNext(null)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicInteger.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.CompositeSubscription.isUnsubscribed()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperationRetry$Retry.attemptSubscription(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Scheduler.schedule(rx.subscriptions.MultipleAssignmentSubscription, rx.util.functions.Func2)
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.OperationRetry$Retry.attemptSubscription(rx.Observer)
Também chamam:
rx.Scheduler.schedule(rx.subscriptions.MultipleAssignmentSubscription, rx.util.functions.Func2)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.subscriptions.MultipleAssignmentSubscription.set(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperationRetry$Retry.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.schedulers.Schedulers.currentThread()
rx.operators.OperationRetry$Retry.attemptSubscription(rx.Observer)
rx.Scheduler.schedule(rx.subscriptions.MultipleAssignmentSubscription, rx.util.functions.Func2)
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.operators.OperationRetry$Retry.attemptSubscription(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Scheduler.schedule(rx.subscriptions.MultipleAssignmentSubscription, rx.util.functions.Func2)
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.OperationRetry$Retry.attemptSubscription(rx.Observer)
Também chamam:
rx.Scheduler.schedule(rx.subscriptions.MultipleAssignmentSubscription, rx.util.functions.Func2)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperationSample$Sample.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.operators.OperationInterval.interval(J, java.util.concurrent.TimeUnit, rx.Scheduler)
rx.Observable.create(rx.Observable$OnSubscribeFunc)
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicBoolean.get()
java.util.concurrent.atomic.AtomicReference.get()
rx.Observer.onNext(null)
rx.Observable.subscribe(rx.Observer)
rx.Subscription.unsubscribe()
rx.Observer.onCompleted()
rx.Subscription.unsubscribe()
rx.Observer.onError(java.lang.Throwable)
java.util.concurrent.atomic.AtomicReference.set(rx.operators.OperationSample$Sample$T)
java.util.concurrent.atomic.AtomicBoolean.set(Z)
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
add
rx.Subscription.unsubscribe()
rx.Subscription.unsubscribe()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observable.create(rx.Observable$OnSubscribeFunc)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicBoolean.get()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicBoolean.get()
Também chamam:
rx.Observer.onNext(null)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Subscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onNext(null)
rx.Observable.subscribe(rx.Observer)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onCompleted()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicBoolean.get()
rx.Subscription.unsubscribe()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Subscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.Observer.onNext(null)
rx.Observer.onCompleted()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicBoolean.get()
rx.Subscription.unsubscribe()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.set(rx.operators.OperationSample$Sample$T)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onNext(null)
rx.Observable.subscribe(rx.Observer)
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicBoolean.set(Z)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Nenhuma sugestão fornecida.
**************************
Chamada: add
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onCompleted()
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Subscription.unsubscribe()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Subscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicBoolean.get()
rx.Subscription.unsubscribe()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
************************ Método Avaliado: rx.operators.OperationTakeUntil$OtherObservable.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.Observer.onError(java.lang.Throwable)
rx.operators.OperationTakeUntil$Notification.halt()
rx.Observer.onNext(null)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperationTakeUntil$Notification.halt()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.OperationTakeUntil$Notification.halt()
Também chamam:
rx.Observer.onNext(null)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
************************ Método Avaliado: rx.operators.OperationTakeUntil$SourceObservable.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.operators.OperationTakeUntil$Notification.halt()
rx.Observer.onNext(null)
rx.Observer.onError(java.lang.Throwable)
rx.operators.OperationTakeUntil$Notification.value(rx.operators.OperationTakeUntil$SourceObservable$T)
rx.Observer.onNext(null)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.operators.OperationTakeUntil$Notification.halt()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.OperationTakeUntil$Notification.halt()
Também chamam:
rx.Observer.onNext(null)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperationTakeUntil$Notification.value(rx.operators.OperationTakeUntil$SourceObservable$T)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperationTimeout$TimeoutSelector.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.util.functions.Func0.call()
rx.Observer.onError(java.lang.Throwable)
rx.subscriptions.Subscriptions.empty()
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func0.call()
rx.Observer.onError(java.lang.Throwable)
rx.subscriptions.Subscriptions.empty()
Também chamam:
rx.Observable.subscribe(rx.Observer)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperationTimeout$Timeout.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.atomic.AtomicLong.get()
rx.Scheduler.schedule(rx.util.functions.Action0, J, java.util.concurrent.TimeUnit)
java.util.concurrent.atomic.AtomicLong.get()
java.util.concurrent.atomic.AtomicBoolean.getAndSet(Z)
rx.Observer.onError(java.lang.Throwable)
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.SerialSubscription.setSubscription(rx.Subscription)
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
java.util.concurrent.atomic.AtomicBoolean.get()
java.util.concurrent.atomic.AtomicLong.incrementAndGet()
rx.util.functions.Func0.call()
rx.subscriptions.SerialSubscription.setSubscription(rx.Subscription)
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicBoolean.getAndSet(Z)
rx.subscriptions.SerialSubscription.unsubscribe()
rx.Observer.onError(java.lang.Throwable)
java.util.concurrent.atomic.AtomicBoolean.getAndSet(Z)
rx.subscriptions.SerialSubscription.unsubscribe()
rx.Observer.onCompleted()
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
rx.util.functions.Func0.call()
rx.subscriptions.SerialSubscription.setSubscription(rx.Subscription)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Scheduler.schedule(rx.util.functions.Action0, J, java.util.concurrent.TimeUnit)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicLong.get()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicBoolean.getAndSet(Z)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.SerialSubscription.setSubscription(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.SerialSubscription.setSubscription(rx.Subscription)
rx.Observable.subscribe(rx.Observer)
Também chamam:
rx.subscriptions.SerialSubscription.setSubscription(rx.Subscription)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicBoolean.get()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicLong.incrementAndGet()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicBoolean.get()
Também chamam:
rx.Observer.onNext(null)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.util.functions.Func0.call()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.SerialSubscription.setSubscription(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicBoolean.getAndSet(Z)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.SerialSubscription.unsubscribe()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicBoolean.getAndSet(Z)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.SerialSubscription.unsubscribe()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func0.call()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.SerialSubscription.setSubscription(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperationToMap$ToMap.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.util.functions.Func0.call()
rx.Observer.onError(java.lang.Throwable)
rx.subscriptions.Subscriptions.empty()
rx.Observable.subscribe(rx.Observer)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func0.call()
rx.Observer.onError(java.lang.Throwable)
rx.subscriptions.Subscriptions.empty()
Também chamam:
rx.Observable.subscribe(rx.Observer)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
************************ Método Avaliado: rx.operators.OperationToMultimap$ToMultimap.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.util.functions.Func0.call()
rx.Observer.onError(java.lang.Throwable)
rx.subscriptions.Subscriptions.empty()
rx.Observable.subscribe(rx.Observer)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func0.call()
rx.Observer.onError(java.lang.Throwable)
rx.subscriptions.Subscriptions.empty()
Também chamam:
rx.Observable.subscribe(rx.Observer)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
************************ Método Avaliado: rx.operators.OperationZip$ZipIterable.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.Iterable.iterator()
java.util.Iterator.hasNext()
rx.Observer.onError(java.lang.Throwable)
rx.subscriptions.Subscriptions.empty()
rx.Observer.onCompleted()
rx.subscriptions.Subscriptions.empty()
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.SerialSubscription.set(rx.Subscription)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Iterator.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Iterable.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.SerialSubscription.set(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.joins.Plan1.activate(java.util.Map, rx.Observer, rx.util.functions.Action1) ************************
*Commit: commit 99f32abd5fde12dca47b14221c4a60843a8d03af 1391150178 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.util.functions.Actions.onErrorFrom(rx.Observer)
rx.joins.Pattern1.first()
rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
rx.util.functions.Func1.call(rx.joins.Plan1$T1)
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onNext(rx.joins.Plan1$R)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.set(rx.joins.ActivePlan1)
rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.joins.Pattern1.first()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func1.call(rx.joins.Plan1$T1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(rx.joins.Plan1$R)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: rx.util.functions.Action1.call(rx.joins.ActivePlan0)
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.set(rx.joins.ActivePlan1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.joins.Plan2.activate(java.util.Map, rx.Observer, rx.util.functions.Action1) ************************
*Commit: commit 99f32abd5fde12dca47b14221c4a60843a8d03af 1391150178 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.util.functions.Actions.onErrorFrom(rx.Observer)
rx.joins.Pattern2.first()
rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
rx.joins.Pattern2.second()
rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
rx.util.functions.Func2.call(rx.joins.Plan2$T1, rx.joins.Plan2$T2)
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onNext(rx.joins.Plan2$R)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.set(rx.joins.ActivePlan2)
rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.joins.Pattern2.first()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Pattern2.second()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func2.call(rx.joins.Plan2$T1, rx.joins.Plan2$T2)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(rx.joins.Plan2$R)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
java.util.concurrent.atomic.AtomicReference.get()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.util.functions.Action1.call(rx.joins.ActivePlan0)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.set(rx.joins.ActivePlan2)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.joins.Plan3.activate(java.util.Map, rx.Observer, rx.util.functions.Action1) ************************
*Commit: commit 99f32abd5fde12dca47b14221c4a60843a8d03af 1391150178 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.util.functions.Actions.onErrorFrom(rx.Observer)
rx.joins.Pattern3.first()
rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
rx.joins.Pattern3.second()
rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
rx.joins.Pattern3.third()
rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
rx.util.functions.Func3.call(rx.joins.Plan3$T1, rx.joins.Plan3$T2, rx.joins.Plan3$T3)
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onNext(rx.joins.Plan3$R)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.set(rx.joins.ActivePlan3)
rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.joins.Pattern3.first()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Pattern3.second()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Pattern3.third()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func3.call(rx.joins.Plan3$T1, rx.joins.Plan3$T2, rx.joins.Plan3$T3)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(rx.joins.Plan3$R)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
java.util.concurrent.atomic.AtomicReference.get()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
java.util.concurrent.atomic.AtomicReference.get()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.util.functions.Action1.call(rx.joins.ActivePlan0)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.set(rx.joins.ActivePlan3)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: schedule ************************
*Commit: commit d91794b7123f58d5dfc85fa7edfd8c33ffd9655d 1391470558 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.subscriptions.MultipleAssignmentSubscription.isUnsubscribed()
rx.subscriptions.MultipleAssignmentSubscription.isUnsubscribed()
call
java.util.concurrent.ExecutorService.submit(java.lang.Runnable)
rx.subscriptions.Subscriptions.from(java.util.concurrent.Future)
rx.subscriptions.MultipleAssignmentSubscription.set(rx.Subscription)
java.util.concurrent.Executor.execute(java.lang.Runnable)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.subscriptions.MultipleAssignmentSubscription.isUnsubscribed()
** Sugestões fornecidas **
Usuários que chamam:
rx.subscriptions.MultipleAssignmentSubscription.isUnsubscribed()
Também chamam:
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: call
** Sugestões fornecidas **
Usuários que chamam:
rx.subscriptions.MultipleAssignmentSubscription.isUnsubscribed()
Também chamam:
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: java.util.concurrent.ExecutorService.submit(java.lang.Runnable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.from(java.util.concurrent.Future)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.MultipleAssignmentSubscription.set(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.Executor.execute(java.lang.Runnable)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: schedule ************************
*Commit: commit d91794b7123f58d5dfc85fa7edfd8c33ffd9655d 1391470558 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.schedulers.GenericScheduledExecutorService.getInstance()
java.util.concurrent.ScheduledExecutorService.schedule(java.lang.Runnable, J, java.util.concurrent.TimeUnit)
rx.subscriptions.CompositeSubscription.isUnsubscribed()
rx.Scheduler.schedule(rx.util.functions.Action1)
java.util.concurrent.atomic.AtomicReference.get()
rx.subscriptions.CompositeSubscription.remove(rx.Subscription)
rx.subscriptions.Subscriptions.from(java.util.concurrent.Future)
java.util.concurrent.atomic.AtomicReference.set(rx.Subscription)
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.ScheduledExecutorService.schedule(java.lang.Runnable, J, java.util.concurrent.TimeUnit)
** Sugestões fornecidas **
Usuários que chamam:
rx.schedulers.GenericScheduledExecutorService.getInstance()
Também chamam:
java.util.concurrent.ScheduledExecutorService.schedule(java.lang.Runnable, J, java.util.concurrent.TimeUnit)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.subscriptions.CompositeSubscription.isUnsubscribed()
** Sugestões fornecidas **
Usuários que chamam:
rx.schedulers.GenericScheduledExecutorService.getInstance()
java.util.concurrent.ScheduledExecutorService.schedule(java.lang.Runnable, J, java.util.concurrent.TimeUnit)
Também chamam:
rx.subscriptions.Subscriptions.from(java.util.concurrent.Future)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Scheduler.schedule(rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.CompositeSubscription.remove(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.from(java.util.concurrent.Future)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.set(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: call ************************
*Commit: commit d91794b7123f58d5dfc85fa7edfd8c33ffd9655d 1391470558 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
isUnsubscribed
rx.Scheduler.now()
rx.Scheduler.now()
java.lang.Thread.sleep(J)
java.lang.Thread.currentThread()
java.lang.Thread.interrupt()
isUnsubscribed
call
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Scheduler.now()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Scheduler.now()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Thread.sleep(J)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Thread.currentThread()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Thread.interrupt()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Thread.currentThread()
Também chamam:
java.lang.Thread.interrupt()
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: isUnsubscribed
Nenhuma sugestão fornecida.
**************************
Chamada: call
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: call ************************
*Commit: commit cf28bce52ea15dba3e6be587ba5b4d43b1029ea9 1391559955 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.Iterable.iterator()
java.util.Iterator.hasNext()
onCompleted
create
onError
onCompleted
onError
java.util.Iterator.next()
rx.util.functions.Func2.call(null, null)
onNext
java.util.Iterator.hasNext()
null.onCompleted()
null.onError(java.lang.Throwable)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Iterator.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Iterable.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
Chamada: create
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func2.call(null, null)
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: null.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: null.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperatorTimeoutWithSelector.OperatorTimeoutWithSelector(rx.util.functions.Func0, rx.util.functions.Func1, rx.Observable) ************************
*Commit: commit d947c408f26335426c47ee1b1ac96afe65256a01 1392125072 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.util.functions.Func0.call()
throwIfFatal
onError
rx.subscriptions.Subscriptions.empty()
rx.Observable.subscribe(rx.Observer)
onTimeout
onError
onTimeout
rx.subscriptions.Subscriptions.empty()
rx.util.functions.Func1.call(null)
throwIfFatal
onError
rx.subscriptions.Subscriptions.empty()
rx.Observable.subscribe(rx.Observer)
onTimeout
onError
onTimeout
---------------- Chamadas de método adicionadas ---------------
Chamada: throwIfFatal
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func0.call()
rx.subscriptions.Subscriptions.empty()
Também chamam:
rx.Observable.subscribe(rx.Observer)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: onTimeout
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: onTimeout
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func1.call(null)
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func0.call()
rx.subscriptions.Subscriptions.empty()
Também chamam:
rx.Observable.subscribe(rx.Observer)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: throwIfFatal
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.util.functions.Func1.call(null)
Também chamam:
rx.Observer.onNext(null)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 0
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func0.call()
rx.subscriptions.Subscriptions.empty()
Também chamam:
rx.Observable.subscribe(rx.Observer)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: onTimeout
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: onTimeout
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: activate ************************
*Commit: commit c20c01e866a7001826c942c631166606c052e9a7 1392670659 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
onErrorFrom
rx.joins.Pattern1.first()
rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
call
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onNext(rx.joins.Plan1$R)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
call
java.util.concurrent.atomic.AtomicReference.set(rx.joins.ActivePlan1)
rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.joins.Pattern1.first()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: call
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(rx.joins.Plan1$R)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
java.util.concurrent.atomic.AtomicReference.get()
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 2
**************************
Chamada: call
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 0
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.set(rx.joins.ActivePlan1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: activate ************************
*Commit: commit c20c01e866a7001826c942c631166606c052e9a7 1392670659 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
onErrorFrom
rx.joins.Pattern2.first()
rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
rx.joins.Pattern2.second()
rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
call
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onNext(rx.joins.Plan2$R)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
call
java.util.concurrent.atomic.AtomicReference.set(rx.joins.ActivePlan2)
rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.joins.Pattern2.first()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Pattern2.second()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: call
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(rx.joins.Plan2$R)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
java.util.concurrent.atomic.AtomicReference.get()
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 2
**************************
Chamada: rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 0
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
java.util.concurrent.atomic.AtomicReference.get()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: call
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.set(rx.joins.ActivePlan2)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: activate ************************
*Commit: commit c20c01e866a7001826c942c631166606c052e9a7 1392670659 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
onErrorFrom
rx.joins.Pattern3.first()
rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
rx.joins.Pattern3.second()
rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
rx.joins.Pattern3.third()
rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
call
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onNext(rx.joins.Plan3$R)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
call
java.util.concurrent.atomic.AtomicReference.set(rx.joins.ActivePlan3)
rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.joins.Pattern3.first()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Pattern3.second()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Pattern3.third()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: call
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(rx.joins.Plan3$R)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
java.util.concurrent.atomic.AtomicReference.get()
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 2
**************************
Chamada: rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 0
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
java.util.concurrent.atomic.AtomicReference.get()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
java.util.concurrent.atomic.AtomicReference.get()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: call
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.set(rx.joins.ActivePlan3)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: forEach ************************
*Commit: commit c20c01e866a7001826c942c631166606c052e9a7 1392670659 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
protectivelyWrapAndSubscribe
java.util.concurrent.CountDownLatch.countDown()
java.util.concurrent.atomic.AtomicReference.set(java.lang.Throwable)
java.util.concurrent.CountDownLatch.countDown()
call
java.util.concurrent.CountDownLatch.await()
java.lang.Thread.currentThread()
java.lang.Thread.interrupt()
java.util.concurrent.atomic.AtomicReference.get()
java.util.concurrent.atomic.AtomicReference.get()
java.util.concurrent.atomic.AtomicReference.get()
java.util.concurrent.atomic.AtomicReference.get()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.CountDownLatch.countDown()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.set(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.CountDownLatch.countDown()
Nenhuma sugestão fornecida.
**************************
Chamada: call
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.CountDownLatch.await()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Thread.currentThread()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Thread.interrupt()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Thread.currentThread()
Também chamam:
java.lang.Thread.interrupt()
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: minMaxBy ************************
*Commit: commit c20c01e866a7001826c942c631166606c052e9a7 1392670659 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.reduce(rx.Observable$(Ljava/lang/Object;Lrx/util/functions/Func2;)Lrx/Observable;$R, rx.util.functions.Func2)
java.util.List.isEmpty()
java.util.List.add(rx.operators.OperationMinMax$(Lrx/Observable;LFunc1;Ljava/util/Comparator;J)Lrx/Observable;$T)
java.util.List.get(I)
call
call
java.util.Comparator.compare(null, null)
java.util.List.add(rx.operators.OperationMinMax$(Lrx/Observable;LFunc1;Ljava/util/Comparator;J)Lrx/Observable;$T)
java.util.List.clear()
java.util.List.add(rx.operators.OperationMinMax$(Lrx/Observable;LFunc1;Ljava/util/Comparator;J)Lrx/Observable;$T)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.List.isEmpty()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.add(rx.operators.OperationMinMax$(Lrx/Observable;LFunc1;Ljava/util/Comparator;J)Lrx/Observable;$T)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: call
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.isEmpty()
java.util.List.get(I)
Também chamam:
java.util.List.clear()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: call
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Comparator.compare(null, null)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.add(rx.operators.OperationMinMax$(Lrx/Observable;LFunc1;Ljava/util/Comparator;J)Lrx/Observable;$T)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.clear()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.add(rx.operators.OperationMinMax$(Lrx/Observable;LFunc1;Ljava/util/Comparator;J)Lrx/Observable;$T)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: sequenceEqual ************************
*Commit: commit c20c01e866a7001826c942c631166606c052e9a7 1392670659 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.map(rx.util.functions.Func1)
rx.Observable.from(rx.Notification)
rx.Observable.concat(rx.Observable, rx.Observable)
rx.Observable.map(rx.util.functions.Func1)
rx.Observable.from(rx.Notification)
rx.Observable.concat(rx.Observable, rx.Observable)
rx.Observable.zip(rx.Observable, rx.Observable, rx.util.functions.Func2)
identity
all
rx.Notification.isOnCompleted()
rx.Notification.isOnCompleted()
rx.Notification.isOnCompleted()
rx.Notification.isOnCompleted()
rx.Notification.getValue()
rx.Notification.getValue()
call
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observable.from(rx.Notification)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.concat(rx.Observable, rx.Observable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.map(rx.util.functions.Func1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.from(rx.Notification)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.concat(rx.Observable, rx.Observable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.zip(rx.Observable, rx.Observable, rx.util.functions.Func2)
Nenhuma sugestão fornecida.
**************************
Chamada: identity
Nenhuma sugestão fornecida.
**************************
Chamada: all
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Notification.isOnCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Notification.isOnCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Notification.isOnCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Notification.isOnCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Notification.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Notification.getValue()
** Sugestões fornecidas **
Usuários que chamam:
rx.Notification.isOnCompleted()
rx.Notification.isOnCompleted()
rx.Notification.getValue()
Também chamam:
rx.Notification.getValue()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: call
** Sugestões fornecidas **
Usuários que chamam:
rx.Notification.isOnCompleted()
rx.Notification.isOnCompleted()
rx.Notification.getValue()
Também chamam:
rx.Notification.getValue()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
************************ Método Avaliado: using ************************
*Commit: commit c20c01e866a7001826c942c631166606c052e9a7 1392670659 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.subscriptions.Subscriptions.empty()
call
call
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
rx.Subscription.unsubscribe()
rx.Observable.error(java.lang.Throwable)
rx.Observable.subscribe(rx.Observer)
---------------- Chamadas de método adicionadas ---------------
Chamada: call
Nenhuma sugestão fornecida.
**************************
Chamada: call
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Subscription.unsubscribe()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.error(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
** Sugestões fornecidas **
Usuários que chamam:
rx.Subscription.unsubscribe()
rx.Observable.error(java.lang.Throwable)
Também chamam:
rx.Observable.subscribe(rx.Observer)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
************************ Método Avaliado: rx.observers.SerializedObserver.doIt() ************************
*Commit: commit 34a2561f9010bf81506da54ead6858e77ab5de40 1394728953 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.atomic.AtomicInteger.getAndIncrement()
java.util.concurrent.ConcurrentLinkedQueue.poll()
rx.Observer.onNext(null)
rx.Observer.onCompleted()
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicInteger.decrementAndGet()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.ConcurrentLinkedQueue.poll()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicInteger.decrementAndGet()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onNext(null)
rx.Observer.onCompleted()
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onNext(null)
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onNext(null)
rx.Observer.onCompleted()
rx.Observer.onNext(null)
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00468541
Posição da Sugestão: 0
**************************
************************ Método Avaliado: rx.observers.SerializedObserverViaStateMachine.terminateIfNecessary(rx.observers.SerializedObserverViaStateMachine$State) ************************
*Commit: commit 34a2561f9010bf81506da54ead6858e77ab5de40 1394728953 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.observers.SerializedObserverViaStateMachine$State.isTerminated()
java.util.concurrent.atomic.AtomicReference.get()
rx.observers.SerializedObserverViaStateMachine$State.startTermination()
java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.observers.SerializedObserverViaStateMachine$State, rx.observers.SerializedObserverViaStateMachine$State)
rx.observers.SerializedObserverViaStateMachine$State.shouldProcess()
rx.Observer.onNext(null)
rx.Observer.onCompleted()
rx.Observer.onError(java.lang.Throwable)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.observers.SerializedObserverViaStateMachine$State.startTermination()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.observers.SerializedObserverViaStateMachine$State, rx.observers.SerializedObserverViaStateMachine$State)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.observers.SerializedObserverViaStateMachine$State.shouldProcess()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.Observer.onNext(null)
rx.Observer.onCompleted()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
************************ Método Avaliado: rx.observers.SerializedObserverViaStateMachine.onNext(rx.observers.SerializedObserverViaStateMachine$T) ************************
*Commit: commit 34a2561f9010bf81506da54ead6858e77ab5de40 1394728953 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.atomic.AtomicReference.get()
rx.observers.SerializedObserverViaStateMachine$State.isTerminated()
rx.observers.SerializedObserverViaStateMachine$State.offerItem(java.lang.Object)
java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.observers.SerializedObserverViaStateMachine$State, rx.observers.SerializedObserverViaStateMachine$State)
rx.observers.SerializedObserverViaStateMachine$State.shouldProcess()
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
rx.observers.SerializedObserverViaStateMachine$State.finishProcessing(I)
java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.observers.SerializedObserverViaStateMachine$State, rx.observers.SerializedObserverViaStateMachine$State)
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
rx.observers.SerializedObserverViaStateMachine$State.finishProcessing(I)
java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.observers.SerializedObserverViaStateMachine$State, rx.observers.SerializedObserverViaStateMachine$State)
rx.observers.SerializedObserverViaStateMachine.terminateIfNecessary(rx.observers.SerializedObserverViaStateMachine$State)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.observers.SerializedObserverViaStateMachine$State.isTerminated()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.observers.SerializedObserverViaStateMachine$State.offerItem(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.observers.SerializedObserverViaStateMachine$State, rx.observers.SerializedObserverViaStateMachine$State)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.observers.SerializedObserverViaStateMachine$State.shouldProcess()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.observers.SerializedObserverViaStateMachine$State.finishProcessing(I)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.Observer.onCompleted()
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.Observer.onCompleted()
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.observers.SerializedObserverViaStateMachine$State, rx.observers.SerializedObserverViaStateMachine$State)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.observers.SerializedObserverViaStateMachine$State.finishProcessing(I)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.Observer.onCompleted()
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.Observer.onCompleted()
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.observers.SerializedObserverViaStateMachine$State, rx.observers.SerializedObserverViaStateMachine$State)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.observers.SerializedObserverViaStateMachine.terminateIfNecessary(rx.observers.SerializedObserverViaStateMachine$State)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.schedulers.SleepingAction.call() ************************
*Commit: commit cbc1c6b58f2148f47f5e4a1cc8d2d060909dc75c 1397791721 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
isUnsubscribed
now
now
java.lang.Thread.sleep(J)
java.lang.Thread.currentThread()
java.lang.Thread.interrupt()
isUnsubscribed
call
---------------- Chamadas de método adicionadas ---------------
Chamada: now
Nenhuma sugestão fornecida.
**************************
Chamada: now
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Thread.sleep(J)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Thread.currentThread()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Thread.interrupt()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Thread.currentThread()
Também chamam:
java.lang.Thread.interrupt()
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: isUnsubscribed
Nenhuma sugestão fornecida.
**************************
Chamada: call
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: call ************************
*Commit: commit 817fb3ad57ece39e3e9493f8bc1c0fc22757b297 1398333038 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.List.isEmpty()
onCompleted
java.util.List.size()
java.util.List.get(I)
unsafeSubscribe
call
onNext
onError
onCompleted
java.util.List.size()
java.util.List.size()
java.util.List.size()
add
java.util.List.add(rx.operators.OperatorCombineLatest$SourceSubscriber)
java.util.List.size()
isUnsubscribed
java.util.List.get(I)
java.util.List.get(I)
unsafeSubscribe
---------------- Chamadas de método adicionadas ---------------
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: unsafeSubscribe
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.isEmpty()
java.util.List.get(I)
Também chamam:
java.util.List.clear()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: call
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: add
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.add(rx.operators.OperatorCombineLatest$SourceSubscriber)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: isUnsubscribed
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.isEmpty()
java.util.List.get(I)
Também chamam:
java.util.List.clear()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: unsafeSubscribe
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.isEmpty()
java.util.List.get(I)
Também chamam:
java.util.List.clear()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
************************ Método Avaliado: call ************************
*Commit: commit 08085ac4ebb4a2e5bb65abc016677e47d092b9b6 1398345306 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Notification.getKind()
rx.Notification.getValue()
onNext
rx.Notification.getThrowable()
null.onError(java.lang.Throwable)
null.onCompleted()
onError
onCompleted
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Notification.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
** Sugestões fornecidas **
Usuários que chamam:
rx.Notification.getKind()
rx.Notification.getValue()
Também chamam:
rx.Notification.getThrowable()
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: rx.Notification.getThrowable()
Nenhuma sugestão fornecida.
**************************
Chamada: null.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: null.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperatorJoin$ResultSink$LeftSubscriber.onCompleted() ************************
*Commit: commit cc1776de75dc18e8280f6c88b78e1898df311520 1398444772 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.isEmpty()
onCompleted
unsubscribe
rx.subscriptions.CompositeSubscription.remove(rx.Subscription)
---------------- Chamadas de método adicionadas ---------------
Chamada: onCompleted
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.isEmpty()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.isEmpty()
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.isEmpty()
Também chamam:
rx.Observer.onCompleted()
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: unsubscribe
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.CompositeSubscription.remove(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperatorJoin$ResultSink$RightSubscriber.expire(I, rx.Subscription) ************************
*Commit: commit cc1776de75dc18e8280f6c88b78e1898df311520 1398444772 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.remove(java.lang.Object)
java.util.Map.isEmpty()
onCompleted
unsubscribe
rx.subscriptions.CompositeSubscription.remove(rx.Subscription)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map.isEmpty()
Nenhuma sugestão fornecida.
**************************
Chamada: onCompleted
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.isEmpty()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.isEmpty()
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.isEmpty()
Também chamam:
rx.Observer.onCompleted()
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: unsubscribe
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.CompositeSubscription.remove(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperatorJoin$ResultSink$LeftSubscriber.expire(I, rx.Subscription) ************************
*Commit: commit cc1776de75dc18e8280f6c88b78e1898df311520 1398444772 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.remove(java.lang.Object)
java.util.Map.isEmpty()
onCompleted
unsubscribe
rx.subscriptions.CompositeSubscription.remove(rx.Subscription)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map.isEmpty()
Nenhuma sugestão fornecida.
**************************
Chamada: onCompleted
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.isEmpty()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.isEmpty()
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.isEmpty()
Também chamam:
rx.Observer.onCompleted()
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: unsubscribe
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.CompositeSubscription.remove(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperatorJoin$ResultSink$RightSubscriber.onCompleted() ************************
*Commit: commit cc1776de75dc18e8280f6c88b78e1898df311520 1398444772 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.isEmpty()
onCompleted
unsubscribe
rx.subscriptions.CompositeSubscription.remove(rx.Subscription)
---------------- Chamadas de método adicionadas ---------------
Chamada: onCompleted
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.isEmpty()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.isEmpty()
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.isEmpty()
Também chamam:
rx.Observer.onCompleted()
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: unsubscribe
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.CompositeSubscription.remove(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperatorMulticast.connect() ************************
*Commit: commit 96f4b664bdd0a42222bcacd73f7ee618ca006508 1398462165 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
unsafeSubscribe
rx.Observer.onCompleted()
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onNext(null)
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
rx.Subscription.unsubscribe()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Subscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onError(java.lang.Throwable)
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
************************ Método Avaliado: scheduleActual ************************
*Commit: commit 8fa3a37420c3bcca5ed8355a09cd67b75ae6665e 1399363660 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.ExecutorService.submit(java.lang.Runnable)
java.util.concurrent.ScheduledExecutorService.schedule(java.lang.Runnable, J, java.util.concurrent.TimeUnit)
rx.subscriptions.Subscriptions.from(java.util.concurrent.Future)
rx.schedulers.NewThreadScheduler$NewThreadWorker$ScheduledAction.add(rx.Subscription)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.ScheduledExecutorService.schedule(java.lang.Runnable, J, java.util.concurrent.TimeUnit)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.from(java.util.concurrent.Future)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.ScheduledExecutorService.schedule(java.lang.Runnable, J, java.util.concurrent.TimeUnit)
Também chamam:
rx.subscriptions.Subscriptions.from(java.util.concurrent.Future)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.schedulers.NewThreadScheduler$NewThreadWorker$ScheduledAction.add(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: schedule ************************
*Commit: commit 68b0ae67113f611f7427b3eb9ed22f706dc8b63e 1401269604 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
schedule
rx.schedulers.ExecutorScheduler$ExecutorSchedulerWorker.isUnsubscribed()
rx.subscriptions.Subscriptions.empty()
rx.schedulers.GenericScheduledExecutorService.getInstance()
java.util.concurrent.ScheduledExecutorService.schedule(java.lang.Runnable, J, java.util.concurrent.TimeUnit)
rx.subscriptions.MultipleAssignmentSubscription.isUnsubscribed()
schedule
rx.subscriptions.MultipleAssignmentSubscription.set(rx.Subscription)
rx.subscriptions.Subscriptions.from(java.util.concurrent.Future)
rx.subscriptions.MultipleAssignmentSubscription.set(rx.Subscription)
rx.plugins.RxJavaPlugins.getInstance()
rx.plugins.RxJavaPlugins.getErrorHandler()
rx.plugins.RxJavaErrorHandler.handleError(java.lang.Throwable)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.schedulers.ExecutorScheduler$ExecutorSchedulerWorker.isUnsubscribed()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.schedulers.GenericScheduledExecutorService.getInstance()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.ScheduledExecutorService.schedule(java.lang.Runnable, J, java.util.concurrent.TimeUnit)
** Sugestões fornecidas **
Usuários que chamam:
rx.schedulers.GenericScheduledExecutorService.getInstance()
Também chamam:
java.util.concurrent.ScheduledExecutorService.schedule(java.lang.Runnable, J, java.util.concurrent.TimeUnit)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.subscriptions.MultipleAssignmentSubscription.isUnsubscribed()
** Sugestões fornecidas **
Usuários que chamam:
rx.schedulers.GenericScheduledExecutorService.getInstance()
java.util.concurrent.ScheduledExecutorService.schedule(java.lang.Runnable, J, java.util.concurrent.TimeUnit)
Também chamam:
rx.subscriptions.Subscriptions.from(java.util.concurrent.Future)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: schedule
** Sugestões fornecidas **
Usuários que chamam:
rx.subscriptions.MultipleAssignmentSubscription.isUnsubscribed()
Também chamam:
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: rx.subscriptions.MultipleAssignmentSubscription.set(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.from(java.util.concurrent.Future)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.MultipleAssignmentSubscription.set(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.plugins.RxJavaPlugins.getInstance()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.plugins.RxJavaPlugins.getErrorHandler()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.plugins.RxJavaErrorHandler.handleError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
