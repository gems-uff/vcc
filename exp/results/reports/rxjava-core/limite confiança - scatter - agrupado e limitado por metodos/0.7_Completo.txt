************************ Método Avaliado: call ************************
*Commit: commit 1d1066b1fa68afc60711ebc000dd33f7e7ca795f 1390283326 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.operators.OperationReplay$BaseState.lock()
rx.util.functions.Action0.call()
rx.operators.OperationReplay$ReplayState.addReplayer(rx.Observer)
add
rx.operators.OperationReplay$BaseState.unlock()
rx.operators.OperationReplay$VirtualList.start()
rx.operators.OperationReplay$VirtualList.end()
rx.operators.OperationReplay$VirtualList.get(I)
rx.util.functions.Func1.call(null)
rx.Observer.onNext(null)
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onCompleted()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.util.functions.Action0.call()
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.OperationReplay$BaseState.lock()
Também chamam:
rx.operators.OperationReplay$BaseState.unlock()
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: rx.operators.OperationReplay$ReplayState.addReplayer(rx.Observer)
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.OperationReplay$BaseState.lock()
rx.util.functions.Action0.call()
Também chamam:
rx.operators.OperationReplay$BaseState.unlock()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: add
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperationReplay$BaseState.unlock()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperationReplay$VirtualList.start()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperationReplay$VirtualList.end()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperationReplay$VirtualList.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func1.call(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func1.call(null)
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
************************ Método Avaliado: getOnSubscribeFunc ************************
*Commit: commit 1d1066b1fa68afc60711ebc000dd33f7e7ca795f 1390283326 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.util.functions.Action1.call(rx.subjects.SubjectSubscriptionManager$SubjectObserver)
java.util.concurrent.atomic.AtomicReference.get()
java.util.concurrent.CountDownLatch.await()
java.lang.Thread.currentThread()
java.lang.Thread.interrupt()
add
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
rx.subjects.SubjectSubscriptionManager$State.removeObserver(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.subjects.SubjectSubscriptionManager$State, rx.subjects.SubjectSubscriptionManager$State)
rx.subjects.SubjectSubscriptionManager$State.addObserver(rx.Subscription, rx.subjects.SubjectSubscriptionManager$SubjectObserver)
java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.subjects.SubjectSubscriptionManager$State, rx.subjects.SubjectSubscriptionManager$State)
rx.util.functions.Action1.call(rx.subjects.SubjectSubscriptionManager$SubjectObserver)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.CountDownLatch.await()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Thread.currentThread()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.CountDownLatch.await()
Também chamam:
java.util.concurrent.atomic.AtomicReference.get()
Confiança: 0.8000011952000765
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.lang.Thread.interrupt()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Thread.currentThread()
Também chamam:
java.lang.Thread.interrupt()
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: add
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subjects.SubjectSubscriptionManager$State.removeObserver(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.subjects.SubjectSubscriptionManager$State, rx.subjects.SubjectSubscriptionManager$State)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subjects.SubjectSubscriptionManager$State.addObserver(rx.Subscription, rx.subjects.SubjectSubscriptionManager$SubjectObserver)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.subjects.SubjectSubscriptionManager$State, rx.subjects.SubjectSubscriptionManager$State)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Action1.call(rx.subjects.SubjectSubscriptionManager$SubjectObserver)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: call ************************
*Commit: commit 02ccc4d727a9297f14219549208757c6e0efce2a 1390283349 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.values()
rx.subjects.PublishSubject.onCompleted()
onCompleted
onError
rx.util.functions.Func1.call(null)
java.util.Map.get(java.lang.Object)
isUnsubscribed
rx.subjects.PublishSubject.create()
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
add
null.completeInner()
rx.Observable.subscribe(rx.Observer)
java.util.Map.put(rx.operators.OperatorGroupBy$K, rx.subjects.PublishSubject)
java.util.concurrent.atomic.AtomicInteger.incrementAndGet()
onNext
rx.subjects.PublishSubject.onNext(rx.operators.OperatorGroupBy$T)
null.onError(java.lang.Throwable)
java.util.concurrent.atomic.AtomicInteger.decrementAndGet()
rx.subscriptions.CompositeSubscription.unsubscribe()
java.util.Map.values()
rx.subjects.PublishSubject.onCompleted()
onCompleted
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.subjects.PublishSubject.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func1.call(null)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.get(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: isUnsubscribed
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subjects.PublishSubject.create()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Nenhuma sugestão fornecida.
**************************
Chamada: add
** Sugestões fornecidas **
Usuários que chamam:
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 0.88888796666722
Suporte: 0.00535475
Posição da Sugestão: 0
**************************
Chamada: null.completeInner()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.put(rx.operators.OperatorGroupBy$K, rx.subjects.PublishSubject)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicInteger.incrementAndGet()
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subjects.PublishSubject.onNext(rx.operators.OperatorGroupBy$T)
Nenhuma sugestão fornecida.
**************************
Chamada: null.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicInteger.decrementAndGet()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.CompositeSubscription.unsubscribe()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.values()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subjects.PublishSubject.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperationReplay$CustomReplaySubjectSubscribeFunc.onSubscribe(rx.Observer) ************************
*Commit: commit 00f448819641f63fedb1eb5be64155e9bc574863 1390283349 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.operators.OperationReplay$BaseState.lock()
rx.util.functions.Action0.call()
rx.operators.OperationReplay$ReplayState.addReplayer(rx.Observer)
rx.operators.OperationReplay$BaseState.unlock()
rx.operators.OperationReplay$VirtualList.start()
rx.operators.OperationReplay$VirtualList.end()
rx.operators.OperationReplay$VirtualList.get(I)
rx.util.functions.Func1.call(null)
rx.Observer.onNext(null)
rx.Observer.onError(java.lang.Throwable)
rx.subscriptions.Subscriptions.empty()
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onCompleted()
rx.subscriptions.Subscriptions.empty()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.util.functions.Action0.call()
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.OperationReplay$BaseState.lock()
Também chamam:
rx.operators.OperationReplay$BaseState.unlock()
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: rx.operators.OperationReplay$ReplayState.addReplayer(rx.Observer)
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.OperationReplay$BaseState.lock()
rx.util.functions.Action0.call()
Também chamam:
rx.operators.OperationReplay$BaseState.unlock()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.operators.OperationReplay$BaseState.unlock()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperationReplay$VirtualList.start()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperationReplay$VirtualList.end()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperationReplay$VirtualList.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func1.call(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func1.call(null)
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperationZip$ManyObservables$ItemObserver.runCollector() ************************
*Commit: commit c2baf9389f66e8f333243fc1b9c4cb170da3a4d4 1390416215 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.locks.ReadWriteLock.writeLock()
java.util.concurrent.locks.Lock.tryLock()
java.util.List.size()
java.util.Collection.isEmpty()
rx.Observer.onCompleted()
java.util.Queue.peek()
java.util.List.add(rx.operators.OperationZip$ManyObservables$ItemObserver$T)
java.util.List.size()
java.util.List.size()
java.util.Queue.poll()
rx.Observer.onNext(null)
java.util.concurrent.locks.ReadWriteLock.writeLock()
java.util.concurrent.locks.Lock.unlock()
rx.Subscription.unsubscribe()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.locks.Lock.tryLock()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.isEmpty()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Queue.peek()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.add(rx.operators.OperationZip$ManyObservables$ItemObserver$T)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Queue.poll()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.locks.ReadWriteLock.writeLock()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.locks.Lock.unlock()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Subscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.locks.Lock.unlock()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 0.7142854093878658
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
************************ Método Avaliado: rx.observers.SafeObserver._onError(java.lang.Throwable) ************************
*Commit: commit 5478e30caefe14b12a12c4e1e9c27ebaa40e2004 1390458827 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.plugins.RxJavaPlugins.getInstance()
rx.plugins.RxJavaPlugins.getErrorHandler()
rx.plugins.RxJavaErrorHandler.handleError(java.lang.Throwable)
rx.Observer.onError(java.lang.Throwable)
rx.Subscription.unsubscribe()
rx.plugins.RxJavaPlugins.getInstance()
rx.plugins.RxJavaPlugins.getErrorHandler()
rx.plugins.RxJavaErrorHandler.handleError(java.lang.Throwable)
java.util.Arrays.asList([Ljava.lang.Throwable;)
rx.plugins.RxJavaPlugins.getInstance()
rx.plugins.RxJavaPlugins.getErrorHandler()
rx.plugins.RxJavaErrorHandler.handleError(java.lang.Throwable)
rx.Subscription.unsubscribe()
rx.plugins.RxJavaPlugins.getInstance()
rx.plugins.RxJavaPlugins.getErrorHandler()
rx.plugins.RxJavaErrorHandler.handleError(java.lang.Throwable)
java.util.Arrays.asList([Ljava.lang.Throwable;)
java.util.Arrays.asList([Ljava.lang.Throwable;)
rx.Subscription.unsubscribe()
rx.plugins.RxJavaPlugins.getInstance()
rx.plugins.RxJavaPlugins.getErrorHandler()
rx.plugins.RxJavaErrorHandler.handleError(java.lang.Throwable)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.plugins.RxJavaPlugins.getErrorHandler()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.plugins.RxJavaErrorHandler.handleError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Subscription.unsubscribe()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.plugins.RxJavaPlugins.getInstance()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.plugins.RxJavaPlugins.getErrorHandler()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.plugins.RxJavaErrorHandler.handleError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Arrays.asList([Ljava.lang.Throwable;)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.plugins.RxJavaPlugins.getInstance()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Arrays.asList([Ljava.lang.Throwable;)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 0.8000011952000765
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: rx.plugins.RxJavaPlugins.getErrorHandler()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.plugins.RxJavaErrorHandler.handleError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Subscription.unsubscribe()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.plugins.RxJavaPlugins.getInstance()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.plugins.RxJavaPlugins.getErrorHandler()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.plugins.RxJavaErrorHandler.handleError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Arrays.asList([Ljava.lang.Throwable;)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Arrays.asList([Ljava.lang.Throwable;)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Arrays.asList([Ljava.lang.Throwable;)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 0.8000011952000765
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: rx.Subscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Arrays.asList([Ljava.lang.Throwable;)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 0.8000011952000765
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: rx.plugins.RxJavaPlugins.getInstance()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.plugins.RxJavaPlugins.getErrorHandler()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.plugins.RxJavaErrorHandler.handleError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperatorGroupBy.call(rx.Observer) ************************
*Commit: commit 5478e30caefe14b12a12c4e1e9c27ebaa40e2004 1390458827 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.values()
rx.subjects.PublishSubject.onCompleted()
java.util.concurrent.atomic.AtomicInteger.get()
rx.Observer.onCompleted()
rx.Observer.onError(java.lang.Throwable)
rx.util.functions.Func1.call(null)
java.util.Map.get(java.lang.Object)
isUnsubscribed
rx.subjects.PublishSubject.create()
java.util.concurrent.atomic.AtomicInteger.incrementAndGet()
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
add
null.completeInner()
toObservable
subscribe
rx.Observer.onCompleted()
null.completeInner()
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onNext(null)
java.util.Map.put(rx.operators.OperatorGroupBy$K, rx.subjects.PublishSubject)
rx.Observer.onNext(null)
rx.subjects.PublishSubject.onNext(rx.operators.OperatorGroupBy$T)
null.onError(java.lang.Throwable)
java.util.concurrent.atomic.AtomicInteger.decrementAndGet()
unsubscribe
java.util.Map.values()
rx.subjects.PublishSubject.onCompleted()
rx.Observer.onCompleted()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.subjects.PublishSubject.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicInteger.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func1.call(null)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.get(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: isUnsubscribed
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subjects.PublishSubject.create()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicInteger.incrementAndGet()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Nenhuma sugestão fornecida.
**************************
Chamada: add
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onError(java.lang.Throwable)
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onCompleted()
rx.Observer.onError(java.lang.Throwable)
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onCompleted()
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 0.88888796666722
Suporte: 0.00535475
Posição da Sugestão: 0
**************************
Chamada: null.completeInner()
Nenhuma sugestão fornecida.
**************************
Chamada: toObservable
Nenhuma sugestão fornecida.
**************************
Chamada: subscribe
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: null.completeInner()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.put(rx.operators.OperatorGroupBy$K, rx.subjects.PublishSubject)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subjects.PublishSubject.onNext(rx.operators.OperatorGroupBy$T)
Nenhuma sugestão fornecida.
**************************
Chamada: null.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicInteger.decrementAndGet()
Nenhuma sugestão fornecida.
**************************
Chamada: unsubscribe
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.values()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subjects.PublishSubject.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperatorMerge.call(rx.Observer) ************************
*Commit: commit 5478e30caefe14b12a12c4e1e9c27ebaa40e2004 1390458827 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
null.complete()
rx.Observer.onError(java.lang.Throwable)
java.util.concurrent.atomic.AtomicInteger.incrementAndGet()
java.util.concurrent.atomic.AtomicInteger.incrementAndGet()
java.util.concurrent.ConcurrentLinkedQueue.add(rx.Observable)
java.util.concurrent.atomic.AtomicInteger.decrementAndGet()
add
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicInteger.decrementAndGet()
rx.Observer.onCompleted()
java.util.concurrent.atomic.AtomicInteger.decrementAndGet()
java.util.concurrent.atomic.AtomicInteger.incrementAndGet()
java.util.concurrent.atomic.AtomicInteger.decrementAndGet()
java.util.concurrent.ConcurrentLinkedQueue.poll()
add
rx.Observable.subscribe(rx.Observer)
null.complete()
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onNext(rx.operators.OperatorMerge$T)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicInteger.incrementAndGet()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicInteger.incrementAndGet()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.ConcurrentLinkedQueue.add(rx.Observable)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicInteger.decrementAndGet()
Nenhuma sugestão fornecida.
**************************
Chamada: add
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicInteger.decrementAndGet()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicInteger.decrementAndGet()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicInteger.incrementAndGet()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicInteger.decrementAndGet()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.ConcurrentLinkedQueue.poll()
Nenhuma sugestão fornecida.
**************************
Chamada: add
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: null.complete()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(rx.operators.OperatorMerge$T)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onCompleted()
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Observer.onNext(null)
Confiança: 0.9285708187757313
Suporte: 0.00870147
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observable.subscribe(rx.Observer)
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 0.8000011952000765
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observable.subscribe(rx.Observer)
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Observer.onCompleted()
Confiança: 0.8000011952000765
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
************************ Método Avaliado: accept ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Notification.isOnNext()
rx.Notification.getValue()
onNext
rx.Notification.isOnCompleted()
onCompleted
rx.Notification.isOnError()
rx.Notification.getThrowable()
onError
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Notification.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Notification.isOnCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Notification.isOnError()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Notification.getThrowable()
** Sugestões fornecidas **
Usuários que chamam:
rx.Notification.isOnError()
Também chamam:
rx.Notification.getThrowable()
Confiança: 0.857141637551463
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: doOnEach ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.operators.OperationDoOnEach.doOnEach(rx.Observable, rx.Observer)
rx.Observable.create(rx.Observable$OnSubscribe)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observable.create(rx.Observable$OnSubscribe)
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.OperationDoOnEach.doOnEach(rx.Observable, rx.Observer)
Também chamam:
rx.Observable.create(rx.Observable$OnSubscribeFunc)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 0
**************************
************************ Método Avaliado: activate ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.util.functions.Actions.onErrorFrom(rx.Observer)
rx.joins.Pattern1.first()
rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
rx.util.functions.Func1.call(rx.joins.Plan1$T1)
onError
onNext
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.set(rx.joins.ActivePlan1)
rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.joins.Pattern1.first()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func1.call(rx.joins.Plan1$T1)
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: rx.util.functions.Action1.call(rx.joins.ActivePlan0)
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.set(rx.joins.ActivePlan1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: activate ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.util.functions.Actions.onErrorFrom(rx.Observer)
rx.joins.Pattern2.first()
rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
rx.joins.Pattern2.second()
rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
rx.util.functions.Func2.call(rx.joins.Plan2$T1, rx.joins.Plan2$T2)
onError
onNext
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.set(rx.joins.ActivePlan2)
rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.joins.Pattern2.first()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Pattern2.second()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func2.call(rx.joins.Plan2$T1, rx.joins.Plan2$T2)
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
java.util.concurrent.atomic.AtomicReference.get()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.util.functions.Action1.call(rx.joins.ActivePlan0)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.set(rx.joins.ActivePlan2)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: activate ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.util.functions.Actions.onErrorFrom(rx.Observer)
rx.joins.Pattern3.first()
rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
rx.joins.Pattern3.second()
rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
rx.joins.Pattern3.third()
rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
rx.util.functions.Func3.call(rx.joins.Plan3$T1, rx.joins.Plan3$T2, rx.joins.Plan3$T3)
onError
onNext
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.set(rx.joins.ActivePlan3)
rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.joins.Pattern3.first()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Pattern3.second()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Pattern3.third()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func3.call(rx.joins.Plan3$T1, rx.joins.Plan3$T2, rx.joins.Plan3$T3)
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
java.util.concurrent.atomic.AtomicReference.get()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
java.util.concurrent.atomic.AtomicReference.get()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.util.functions.Action1.call(rx.joins.ActivePlan0)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.set(rx.joins.ActivePlan3)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicBoolean.get()
rx.util.functions.Func1.call(null)
java.util.concurrent.atomic.AtomicBoolean.getAndSet(Z)
onNext
onCompleted
unsubscribe
onError
unsubscribe
onError
java.util.concurrent.atomic.AtomicBoolean.get()
onNext
onCompleted
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.atomic.AtomicBoolean.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func1.call(null)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicBoolean.get()
Também chamam:
rx.Observer.onNext(null)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: java.util.concurrent.atomic.AtomicBoolean.getAndSet(Z)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.util.functions.Func1.call(null)
Também chamam:
rx.Observer.onNext(null)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 0
**************************
Chamada: onNext
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicBoolean.getAndSet(Z)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 0.7499995331247957
Suporte: 0.00401606
Posição da Sugestão: 0
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
Chamada: unsubscribe
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: unsubscribe
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicBoolean.get()
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicBoolean.get()
Também chamam:
rx.Observer.onNext(null)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.CompositeSubscription.add(rx.Subscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
rx.Observable.subscribe(rx.Observer)
Também chamam:
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Confiança: 0.8000011952000765
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
onNext
java.util.concurrent.atomic.AtomicBoolean.compareAndSet(Z, Z)
rx.operators.SafeObservableSubscription.unsubscribe()
onError
java.util.Collection.isEmpty()
java.util.concurrent.atomic.AtomicBoolean.get()
java.util.concurrent.atomic.AtomicBoolean.compareAndSet(Z, Z)
onCompleted
java.util.Queue.poll()
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.Queue.add(rx.Observable)
java.util.concurrent.atomic.AtomicBoolean.compareAndSet(Z, Z)
rx.Subscription.unsubscribe()
onError
java.util.concurrent.atomic.AtomicBoolean.set(Z)
java.util.concurrent.atomic.AtomicBoolean.compareAndSet(Z, Z)
onCompleted
rx.Subscription.unsubscribe()
rx.operators.SafeObservableSubscription.unsubscribe()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.atomic.AtomicBoolean.compareAndSet(Z, Z)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.SafeObservableSubscription.unsubscribe()
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.isEmpty()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicBoolean.get()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicBoolean.compareAndSet(Z, Z)
Nenhuma sugestão fornecida.
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Queue.poll()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Queue.add(rx.Observable)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicBoolean.compareAndSet(Z, Z)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Subscription.unsubscribe()
Nenhuma sugestão fornecida.
**************************
Chamada: onError
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicBoolean.get()
rx.Subscription.unsubscribe()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicBoolean.set(Z)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicBoolean.compareAndSet(Z, Z)
Nenhuma sugestão fornecida.
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Subscription.unsubscribe()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.SafeObservableSubscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicBoolean.get()
rx.Subscription.unsubscribe()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.SerialSubscription.set(rx.Subscription)
rx.util.functions.Func0.call()
onError
rx.subscriptions.Subscriptions.empty()
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.SerialSubscription.set(rx.Subscription)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.SerialSubscription.set(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func0.call()
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.CompositeSubscription.add(rx.Subscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func0.call()
rx.subscriptions.Subscriptions.empty()
Também chamam:
rx.Observable.subscribe(rx.Observer)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.SerialSubscription.set(rx.Subscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
rx.Observable.subscribe(rx.Observer)
Também chamam:
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Confiança: 0.8000011952000765
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.Notification.getKind()
rx.Notification.getValue()
onNext
rx.Notification.getThrowable()
onError
onCompleted
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Notification.getKind()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Notification.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
** Sugestões fornecidas **
Usuários que chamam:
rx.Notification.getKind()
rx.Notification.getValue()
Também chamam:
rx.Notification.getThrowable()
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: rx.Notification.getThrowable()
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
onCompleted
onError
rx.util.functions.Func1.call(null)
null.alreadyEmitted(rx.operators.OperationDistinct$DistinctWithComparator$U)
java.util.List.add(rx.operators.OperationDistinct$DistinctWithComparator$U)
onNext
java.util.Comparator.compare(rx.operators.OperationDistinct$DistinctWithComparator$U, rx.operators.OperationDistinct$DistinctWithComparator$U)
---------------- Chamadas de método adicionadas ---------------
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func1.call(null)
Nenhuma sugestão fornecida.
**************************
Chamada: null.alreadyEmitted(rx.operators.OperationDistinct$DistinctWithComparator$U)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.util.functions.Func1.call(null)
Também chamam:
rx.Observer.onNext(null)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 0
**************************
Chamada: java.util.List.add(rx.operators.OperationDistinct$DistinctWithComparator$U)
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Comparator.compare(rx.operators.OperationDistinct$DistinctWithComparator$U, rx.operators.OperationDistinct$DistinctWithComparator$U)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
onCompleted
onError
rx.util.functions.Func1.call(null)
onNext
java.util.Comparator.compare(rx.operators.OperationDistinctUntilChanged$DistinctUntilChanged$U, rx.operators.OperationDistinctUntilChanged$DistinctUntilChanged$U)
onNext
---------------- Chamadas de método adicionadas ---------------
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func1.call(null)
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.util.functions.Func1.call(null)
Também chamam:
rx.Observer.onNext(null)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 0
**************************
Chamada: java.util.Comparator.compare(rx.operators.OperationDistinctUntilChanged$DistinctUntilChanged$U, rx.operators.OperationDistinctUntilChanged$DistinctUntilChanged$U)
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicInteger.getAndIncrement()
onNext
onCompleted
rx.operators.SafeObservableSubscription.unsubscribe()
onError
rx.operators.SafeObservableSubscription.unsubscribe()
onError
onError
java.util.concurrent.atomic.AtomicInteger.get()
onNext
onCompleted
onError
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicInteger.getAndIncrement()
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicInteger.getAndIncrement()
Também chamam:
rx.Observer.onNext(null)
Confiança: 0.8000011952000765
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicInteger.getAndIncrement()
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 0.8000011952000765
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.SafeObservableSubscription.unsubscribe()
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.SafeObservableSubscription.unsubscribe()
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicInteger.get()
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
Nenhuma sugestão fornecida.
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.util.functions.Func1.call(null)
onNext
onError
unsubscribe
onError
onCompleted
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.util.functions.Func1.call(null)
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.util.functions.Func1.call(null)
Também chamam:
rx.Observer.onNext(null)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 0
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: unsubscribe
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Scheduler.schedulePeriodically(rx.util.functions.Action0, J, J, java.util.concurrent.TimeUnit)
onNext
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
rx.Subscription.unsubscribe()
---------------- Chamadas de método adicionadas ---------------
Chamada: onNext
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Subscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 0.88888796666722
Suporte: 0.00535475
Posição da Sugestão: 1
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.util.functions.Func0.call()
rx.util.functions.Func1.call(null)
onError
rx.subscriptions.Subscriptions.empty()
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
rx.observables.ConnectableObservable.connect()
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.util.functions.Func1.call(null)
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func0.call()
rx.subscriptions.Subscriptions.empty()
Também chamam:
rx.Observable.subscribe(rx.Observer)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.observables.ConnectableObservable.connect()
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func1.call(null)
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Também chamam:
rx.Observable.subscribe(rx.Observer)
Confiança: 0.8333341633342132
Suporte: 0.00334672
Posição da Sugestão: 0
**************************
Chamada: rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.atomic.AtomicReference.get()
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
onNext
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Func1.call(java.lang.Throwable)
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.operators.SafeObservableSubscription, rx.operators.SafeObservableSubscription)
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.Arrays.asList([Ljava.lang.Throwable;)
onError
onCompleted
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
rx.Subscription.unsubscribe()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.Observable.subscribe(rx.Observer)
Também chamam:
java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.operators.SafeObservableSubscription, rx.operators.SafeObservableSubscription)
Confiança: 0.857141637551463
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: onNext
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func1.call(java.lang.Throwable)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Func1.call(java.lang.Throwable)
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.operators.SafeObservableSubscription, rx.operators.SafeObservableSubscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicReference.get()
rx.Observable.subscribe(rx.Observer)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.operators.SafeObservableSubscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.operators.SafeObservableSubscription, rx.operators.SafeObservableSubscription)
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: java.util.Arrays.asList([Ljava.lang.Throwable;)
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
rx.operators.SafeObservableSubscription.unsubscribe()
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Func1.call(java.lang.Throwable)
rx.operators.SafeObservableSubscription.unsubscribe()
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 3
**************************
Usuários que chamam:
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
rx.operators.SafeObservableSubscription.unsubscribe()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 3
**************************
Chamada: onError
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.Arrays.asList([Ljava.lang.Throwable;)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
java.util.Arrays.asList([Ljava.lang.Throwable;)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.util.functions.Func1.call(java.lang.Throwable)
java.util.Arrays.asList([Ljava.lang.Throwable;)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Func1.call(java.lang.Throwable)
java.util.Arrays.asList([Ljava.lang.Throwable;)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Func1.call(java.lang.Throwable)
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.Arrays.asList([Ljava.lang.Throwable;)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.Arrays.asList([Ljava.lang.Throwable;)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.util.functions.Func1.call(java.lang.Throwable)
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.Arrays.asList([Ljava.lang.Throwable;)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Arrays.asList([Ljava.lang.Throwable;)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 0.8000011952000765
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Subscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicReference.get()
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
onNext
java.util.concurrent.atomic.AtomicReference.get()
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.operators.SafeObservableSubscription, rx.operators.SafeObservableSubscription)
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.concurrent.atomic.AtomicReference.get()
onCompleted
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
rx.Subscription.unsubscribe()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.operators.SafeObservableSubscription, rx.operators.SafeObservableSubscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicReference.get()
rx.Observable.subscribe(rx.Observer)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.operators.SafeObservableSubscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.operators.SafeObservableSubscription, rx.operators.SafeObservableSubscription)
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
rx.operators.SafeObservableSubscription.unsubscribe()
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 2
**************************
Usuários que chamam:
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
rx.operators.SafeObservableSubscription.unsubscribe()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 2
**************************
Chamada: onCompleted
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 2
**************************
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 2
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Subscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicReference.get()
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
onNext
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Func1.call(java.lang.Throwable)
null.onNext(rx.operators.OperationOnErrorReturn$OnErrorReturn$T)
null.onCompleted()
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.Arrays.asList([Ljava.lang.Throwable;)
onError
onCompleted
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
rx.Subscription.unsubscribe()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func1.call(java.lang.Throwable)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: null.onNext(rx.operators.OperationOnErrorReturn$OnErrorReturn$T)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Func1.call(java.lang.Throwable)
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: null.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.SafeObservableSubscription.unsubscribe()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Arrays.asList([Ljava.lang.Throwable;)
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
rx.operators.SafeObservableSubscription.unsubscribe()
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Func1.call(java.lang.Throwable)
rx.operators.SafeObservableSubscription.unsubscribe()
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 3
**************************
Usuários que chamam:
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
rx.operators.SafeObservableSubscription.unsubscribe()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 3
**************************
Chamada: onError
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.Arrays.asList([Ljava.lang.Throwable;)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
java.util.Arrays.asList([Ljava.lang.Throwable;)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.util.functions.Func1.call(java.lang.Throwable)
java.util.Arrays.asList([Ljava.lang.Throwable;)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Func1.call(java.lang.Throwable)
java.util.Arrays.asList([Ljava.lang.Throwable;)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Func1.call(java.lang.Throwable)
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.Arrays.asList([Ljava.lang.Throwable;)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.Arrays.asList([Ljava.lang.Throwable;)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.util.functions.Func1.call(java.lang.Throwable)
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.Arrays.asList([Ljava.lang.Throwable;)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Arrays.asList([Ljava.lang.Throwable;)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 0.8000011952000765
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Subscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00535475
Posição da Sugestão: 1
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
onNext
java.util.concurrent.atomic.AtomicReference.get()
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.operators.SafeObservableSubscription, rx.operators.SafeObservableSubscription)
rx.operators.SafeObservableSubscription.unsubscribe()
onError
java.util.concurrent.atomic.AtomicReference.get()
onCompleted
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
rx.Subscription.unsubscribe()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.operators.SafeObservableSubscription, rx.operators.SafeObservableSubscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicReference.get()
rx.Observable.subscribe(rx.Observer)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.operators.SafeObservableSubscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.operators.SafeObservableSubscription, rx.operators.SafeObservableSubscription)
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: onError
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
rx.operators.SafeObservableSubscription.unsubscribe()
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 2
**************************
Usuários que chamam:
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
rx.operators.SafeObservableSubscription.unsubscribe()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 2
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: onCompleted
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 2
**************************
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 2
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Subscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicReference.get()
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.observables.ConnectableObservable.connect()
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
rx.Subscription.unsubscribe()
rx.Subscription.unsubscribe()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.observables.ConnectableObservable.connect()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Subscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: rx.Subscription.unsubscribe()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.operators.OperationReplay$BaseState.lock()
rx.util.functions.Action0.call()
addReplayer
rx.operators.OperationReplay$BaseState.unlock()
rx.operators.OperationReplay$VirtualList.start()
rx.operators.OperationReplay$VirtualList.end()
rx.operators.OperationReplay$VirtualList.get(I)
rx.util.functions.Func1.call(null)
onNext
onError
rx.subscriptions.Subscriptions.empty()
onError
onCompleted
rx.subscriptions.Subscriptions.empty()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.util.functions.Action0.call()
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.OperationReplay$BaseState.lock()
Também chamam:
rx.operators.OperationReplay$BaseState.unlock()
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: addReplayer
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.OperationReplay$BaseState.lock()
rx.util.functions.Action0.call()
Também chamam:
rx.operators.OperationReplay$BaseState.unlock()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.operators.OperationReplay$BaseState.unlock()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperationReplay$VirtualList.start()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperationReplay$VirtualList.end()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperationReplay$VirtualList.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func1.call(null)
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
onError
rx.operators.OperationTakeUntil$Notification.halt()
onNext
---------------- Chamadas de método adicionadas ---------------
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperationTakeUntil$Notification.halt()
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.OperationTakeUntil$Notification.halt()
Também chamam:
rx.Observer.onNext(null)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.util.functions.Func0.call()
onError
rx.subscriptions.Subscriptions.empty()
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
---------------- Chamadas de método adicionadas ---------------
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func0.call()
rx.subscriptions.Subscriptions.empty()
Também chamam:
rx.Observable.subscribe(rx.Observer)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.CompositeSubscription.add(rx.Subscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
rx.Observable.subscribe(rx.Observer)
Também chamam:
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Confiança: 0.8000011952000765
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.util.functions.Func0.call()
onError
rx.subscriptions.Subscriptions.empty()
rx.Observable.subscribe(rx.Observer)
---------------- Chamadas de método adicionadas ---------------
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func0.call()
rx.subscriptions.Subscriptions.empty()
Também chamam:
rx.Observable.subscribe(rx.Observer)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.util.functions.Func0.call()
onError
rx.subscriptions.Subscriptions.empty()
rx.Observable.subscribe(rx.Observer)
---------------- Chamadas de método adicionadas ---------------
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func0.call()
rx.subscriptions.Subscriptions.empty()
Também chamam:
rx.Observable.subscribe(rx.Observer)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
toObservable
onNext
onError
rx.subscriptions.Subscriptions.empty()
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
rx.subscriptions.CompositeSubscription.isUnsubscribed()
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
---------------- Chamadas de método adicionadas ---------------
Chamada: onNext
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.CompositeSubscription.isUnsubscribed()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.CompositeSubscription.add(rx.Subscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
rx.Observable.subscribe(rx.Observer)
Também chamam:
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Confiança: 0.8000011952000765
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
************************ Método Avaliado: onSubscribe ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.Iterable.iterator()
java.util.Iterator.hasNext()
onError
rx.subscriptions.Subscriptions.empty()
onCompleted
rx.subscriptions.Subscriptions.empty()
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.SerialSubscription.set(rx.Subscription)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Iterator.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Iterable.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.SerialSubscription.set(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: call ************************
*Commit: commit 47a0e1b719d7fe28a3e0dec276b914e52d1270bb 1391037689 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.values()
rx.subjects.PublishSubject.onCompleted()
java.util.concurrent.atomic.AtomicInteger.get()
onCompleted
onError
rx.util.functions.Func1.call(null)
java.util.Map.get(java.lang.Object)
isUnsubscribed
rx.subjects.PublishSubject.create()
java.util.concurrent.atomic.AtomicInteger.incrementAndGet()
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
add
null.completeInner()
toObservable
subscribe
onCompleted
null.completeInner()
onError
onNext
java.util.Map.put(rx.operators.OperatorGroupBy$K, rx.subjects.PublishSubject)
onNext
rx.subjects.PublishSubject.onNext(rx.operators.OperatorGroupBy$T)
null.onError(java.lang.Throwable)
java.util.concurrent.atomic.AtomicInteger.decrementAndGet()
unsubscribe
java.util.Map.values()
rx.subjects.PublishSubject.onCompleted()
onCompleted
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.subjects.PublishSubject.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicInteger.get()
Nenhuma sugestão fornecida.
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func1.call(null)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.get(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: isUnsubscribed
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subjects.PublishSubject.create()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicInteger.incrementAndGet()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Nenhuma sugestão fornecida.
**************************
Chamada: add
** Sugestões fornecidas **
Usuários que chamam:
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 0.88888796666722
Suporte: 0.00535475
Posição da Sugestão: 0
**************************
Chamada: null.completeInner()
Nenhuma sugestão fornecida.
**************************
Chamada: toObservable
Nenhuma sugestão fornecida.
**************************
Chamada: subscribe
Nenhuma sugestão fornecida.
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
Chamada: null.completeInner()
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.put(rx.operators.OperatorGroupBy$K, rx.subjects.PublishSubject)
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subjects.PublishSubject.onNext(rx.operators.OperatorGroupBy$T)
Nenhuma sugestão fornecida.
**************************
Chamada: null.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicInteger.decrementAndGet()
Nenhuma sugestão fornecida.
**************************
Chamada: unsubscribe
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.values()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subjects.PublishSubject.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.Observable.doOnEach(rx.Observer) ************************
*Commit: commit 60af29e59b2a3353fb8727cd7028de15b435b1a5 1391060913 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.operators.OperationDoOnEach.doOnEach(rx.Observable, rx.Observer)
rx.Observable.create(rx.Observable$OnSubscribeFunc)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observable.create(rx.Observable$OnSubscribeFunc)
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.OperationDoOnEach.doOnEach(rx.Observable, rx.Observer)
Também chamam:
rx.Observable.create(rx.Observable$OnSubscribeFunc)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
************************ Método Avaliado: rx.Notification.accept(rx.Observer) ************************
*Commit: commit 584ef6e6467fb2d58a27574269b0a004efbf8f04 1391145281 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Notification.isOnNext()
rx.Notification.getValue()
rx.Observer.onNext(null)
rx.Notification.isOnCompleted()
rx.Observer.onCompleted()
rx.Notification.isOnError()
rx.Notification.getThrowable()
rx.Observer.onError(java.lang.Throwable)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Notification.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Notification.isOnCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Notification.isOnError()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Notification.getThrowable()
** Sugestões fornecidas **
Usuários que chamam:
rx.Notification.isOnError()
Também chamam:
rx.Notification.getThrowable()
Confiança: 0.857141637551463
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperationAny$Any.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicBoolean.get()
rx.util.functions.Func1.call(null)
java.util.concurrent.atomic.AtomicBoolean.getAndSet(Z)
rx.Observer.onNext(null)
rx.Observer.onCompleted()
unsubscribe
rx.Observer.onError(java.lang.Throwable)
unsubscribe
rx.Observer.onError(java.lang.Throwable)
java.util.concurrent.atomic.AtomicBoolean.get()
rx.Observer.onNext(null)
rx.Observer.onCompleted()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.atomic.AtomicBoolean.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func1.call(null)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicBoolean.get()
Também chamam:
rx.Observer.onNext(null)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicBoolean.getAndSet(Z)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.util.functions.Func1.call(null)
Também chamam:
rx.Observer.onNext(null)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onNext(null)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicBoolean.getAndSet(Z)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 0.7499995331247957
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: unsubscribe
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: unsubscribe
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onCompleted()
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Observer.onNext(null)
Confiança: 0.9285708187757313
Suporte: 0.00870147
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicBoolean.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func1.call(null)
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onNext(null)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicBoolean.get()
Também chamam:
rx.Observer.onNext(null)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onCompleted()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onNext(null)
rx.Observer.onCompleted()
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onNext(null)
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
************************ Método Avaliado: rx.operators.OperationBuffer$BufferWithObservableBoundary.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.CompositeSubscription.add(rx.Subscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
rx.Observable.subscribe(rx.Observer)
Também chamam:
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Confiança: 0.8000011952000765
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
************************ Método Avaliado: rx.operators.OperationConcat$Concat.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicBoolean.compareAndSet(Z, Z)
rx.operators.SafeObservableSubscription.unsubscribe()
rx.Observer.onError(java.lang.Throwable)
java.util.Collection.isEmpty()
java.util.concurrent.atomic.AtomicBoolean.get()
java.util.concurrent.atomic.AtomicBoolean.compareAndSet(Z, Z)
rx.Observer.onCompleted()
java.util.Queue.poll()
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.Queue.add(rx.Observable)
java.util.concurrent.atomic.AtomicBoolean.compareAndSet(Z, Z)
rx.Subscription.unsubscribe()
rx.Observer.onError(java.lang.Throwable)
java.util.concurrent.atomic.AtomicBoolean.set(Z)
java.util.concurrent.atomic.AtomicBoolean.compareAndSet(Z, Z)
rx.Observer.onCompleted()
rx.Subscription.unsubscribe()
rx.operators.SafeObservableSubscription.unsubscribe()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.atomic.AtomicBoolean.compareAndSet(Z, Z)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.SafeObservableSubscription.unsubscribe()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.isEmpty()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicBoolean.get()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicBoolean.compareAndSet(Z, Z)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Queue.poll()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Queue.add(rx.Observable)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicBoolean.compareAndSet(Z, Z)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Subscription.unsubscribe()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicBoolean.get()
rx.Subscription.unsubscribe()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicBoolean.set(Z)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onNext(null)
rx.Observable.subscribe(rx.Observer)
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicBoolean.compareAndSet(Z, Z)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Subscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onNext(null)
rx.Observable.subscribe(rx.Observer)
rx.Observer.onCompleted()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: rx.operators.SafeObservableSubscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicBoolean.get()
rx.Subscription.unsubscribe()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
************************ Método Avaliado: rx.operators.OperationDefaultIfEmpty$DefaultIfEmpty.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.Observer.onNext(null)
rx.Observer.onError(java.lang.Throwable)
unsubscribe
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onCompleted()
rx.Observer.onNext(null)
rx.Observer.onCompleted()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: unsubscribe
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onNext(null)
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Observer.onCompleted()
Confiança: 0.823533237248216
Suporte: 0.00937082
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onNext(null)
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Observer.onCompleted()
Confiança: 0.823533237248216
Suporte: 0.00937082
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onNext(null)
rx.Observer.onCompleted()
rx.Observer.onNext(null)
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
************************ Método Avaliado: rx.operators.OperationDelay$DelayViaObservable.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.SerialSubscription.set(rx.Subscription)
rx.util.functions.Func0.call()
rx.Observer.onError(java.lang.Throwable)
rx.subscriptions.Subscriptions.empty()
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.SerialSubscription.set(rx.Subscription)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.SerialSubscription.set(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func0.call()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func0.call()
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.subscriptions.Subscriptions.empty()
Confiança: 0.7142854093878658
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: rx.subscriptions.CompositeSubscription.add(rx.Subscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func0.call()
rx.Observer.onError(java.lang.Throwable)
rx.subscriptions.Subscriptions.empty()
Também chamam:
rx.Observable.subscribe(rx.Observer)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.SerialSubscription.set(rx.Subscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
rx.Observable.subscribe(rx.Observer)
Também chamam:
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Confiança: 0.8000011952000765
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
************************ Método Avaliado: rx.operators.OperationDelay$DelaySubscribeFunc.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Scheduler.schedule(rx.util.functions.Action0, J, java.util.concurrent.TimeUnit)
rx.subscriptions.SerialSubscription.setSubscription(rx.Subscription)
rx.subscriptions.SerialSubscription.isUnsubscribed()
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.SerialSubscription.setSubscription(rx.Subscription)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.subscriptions.SerialSubscription.setSubscription(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.SerialSubscription.isUnsubscribed()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.SerialSubscription.setSubscription(rx.Subscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.subscriptions.SerialSubscription.setSubscription(rx.Subscription)
rx.Observable.subscribe(rx.Observer)
Também chamam:
rx.subscriptions.SerialSubscription.setSubscription(rx.Subscription)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
************************ Método Avaliado: rx.operators.OperationDematerialize$DematerializeObservable.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.Notification.getKind()
rx.Notification.getValue()
rx.Observer.onNext(null)
rx.Notification.getThrowable()
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onCompleted()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Notification.getKind()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Notification.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
** Sugestões fornecidas **
Usuários que chamam:
rx.Notification.getKind()
rx.Notification.getValue()
Também chamam:
rx.Notification.getThrowable()
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: rx.Notification.getThrowable()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onNext(null)
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Observer.onCompleted()
Confiança: 0.823533237248216
Suporte: 0.00937082
Posição da Sugestão: 1
**************************
************************ Método Avaliado: rx.operators.OperationDistinct$DistinctWithComparator.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.Observer.onCompleted()
rx.Observer.onError(java.lang.Throwable)
rx.util.functions.Func1.call(null)
null.alreadyEmitted(rx.operators.OperationDistinct$DistinctWithComparator$U)
java.util.List.add(rx.operators.OperationDistinct$DistinctWithComparator$U)
rx.Observer.onNext(null)
java.util.Comparator.compare(rx.operators.OperationDistinct$DistinctWithComparator$U, rx.operators.OperationDistinct$DistinctWithComparator$U)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func1.call(null)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onCompleted()
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Observer.onNext(null)
Confiança: 0.9285708187757313
Suporte: 0.00870147
Posição da Sugestão: 1
**************************
Chamada: null.alreadyEmitted(rx.operators.OperationDistinct$DistinctWithComparator$U)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.util.functions.Func1.call(null)
Também chamam:
rx.Observer.onNext(null)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: java.util.List.add(rx.operators.OperationDistinct$DistinctWithComparator$U)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Comparator.compare(rx.operators.OperationDistinct$DistinctWithComparator$U, rx.operators.OperationDistinct$DistinctWithComparator$U)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperationDistinct$Distinct.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.Observer.onCompleted()
rx.Observer.onError(java.lang.Throwable)
rx.util.functions.Func1.call(null)
java.util.Set.contains(java.lang.Object)
java.util.Set.add(rx.operators.OperationDistinct$Distinct$U)
rx.Observer.onNext(null)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func1.call(null)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onCompleted()
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Observer.onNext(null)
Confiança: 0.9285708187757313
Suporte: 0.00870147
Posição da Sugestão: 1
**************************
Chamada: java.util.Set.contains(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.util.functions.Func1.call(null)
Também chamam:
rx.Observer.onNext(null)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: java.util.Set.add(rx.operators.OperationDistinct$Distinct$U)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperationDistinctUntilChanged$DistinctUntilChanged.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.Observer.onCompleted()
rx.Observer.onError(java.lang.Throwable)
rx.util.functions.Func1.call(null)
rx.Observer.onNext(null)
java.util.Comparator.compare(rx.operators.OperationDistinctUntilChanged$DistinctUntilChanged$U, rx.operators.OperationDistinctUntilChanged$DistinctUntilChanged$U)
rx.Observer.onNext(null)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func1.call(null)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onCompleted()
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Observer.onNext(null)
Confiança: 0.9285708187757313
Suporte: 0.00870147
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onNext(null)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.util.functions.Func1.call(null)
Também chamam:
rx.Observer.onNext(null)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: java.util.Comparator.compare(rx.operators.OperationDistinctUntilChanged$DistinctUntilChanged$U, rx.operators.OperationDistinctUntilChanged$DistinctUntilChanged$U)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperationDoOnEach$DoOnEachObservable.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.Observer.onCompleted()
null.onError(java.lang.Throwable)
rx.Observer.onCompleted()
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onNext(null)
null.onError(java.lang.Throwable)
rx.Observer.onNext(null)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: null.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onCompleted()
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Observer.onNext(null)
Confiança: 0.9285708187757313
Suporte: 0.00870147
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onCompleted()
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Observer.onNext(null)
Confiança: 0.9285708187757313
Suporte: 0.00870147
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onNext(null)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onCompleted()
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Observer.onNext(null)
Confiança: 0.9285708187757313
Suporte: 0.00870147
Posição da Sugestão: 1
**************************
Chamada: null.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperationElementAt$ElementAt.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicInteger.getAndIncrement()
rx.Observer.onNext(null)
rx.Observer.onCompleted()
rx.operators.SafeObservableSubscription.unsubscribe()
rx.Observer.onError(java.lang.Throwable)
rx.operators.SafeObservableSubscription.unsubscribe()
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onError(java.lang.Throwable)
java.util.concurrent.atomic.AtomicInteger.get()
rx.Observer.onNext(null)
rx.Observer.onCompleted()
rx.Observer.onError(java.lang.Throwable)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicInteger.getAndIncrement()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicInteger.getAndIncrement()
Também chamam:
rx.Observer.onNext(null)
Confiança: 0.8000011952000765
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onCompleted()
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
rx.Observer.onNext(null)
Também chamam:
rx.Observer.onCompleted()
Confiança: 0.812500116718801
Suporte: 0.00870147
Posição da Sugestão: 1
**************************
Chamada: rx.operators.SafeObservableSubscription.unsubscribe()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.SafeObservableSubscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onNext(null)
rx.Observer.onCompleted()
rx.operators.SafeObservableSubscription.unsubscribe()
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onNext(null)
rx.Observer.onCompleted()
rx.operators.SafeObservableSubscription.unsubscribe()
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 2
**************************
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
rx.Observer.onNext(null)
rx.Observer.onCompleted()
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 2
**************************
Chamada: java.util.concurrent.atomic.AtomicInteger.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onNext(null)
rx.Observer.onCompleted()
rx.operators.SafeObservableSubscription.unsubscribe()
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 2
**************************
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
rx.Observer.onNext(null)
rx.Observer.onCompleted()
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 2
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
rx.Observer.onNext(null)
rx.Observer.onCompleted()
rx.Observer.onNext(null)
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperationFilter$Filter.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.util.functions.Func1.call(null)
rx.Observer.onNext(null)
rx.Observer.onError(java.lang.Throwable)
unsubscribe
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onCompleted()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.util.functions.Func1.call(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.util.functions.Func1.call(null)
Também chamam:
rx.Observer.onNext(null)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: unsubscribe
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onNext(null)
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Observer.onCompleted()
Confiança: 0.823533237248216
Suporte: 0.00937082
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func1.call(null)
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
************************ Método Avaliado: rx.operators.OperationInterval$Interval.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Scheduler.schedulePeriodically(rx.util.functions.Action0, J, J, java.util.concurrent.TimeUnit)
rx.Observer.onNext(null)
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
rx.Subscription.unsubscribe()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Subscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onNext(null)
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
************************ Método Avaliado: rx.operators.OperationMaterialize$MaterializeObservable.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
createOnCompleted
rx.Observer.onNext(null)
rx.Observer.onCompleted()
createOnError
rx.Observer.onNext(null)
rx.Observer.onCompleted()
createOnNext
rx.Observer.onNext(null)
---------------- Chamadas de método adicionadas ---------------
Chamada: createOnCompleted
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: createOnError
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onNext(null)
rx.Observer.onCompleted()
rx.Observer.onNext(null)
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: createOnNext
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperationMulticast$MulticastSubscribeFunc.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.util.functions.Func0.call()
rx.util.functions.Func1.call(null)
rx.Observer.onError(java.lang.Throwable)
rx.subscriptions.Subscriptions.empty()
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
rx.observables.ConnectableObservable.connect()
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.util.functions.Func1.call(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func0.call()
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.subscriptions.Subscriptions.empty()
Confiança: 0.7142854093878658
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func0.call()
rx.Observer.onError(java.lang.Throwable)
rx.subscriptions.Subscriptions.empty()
Também chamam:
rx.Observable.subscribe(rx.Observer)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.observables.ConnectableObservable.connect()
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func1.call(null)
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Também chamam:
rx.Observable.subscribe(rx.Observer)
Confiança: 0.8333341633342132
Suporte: 0.00334672
Posição da Sugestão: 0
**************************
Chamada: rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperationOnErrorResumeNextViaFunction$OnErrorResumeNextViaFunction.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.atomic.AtomicReference.get()
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Func1.call(java.lang.Throwable)
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.operators.SafeObservableSubscription, rx.operators.SafeObservableSubscription)
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.Arrays.asList([Ljava.lang.Throwable;)
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onCompleted()
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
rx.Subscription.unsubscribe()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.Observable.subscribe(rx.Observer)
Também chamam:
java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.operators.SafeObservableSubscription, rx.operators.SafeObservableSubscription)
Confiança: 0.857141637551463
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
rx.Observer.onNext(null)
Também chamam:
rx.Observer.onCompleted()
Confiança: 0.812500116718801
Suporte: 0.00870147
Posição da Sugestão: 1
**************************
Chamada: rx.util.functions.Func1.call(java.lang.Throwable)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Func1.call(java.lang.Throwable)
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.operators.SafeObservableSubscription, rx.operators.SafeObservableSubscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onNext(null)
rx.Observable.subscribe(rx.Observer)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.operators.SafeObservableSubscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.operators.SafeObservableSubscription, rx.operators.SafeObservableSubscription)
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: java.util.Arrays.asList([Ljava.lang.Throwable;)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Func1.call(java.lang.Throwable)
rx.operators.SafeObservableSubscription.unsubscribe()
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.Arrays.asList([Ljava.lang.Throwable;)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onCompleted()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onNext(null)
rx.Observable.subscribe(rx.Observer)
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
rx.Observer.onCompleted()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Subscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
************************ Método Avaliado: rx.operators.OperationOnErrorResumeNextViaObservable$OnErrorResumeNextViaObservable.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.operators.SafeObservableSubscription, rx.operators.SafeObservableSubscription)
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.concurrent.atomic.AtomicReference.get()
rx.Observer.onCompleted()
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
rx.Subscription.unsubscribe()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
rx.Observer.onNext(null)
Também chamam:
rx.Observer.onCompleted()
Confiança: 0.812500116718801
Suporte: 0.00870147
Posição da Sugestão: 1
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.operators.SafeObservableSubscription, rx.operators.SafeObservableSubscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onNext(null)
rx.Observable.subscribe(rx.Observer)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.operators.SafeObservableSubscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.operators.SafeObservableSubscription, rx.operators.SafeObservableSubscription)
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
rx.operators.SafeObservableSubscription.unsubscribe()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onCompleted()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
rx.Observer.onCompleted()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Subscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
************************ Método Avaliado: rx.operators.OperationOnErrorReturn$OnErrorReturn.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Func1.call(java.lang.Throwable)
null.onNext(rx.operators.OperationOnErrorReturn$OnErrorReturn$T)
null.onCompleted()
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.Arrays.asList([Ljava.lang.Throwable;)
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onCompleted()
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
rx.Subscription.unsubscribe()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
rx.Observer.onNext(null)
Também chamam:
rx.Observer.onCompleted()
Confiança: 0.812500116718801
Suporte: 0.00870147
Posição da Sugestão: 1
**************************
Chamada: rx.util.functions.Func1.call(java.lang.Throwable)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: null.onNext(rx.operators.OperationOnErrorReturn$OnErrorReturn$T)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Func1.call(java.lang.Throwable)
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: null.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.SafeObservableSubscription.unsubscribe()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Arrays.asList([Ljava.lang.Throwable;)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Func1.call(java.lang.Throwable)
rx.operators.SafeObservableSubscription.unsubscribe()
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.Arrays.asList([Ljava.lang.Throwable;)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onCompleted()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicReference.get()
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
rx.Observer.onCompleted()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Subscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
************************ Método Avaliado: rx.operators.OperationOnExceptionResumeNextViaObservable$OnExceptionResumeNextViaObservable.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.operators.SafeObservableSubscription, rx.operators.SafeObservableSubscription)
rx.operators.SafeObservableSubscription.unsubscribe()
rx.Observer.onError(java.lang.Throwable)
java.util.concurrent.atomic.AtomicReference.get()
rx.Observer.onCompleted()
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
rx.Subscription.unsubscribe()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
rx.Observer.onNext(null)
Também chamam:
rx.Observer.onCompleted()
Confiança: 0.812500116718801
Suporte: 0.00870147
Posição da Sugestão: 1
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.operators.SafeObservableSubscription, rx.operators.SafeObservableSubscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onNext(null)
rx.Observable.subscribe(rx.Observer)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.operators.SafeObservableSubscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.operators.SafeObservableSubscription, rx.operators.SafeObservableSubscription)
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
rx.operators.SafeObservableSubscription.unsubscribe()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onNext(null)
rx.Observable.subscribe(rx.Observer)
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onCompleted()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
rx.Observer.onCompleted()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Subscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
java.util.concurrent.atomic.AtomicReference.get()
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
************************ Método Avaliado: rx.operators.OperationRefCount$RefCount.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.observables.ConnectableObservable.connect()
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
rx.Subscription.unsubscribe()
rx.Subscription.unsubscribe()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.observables.ConnectableObservable.connect()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Subscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: rx.Subscription.unsubscribe()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperationReplay$CustomReplaySubjectSubscribeFunc.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.operators.OperationReplay$BaseState.lock()
rx.util.functions.Action0.call()
rx.operators.OperationReplay$ReplayState.addReplayer(rx.Observer)
rx.operators.OperationReplay$BaseState.unlock()
rx.operators.OperationReplay$VirtualList.start()
rx.operators.OperationReplay$VirtualList.end()
rx.operators.OperationReplay$VirtualList.get(I)
rx.util.functions.Func1.call(null)
rx.Observer.onNext(null)
rx.Observer.onError(java.lang.Throwable)
rx.subscriptions.Subscriptions.empty()
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onCompleted()
rx.subscriptions.Subscriptions.empty()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.util.functions.Action0.call()
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.OperationReplay$BaseState.lock()
Também chamam:
rx.operators.OperationReplay$BaseState.unlock()
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: rx.operators.OperationReplay$ReplayState.addReplayer(rx.Observer)
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.OperationReplay$BaseState.lock()
rx.util.functions.Action0.call()
Também chamam:
rx.operators.OperationReplay$BaseState.unlock()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.operators.OperationReplay$BaseState.unlock()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperationReplay$VirtualList.start()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperationReplay$VirtualList.end()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperationReplay$VirtualList.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func1.call(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func1.call(null)
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperationRetry$Retry.attemptSubscription(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.atomic.AtomicInteger.incrementAndGet()
rx.Observable.subscribe(rx.Observer)
rx.Observer.onCompleted()
java.util.concurrent.atomic.AtomicInteger.get()
rx.subscriptions.CompositeSubscription.isUnsubscribed()
rx.operators.OperationRetry$Retry.attemptSubscription(rx.Observer)
rx.Scheduler.schedule(rx.subscriptions.MultipleAssignmentSubscription, rx.util.functions.Func2)
rx.subscriptions.MultipleAssignmentSubscription.set(rx.Subscription)
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onNext(null)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicInteger.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.CompositeSubscription.isUnsubscribed()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperationRetry$Retry.attemptSubscription(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Scheduler.schedule(rx.subscriptions.MultipleAssignmentSubscription, rx.util.functions.Func2)
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.OperationRetry$Retry.attemptSubscription(rx.Observer)
Também chamam:
rx.Scheduler.schedule(rx.subscriptions.MultipleAssignmentSubscription, rx.util.functions.Func2)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.subscriptions.MultipleAssignmentSubscription.set(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onCompleted()
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Observer.onNext(null)
Confiança: 0.9285708187757313
Suporte: 0.00870147
Posição da Sugestão: 1
**************************
************************ Método Avaliado: rx.operators.OperationRetry$Retry.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.schedulers.Schedulers.currentThread()
rx.operators.OperationRetry$Retry.attemptSubscription(rx.Observer)
rx.Scheduler.schedule(rx.subscriptions.MultipleAssignmentSubscription, rx.util.functions.Func2)
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.operators.OperationRetry$Retry.attemptSubscription(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Scheduler.schedule(rx.subscriptions.MultipleAssignmentSubscription, rx.util.functions.Func2)
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.OperationRetry$Retry.attemptSubscription(rx.Observer)
Também chamam:
rx.Scheduler.schedule(rx.subscriptions.MultipleAssignmentSubscription, rx.util.functions.Func2)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperationSample$Sample.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.operators.OperationInterval.interval(J, java.util.concurrent.TimeUnit, rx.Scheduler)
rx.Observable.create(rx.Observable$OnSubscribeFunc)
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicBoolean.get()
java.util.concurrent.atomic.AtomicReference.get()
rx.Observer.onNext(null)
rx.Observable.subscribe(rx.Observer)
rx.Subscription.unsubscribe()
rx.Observer.onCompleted()
rx.Subscription.unsubscribe()
rx.Observer.onError(java.lang.Throwable)
java.util.concurrent.atomic.AtomicReference.set(rx.operators.OperationSample$Sample$T)
java.util.concurrent.atomic.AtomicBoolean.set(Z)
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
add
rx.Subscription.unsubscribe()
rx.Subscription.unsubscribe()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observable.create(rx.Observable$OnSubscribeFunc)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicBoolean.get()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicBoolean.get()
Também chamam:
rx.Observer.onNext(null)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onNext(null)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 0.8333341633342132
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Subscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onNext(null)
rx.Observable.subscribe(rx.Observer)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onCompleted()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicBoolean.get()
rx.Subscription.unsubscribe()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Subscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.Observer.onNext(null)
rx.Observer.onCompleted()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicBoolean.get()
rx.Subscription.unsubscribe()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.set(rx.operators.OperationSample$Sample$T)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onNext(null)
rx.Observable.subscribe(rx.Observer)
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicBoolean.set(Z)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Nenhuma sugestão fornecida.
**************************
Chamada: add
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onCompleted()
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Subscription.unsubscribe()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Subscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicBoolean.get()
rx.Subscription.unsubscribe()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
************************ Método Avaliado: rx.operators.OperationScan$AccuWithoutInitialValue.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.Observer.onNext(null)
rx.operators.OperationScan$AccumulatingObserver.onNext(rx.operators.OperationScan$AccuWithoutInitialValue$T)
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onCompleted()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperationScan$AccumulatingObserver.onNext(rx.operators.OperationScan$AccuWithoutInitialValue$T)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onNext(null)
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Observer.onCompleted()
Confiança: 0.823533237248216
Suporte: 0.00937082
Posição da Sugestão: 1
**************************
************************ Método Avaliado: rx.operators.OperationSkipLast$SkipLast.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.Observer.onCompleted()
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onNext(null)
rx.Observer.onError(java.lang.Throwable)
unsubscribe
java.util.concurrent.locks.ReentrantLock.lock()
java.util.Deque.offerLast(rx.operators.OperationSkipLast$SkipLast$T)
java.util.Deque.size()
java.util.Deque.removeFirst()
rx.Observer.onNext(null)
rx.Observer.onError(java.lang.Throwable)
unsubscribe
java.util.concurrent.locks.ReentrantLock.unlock()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onCompleted()
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Observer.onNext(null)
Confiança: 0.9285708187757313
Suporte: 0.00870147
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: unsubscribe
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onCompleted()
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Observer.onNext(null)
Confiança: 0.9285708187757313
Suporte: 0.00870147
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.locks.ReentrantLock.lock()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Deque.offerLast(rx.operators.OperationSkipLast$SkipLast$T)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Deque.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Deque.removeFirst()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onNext(null)
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onNext(null)
Também chamam:
rx.Observer.onCompleted()
Confiança: 0.7142854093878658
Suporte: 0.00334672
Posição da Sugestão: 0
**************************
Chamada: unsubscribe
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onCompleted()
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Observer.onNext(null)
Confiança: 0.9285708187757313
Suporte: 0.00870147
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onNext(null)
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Observer.onCompleted()
Confiança: 0.823533237248216
Suporte: 0.00937082
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onNext(null)
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onNext(null)
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 0.8000011952000765
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: java.util.concurrent.locks.ReentrantLock.unlock()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperationTakeUntil$OtherObservable.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.Observer.onError(java.lang.Throwable)
rx.operators.OperationTakeUntil$Notification.halt()
rx.Observer.onNext(null)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperationTakeUntil$Notification.halt()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.OperationTakeUntil$Notification.halt()
Também chamam:
rx.Observer.onNext(null)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
************************ Método Avaliado: rx.operators.OperationTakeUntil$SourceObservable.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.subscribe(rx.Observer)
rx.operators.OperationTakeUntil$Notification.halt()
rx.Observer.onNext(null)
rx.Observer.onError(java.lang.Throwable)
rx.operators.OperationTakeUntil$Notification.value(rx.operators.OperationTakeUntil$SourceObservable$T)
rx.Observer.onNext(null)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.operators.OperationTakeUntil$Notification.halt()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.OperationTakeUntil$Notification.halt()
Também chamam:
rx.Observer.onNext(null)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperationTakeUntil$Notification.value(rx.operators.OperationTakeUntil$SourceObservable$T)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observer.onNext(null)
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Observer.onCompleted()
Confiança: 0.823533237248216
Suporte: 0.00937082
Posição da Sugestão: 0
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperationTimeout$TimeoutSelector.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.util.functions.Func0.call()
rx.Observer.onError(java.lang.Throwable)
rx.subscriptions.Subscriptions.empty()
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func0.call()
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.subscriptions.Subscriptions.empty()
Confiança: 0.7142854093878658
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func0.call()
rx.Observer.onError(java.lang.Throwable)
rx.subscriptions.Subscriptions.empty()
Também chamam:
rx.Observable.subscribe(rx.Observer)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.CompositeSubscription.add(rx.Subscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
rx.Observable.subscribe(rx.Observer)
Também chamam:
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Confiança: 0.8000011952000765
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
************************ Método Avaliado: rx.operators.OperationTimeout$Timeout.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.atomic.AtomicLong.get()
rx.Scheduler.schedule(rx.util.functions.Action0, J, java.util.concurrent.TimeUnit)
java.util.concurrent.atomic.AtomicLong.get()
java.util.concurrent.atomic.AtomicBoolean.getAndSet(Z)
rx.Observer.onError(java.lang.Throwable)
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.SerialSubscription.setSubscription(rx.Subscription)
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
java.util.concurrent.atomic.AtomicBoolean.get()
java.util.concurrent.atomic.AtomicLong.incrementAndGet()
rx.util.functions.Func0.call()
rx.subscriptions.SerialSubscription.setSubscription(rx.Subscription)
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicBoolean.getAndSet(Z)
rx.subscriptions.SerialSubscription.unsubscribe()
rx.Observer.onError(java.lang.Throwable)
java.util.concurrent.atomic.AtomicBoolean.getAndSet(Z)
rx.subscriptions.SerialSubscription.unsubscribe()
rx.Observer.onCompleted()
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
rx.util.functions.Func0.call()
rx.subscriptions.SerialSubscription.setSubscription(rx.Subscription)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Scheduler.schedule(rx.util.functions.Action0, J, java.util.concurrent.TimeUnit)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicLong.get()
Também chamam:
java.util.concurrent.atomic.AtomicLong.get()
Confiança: 0.8333341633342132
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicLong.get()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicBoolean.getAndSet(Z)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicLong.get()
Também chamam:
java.util.concurrent.atomic.AtomicLong.get()
Confiança: 0.8333341633342132
Suporte: 0.00334672
Posição da Sugestão: 0
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicBoolean.getAndSet(Z)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 0.7499995331247957
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.SerialSubscription.setSubscription(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.SerialSubscription.setSubscription(rx.Subscription)
rx.Observable.subscribe(rx.Observer)
Também chamam:
rx.subscriptions.SerialSubscription.setSubscription(rx.Subscription)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicBoolean.get()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicLong.incrementAndGet()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
java.util.concurrent.atomic.AtomicBoolean.get()
Também chamam:
rx.Observer.onNext(null)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.util.functions.Func0.call()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.SerialSubscription.setSubscription(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicBoolean.getAndSet(Z)
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
rx.Observer.onNext(null)
Também chamam:
rx.Observer.onCompleted()
Confiança: 0.812500116718801
Suporte: 0.00870147
Posição da Sugestão: 1
**************************
Chamada: rx.subscriptions.SerialSubscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicBoolean.getAndSet(Z)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 0.7499995331247957
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicBoolean.getAndSet(Z)
** Sugestões fornecidas **
Usuários que chamam:
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
rx.Observer.onNext(null)
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.Observer.onCompleted()
Confiança: 0.9230773650888874
Suporte: 0.00803213
Posição da Sugestão: 1
**************************
Chamada: rx.subscriptions.SerialSubscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicBoolean.getAndSet(Z)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 0.7499995331247957
Suporte: 0.00401606
Posição da Sugestão: 0
**************************
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.CompositeSubscription.add(rx.Subscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.Observable.subscribe(rx.Observer)
rx.Observer.onCompleted()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 0.8333341633342132
Suporte: 0.00334672
Posição da Sugestão: 0
**************************
Chamada: rx.util.functions.Func0.call()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.SerialSubscription.setSubscription(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperationToMap$ToMap.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.util.functions.Func0.call()
rx.Observer.onError(java.lang.Throwable)
rx.subscriptions.Subscriptions.empty()
rx.Observable.subscribe(rx.Observer)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func0.call()
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.subscriptions.Subscriptions.empty()
Confiança: 0.7142854093878658
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func0.call()
rx.Observer.onError(java.lang.Throwable)
rx.subscriptions.Subscriptions.empty()
Também chamam:
rx.Observable.subscribe(rx.Observer)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
************************ Método Avaliado: rx.operators.OperationToMultimap$ToMultimap.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.util.functions.Func0.call()
rx.Observer.onError(java.lang.Throwable)
rx.subscriptions.Subscriptions.empty()
rx.Observable.subscribe(rx.Observer)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func0.call()
rx.Observer.onError(java.lang.Throwable)
Também chamam:
rx.subscriptions.Subscriptions.empty()
Confiança: 0.7142854093878658
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func0.call()
rx.Observer.onError(java.lang.Throwable)
rx.subscriptions.Subscriptions.empty()
Também chamam:
rx.Observable.subscribe(rx.Observer)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
************************ Método Avaliado: rx.operators.OperationWindow$WindowViaObservable.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observer.onNext(null)
rx.Observer.onError(java.lang.Throwable)
rx.subscriptions.Subscriptions.empty()
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
rx.subscriptions.CompositeSubscription.isUnsubscribed()
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.CompositeSubscription.isUnsubscribed()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.CompositeSubscription.add(rx.Subscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
rx.Observable.subscribe(rx.Observer)
Também chamam:
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Confiança: 0.8000011952000765
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
************************ Método Avaliado: rx.operators.OperationZip$ZipIterable.onSubscribe(rx.Observer) ************************
*Commit: commit cac2118c0a8b99deac1c1268c7e870c5e2e9f5e8 1391146421 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.Iterable.iterator()
java.util.Iterator.hasNext()
rx.Observer.onError(java.lang.Throwable)
rx.subscriptions.Subscriptions.empty()
rx.Observer.onCompleted()
rx.subscriptions.Subscriptions.empty()
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.SerialSubscription.set(rx.Subscription)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Iterator.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Iterable.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.SerialSubscription.set(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.joins.Plan1.activate(java.util.Map, rx.Observer, rx.util.functions.Action1) ************************
*Commit: commit 99f32abd5fde12dca47b14221c4a60843a8d03af 1391150178 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.util.functions.Actions.onErrorFrom(rx.Observer)
rx.joins.Pattern1.first()
rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
rx.util.functions.Func1.call(rx.joins.Plan1$T1)
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onNext(rx.joins.Plan1$R)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.set(rx.joins.ActivePlan1)
rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.joins.Pattern1.first()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func1.call(rx.joins.Plan1$T1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(rx.joins.Plan1$R)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: rx.util.functions.Action1.call(rx.joins.ActivePlan0)
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.set(rx.joins.ActivePlan1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.joins.Plan2.activate(java.util.Map, rx.Observer, rx.util.functions.Action1) ************************
*Commit: commit 99f32abd5fde12dca47b14221c4a60843a8d03af 1391150178 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.util.functions.Actions.onErrorFrom(rx.Observer)
rx.joins.Pattern2.first()
rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
rx.joins.Pattern2.second()
rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
rx.util.functions.Func2.call(rx.joins.Plan2$T1, rx.joins.Plan2$T2)
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onNext(rx.joins.Plan2$R)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.set(rx.joins.ActivePlan2)
rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.joins.Pattern2.first()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Pattern2.second()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func2.call(rx.joins.Plan2$T1, rx.joins.Plan2$T2)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(rx.joins.Plan2$R)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
java.util.concurrent.atomic.AtomicReference.get()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.util.functions.Action1.call(rx.joins.ActivePlan0)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.set(rx.joins.ActivePlan2)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.joins.Plan3.activate(java.util.Map, rx.Observer, rx.util.functions.Action1) ************************
*Commit: commit 99f32abd5fde12dca47b14221c4a60843a8d03af 1391150178 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.util.functions.Actions.onErrorFrom(rx.Observer)
rx.joins.Pattern3.first()
rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
rx.joins.Pattern3.second()
rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
rx.joins.Pattern3.third()
rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
rx.util.functions.Func3.call(rx.joins.Plan3$T1, rx.joins.Plan3$T2, rx.joins.Plan3$T3)
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onNext(rx.joins.Plan3$R)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.set(rx.joins.ActivePlan3)
rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.joins.Pattern3.first()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Pattern3.second()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Pattern3.third()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func3.call(rx.joins.Plan3$T1, rx.joins.Plan3$T2, rx.joins.Plan3$T3)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(rx.joins.Plan3$R)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
java.util.concurrent.atomic.AtomicReference.get()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
java.util.concurrent.atomic.AtomicReference.get()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.util.functions.Action1.call(rx.joins.ActivePlan0)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.set(rx.joins.ActivePlan3)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.SafeObserver._onError(java.lang.Throwable) ************************
*Commit: commit 99f32abd5fde12dca47b14221c4a60843a8d03af 1391150178 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.plugins.RxJavaPlugins.getInstance()
rx.plugins.RxJavaPlugins.getErrorHandler()
rx.plugins.RxJavaErrorHandler.handleError(java.lang.Throwable)
rx.Observer.onError(java.lang.Throwable)
rx.Subscription.unsubscribe()
rx.plugins.RxJavaPlugins.getInstance()
rx.plugins.RxJavaPlugins.getErrorHandler()
rx.plugins.RxJavaErrorHandler.handleError(java.lang.Throwable)
java.util.Arrays.asList([Ljava.lang.Throwable;)
rx.plugins.RxJavaPlugins.getInstance()
rx.plugins.RxJavaPlugins.getErrorHandler()
rx.plugins.RxJavaErrorHandler.handleError(java.lang.Throwable)
rx.Subscription.unsubscribe()
rx.plugins.RxJavaPlugins.getInstance()
rx.plugins.RxJavaPlugins.getErrorHandler()
rx.plugins.RxJavaErrorHandler.handleError(java.lang.Throwable)
java.util.Arrays.asList([Ljava.lang.Throwable;)
java.util.Arrays.asList([Ljava.lang.Throwable;)
rx.Subscription.unsubscribe()
rx.plugins.RxJavaPlugins.getInstance()
rx.plugins.RxJavaPlugins.getErrorHandler()
rx.plugins.RxJavaErrorHandler.handleError(java.lang.Throwable)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.plugins.RxJavaPlugins.getErrorHandler()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.plugins.RxJavaErrorHandler.handleError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Subscription.unsubscribe()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.plugins.RxJavaPlugins.getInstance()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.plugins.RxJavaPlugins.getErrorHandler()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.plugins.RxJavaErrorHandler.handleError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Arrays.asList([Ljava.lang.Throwable;)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.plugins.RxJavaPlugins.getInstance()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Arrays.asList([Ljava.lang.Throwable;)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 0.8000011952000765
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: rx.plugins.RxJavaPlugins.getErrorHandler()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.plugins.RxJavaErrorHandler.handleError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Subscription.unsubscribe()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.plugins.RxJavaPlugins.getInstance()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.plugins.RxJavaPlugins.getErrorHandler()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.plugins.RxJavaErrorHandler.handleError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Arrays.asList([Ljava.lang.Throwable;)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Arrays.asList([Ljava.lang.Throwable;)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Arrays.asList([Ljava.lang.Throwable;)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 0.8000011952000765
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: rx.Subscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Arrays.asList([Ljava.lang.Throwable;)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 0.8000011952000765
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: rx.plugins.RxJavaPlugins.getInstance()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.plugins.RxJavaPlugins.getErrorHandler()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.plugins.RxJavaErrorHandler.handleError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: schedule ************************
*Commit: commit d91794b7123f58d5dfc85fa7edfd8c33ffd9655d 1391470558 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.subscriptions.MultipleAssignmentSubscription.isUnsubscribed()
rx.subscriptions.MultipleAssignmentSubscription.isUnsubscribed()
call
java.util.concurrent.ExecutorService.submit(java.lang.Runnable)
rx.subscriptions.Subscriptions.from(java.util.concurrent.Future)
rx.subscriptions.MultipleAssignmentSubscription.set(rx.Subscription)
java.util.concurrent.Executor.execute(java.lang.Runnable)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.subscriptions.MultipleAssignmentSubscription.isUnsubscribed()
** Sugestões fornecidas **
Usuários que chamam:
rx.subscriptions.MultipleAssignmentSubscription.isUnsubscribed()
Também chamam:
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: call
** Sugestões fornecidas **
Usuários que chamam:
rx.subscriptions.MultipleAssignmentSubscription.isUnsubscribed()
Também chamam:
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: java.util.concurrent.ExecutorService.submit(java.lang.Runnable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.from(java.util.concurrent.Future)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.MultipleAssignmentSubscription.set(rx.Subscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.subscriptions.Subscriptions.from(java.util.concurrent.Future)
Também chamam:
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Confiança: 0.7142854093878658
Suporte: 0.00334672
Posição da Sugestão: 0
**************************
Chamada: java.util.concurrent.Executor.execute(java.lang.Runnable)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: schedulePeriodically ************************
*Commit: commit d91794b7123f58d5dfc85fa7edfd8c33ffd9655d 1391470558 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.ScheduledExecutorService.scheduleAtFixedRate(java.lang.Runnable, J, J, java.util.concurrent.TimeUnit)
rx.schedulers.ExecutorScheduler$InnerExecutorScheduler.isUnsubscribed()
call
rx.subscriptions.Subscriptions.from(java.util.concurrent.Future)
rx.subscriptions.MultipleAssignmentSubscription.set(rx.Subscription)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.schedulers.ExecutorScheduler$InnerExecutorScheduler.isUnsubscribed()
Nenhuma sugestão fornecida.
**************************
Chamada: call
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.from(java.util.concurrent.Future)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.MultipleAssignmentSubscription.set(rx.Subscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.subscriptions.Subscriptions.from(java.util.concurrent.Future)
Também chamam:
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Confiança: 0.7142854093878658
Suporte: 0.00334672
Posição da Sugestão: 0
**************************
************************ Método Avaliado: schedule ************************
*Commit: commit d91794b7123f58d5dfc85fa7edfd8c33ffd9655d 1391470558 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.schedulers.GenericScheduledExecutorService.getInstance()
java.util.concurrent.ScheduledExecutorService.schedule(java.lang.Runnable, J, java.util.concurrent.TimeUnit)
rx.subscriptions.CompositeSubscription.isUnsubscribed()
rx.Scheduler.schedule(rx.util.functions.Action1)
java.util.concurrent.atomic.AtomicReference.get()
rx.subscriptions.CompositeSubscription.remove(rx.Subscription)
rx.subscriptions.Subscriptions.from(java.util.concurrent.Future)
java.util.concurrent.atomic.AtomicReference.set(rx.Subscription)
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.ScheduledExecutorService.schedule(java.lang.Runnable, J, java.util.concurrent.TimeUnit)
** Sugestões fornecidas **
Usuários que chamam:
rx.schedulers.GenericScheduledExecutorService.getInstance()
Também chamam:
java.util.concurrent.ScheduledExecutorService.schedule(java.lang.Runnable, J, java.util.concurrent.TimeUnit)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.subscriptions.CompositeSubscription.isUnsubscribed()
** Sugestões fornecidas **
Usuários que chamam:
rx.schedulers.GenericScheduledExecutorService.getInstance()
java.util.concurrent.ScheduledExecutorService.schedule(java.lang.Runnable, J, java.util.concurrent.TimeUnit)
Também chamam:
rx.subscriptions.Subscriptions.from(java.util.concurrent.Future)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Scheduler.schedule(rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.CompositeSubscription.remove(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.from(java.util.concurrent.Future)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.set(rx.Subscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.subscriptions.Subscriptions.from(java.util.concurrent.Future)
Também chamam:
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Confiança: 0.7142854093878658
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: call ************************
*Commit: commit d91794b7123f58d5dfc85fa7edfd8c33ffd9655d 1391470558 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
isUnsubscribed
rx.Scheduler.now()
rx.Scheduler.now()
java.lang.Thread.sleep(J)
java.lang.Thread.currentThread()
java.lang.Thread.interrupt()
isUnsubscribed
call
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Scheduler.now()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Scheduler.now()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Thread.sleep(J)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Thread.currentThread()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Thread.interrupt()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Thread.currentThread()
Também chamam:
java.lang.Thread.interrupt()
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: isUnsubscribed
Nenhuma sugestão fornecida.
**************************
Chamada: call
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: call ************************
*Commit: commit cf28bce52ea15dba3e6be587ba5b4d43b1029ea9 1391559955 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.Iterable.iterator()
java.util.Iterator.hasNext()
onCompleted
create
onError
onCompleted
onError
java.util.Iterator.next()
rx.util.functions.Func2.call(null, null)
onNext
java.util.Iterator.hasNext()
null.onCompleted()
null.onError(java.lang.Throwable)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Iterator.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Iterable.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
Chamada: create
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func2.call(null, null)
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: null.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: null.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: call ************************
*Commit: commit 89bb9dbdf7e73c8238dc4a92c8281e8ca3a5ec53 1391671115 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
onError
rx.Scheduler.schedule(rx.util.functions.Action1)
isUnsubscribed
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
add
rx.Scheduler.schedule(rx.util.functions.Action1)
rx.subscriptions.CompositeSubscription.unsubscribe()
unsubscribe
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
rx.Observable.subscribe(rx.Observer)
onCompleted
onError
onNext
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Scheduler.schedule(rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: isUnsubscribed
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Nenhuma sugestão fornecida.
**************************
Chamada: add
** Sugestões fornecidas **
Usuários que chamam:
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 0.88888796666722
Suporte: 0.00535475
Posição da Sugestão: 0
**************************
Chamada: rx.Scheduler.schedule(rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.CompositeSubscription.unsubscribe()
Nenhuma sugestão fornecida.
**************************
Chamada: unsubscribe
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperatorObserveOn$InterruptibleBlockingQueue.offer(java.lang.Object) ************************
*Commit: commit d5e5df402bf4d18075dbf11f311793399a682e2e 1391904821 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.atomic.AtomicLong.get()
java.util.concurrent.atomic.AtomicLong.get()
java.util.concurrent.atomic.AtomicLong.lazySet(J)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.atomic.AtomicLong.get()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicLong.get()
Também chamam:
java.util.concurrent.atomic.AtomicLong.get()
Confiança: 0.8333341633342132
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicLong.lazySet(J)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicLong.get()
Também chamam:
java.util.concurrent.atomic.AtomicLong.get()
Confiança: 0.8333341633342132
Suporte: 0.00334672
Posição da Sugestão: 0
**************************
************************ Método Avaliado: rx.util.InterruptibleBlockingQueue.offer(rx.util.InterruptibleBlockingQueue$E) ************************
*Commit: commit 31101f05882a9b9a020bf6888db5f941ce996b3e 1392090551 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.atomic.AtomicLong.get()
java.util.concurrent.atomic.AtomicLong.get()
java.util.concurrent.atomic.AtomicLong.lazySet(J)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.atomic.AtomicLong.get()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicLong.get()
Também chamam:
java.util.concurrent.atomic.AtomicLong.get()
Confiança: 0.8333341633342132
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicLong.lazySet(J)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicLong.get()
Também chamam:
java.util.concurrent.atomic.AtomicLong.get()
Confiança: 0.8333341633342132
Suporte: 0.00334672
Posição da Sugestão: 0
**************************
************************ Método Avaliado: rx.util.InterruptibleBlockingQueue.poll() ************************
*Commit: commit 31101f05882a9b9a020bf6888db5f941ce996b3e 1392090551 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.atomic.AtomicLong.get()
java.util.concurrent.atomic.AtomicLong.get()
java.util.concurrent.atomic.AtomicLong.lazySet(J)
java.util.concurrent.Semaphore.release()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.atomic.AtomicLong.get()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicLong.get()
Também chamam:
java.util.concurrent.atomic.AtomicLong.get()
Confiança: 0.8333341633342132
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicLong.lazySet(J)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicLong.get()
Também chamam:
java.util.concurrent.atomic.AtomicLong.get()
Confiança: 0.8333341633342132
Suporte: 0.00334672
Posição da Sugestão: 0
**************************
Chamada: java.util.concurrent.Semaphore.release()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.util.InterruptibleBlockingQueue.size() ************************
*Commit: commit 290b3afc5eaab659ab701acfeda4c1e5fc53f960 1392102561 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.atomic.AtomicLong.get()
java.util.concurrent.atomic.AtomicLong.get()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.atomic.AtomicLong.get()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicLong.get()
Também chamam:
java.util.concurrent.atomic.AtomicLong.get()
Confiança: 0.8333341633342132
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
************************ Método Avaliado: rx.operators.OperatorTimeoutBase$TimeoutSubscriber.onCompleted() ************************
*Commit: commit d947c408f26335426c47ee1b1ac96afe65256a01 1392125072 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.atomic.AtomicBoolean.getAndSet(Z)
rx.subscriptions.SerialSubscription.unsubscribe()
onCompleted
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.subscriptions.SerialSubscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicBoolean.getAndSet(Z)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 0.7499995331247957
Suporte: 0.00401606
Posição da Sugestão: 0
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperatorTimeoutBase$TimeoutSubscriber.onError(java.lang.Throwable) ************************
*Commit: commit d947c408f26335426c47ee1b1ac96afe65256a01 1392125072 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.atomic.AtomicBoolean.getAndSet(Z)
rx.subscriptions.SerialSubscription.unsubscribe()
onError
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.subscriptions.SerialSubscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicBoolean.getAndSet(Z)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 0.7499995331247957
Suporte: 0.00401606
Posição da Sugestão: 0
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperatorTimeoutBase$TimeoutSubscriber.onNext(rx.operators.OperatorTimeoutBase$TimeoutSubscriber$T) ************************
*Commit: commit d947c408f26335426c47ee1b1ac96afe65256a01 1392125072 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.atomic.AtomicBoolean.get()
java.util.concurrent.atomic.AtomicLong.incrementAndGet()
onNext
java.util.concurrent.atomic.AtomicLong.get()
rx.util.functions.Func3.call(rx.operators.OperatorTimeoutBase$TimeoutSubscriber, java.lang.Long, rx.operators.OperatorTimeoutBase$TimeoutSubscriber$T)
rx.subscriptions.SerialSubscription.set(rx.Subscription)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.atomic.AtomicLong.incrementAndGet()
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicLong.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func3.call(rx.operators.OperatorTimeoutBase$TimeoutSubscriber, java.lang.Long, rx.operators.OperatorTimeoutBase$TimeoutSubscriber$T)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicLong.get()
Também chamam:
java.util.concurrent.atomic.AtomicLong.get()
Confiança: 0.8333341633342132
Suporte: 0.00334672
Posição da Sugestão: 0
**************************
Chamada: rx.subscriptions.SerialSubscription.set(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperatorTimeoutBase$TimeoutSubscriber.onTimeout(J) ************************
*Commit: commit d947c408f26335426c47ee1b1ac96afe65256a01 1392125072 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.atomic.AtomicLong.get()
java.util.concurrent.atomic.AtomicBoolean.getAndSet(Z)
onError
rx.Observable.subscribe(rx.Observer)
rx.subscriptions.SerialSubscription.set(rx.Subscription)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.atomic.AtomicBoolean.getAndSet(Z)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicLong.get()
Também chamam:
java.util.concurrent.atomic.AtomicLong.get()
Confiança: 0.8333341633342132
Suporte: 0.00334672
Posição da Sugestão: 0
**************************
Chamada: onError
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicBoolean.getAndSet(Z)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 0.7499995331247957
Suporte: 0.00401606
Posição da Sugestão: 0
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.SerialSubscription.set(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperatorTimeoutWithSelector.OperatorTimeoutWithSelector(rx.util.functions.Func0, rx.util.functions.Func1, rx.Observable) ************************
*Commit: commit d947c408f26335426c47ee1b1ac96afe65256a01 1392125072 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.util.functions.Func0.call()
throwIfFatal
onError
rx.subscriptions.Subscriptions.empty()
rx.Observable.subscribe(rx.Observer)
onTimeout
onError
onTimeout
rx.subscriptions.Subscriptions.empty()
rx.util.functions.Func1.call(null)
throwIfFatal
onError
rx.subscriptions.Subscriptions.empty()
rx.Observable.subscribe(rx.Observer)
onTimeout
onError
onTimeout
---------------- Chamadas de método adicionadas ---------------
Chamada: throwIfFatal
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func0.call()
rx.subscriptions.Subscriptions.empty()
Também chamam:
rx.Observable.subscribe(rx.Observer)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: onTimeout
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: onTimeout
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.util.functions.Func1.call(null)
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func0.call()
rx.subscriptions.Subscriptions.empty()
Também chamam:
rx.Observable.subscribe(rx.Observer)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: throwIfFatal
** Sugestões fornecidas **
Usuários que chamam:
rx.Observable.subscribe(rx.Observer)
rx.util.functions.Func1.call(null)
Também chamam:
rx.Observer.onNext(null)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 0
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
** Sugestões fornecidas **
Usuários que chamam:
rx.util.functions.Func0.call()
rx.subscriptions.Subscriptions.empty()
Também chamam:
rx.Observable.subscribe(rx.Observer)
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: onTimeout
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: onTimeout
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperatorObserveOn$InterruptibleBlockingQueue.offer(rx.operators.OperatorObserveOn$InterruptibleBlockingQueue$E) ************************
*Commit: commit 5d1006ea07432e34f1ed4b2d75c0024fa8cdae78 1392157101 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.atomic.AtomicLong.get()
java.util.concurrent.atomic.AtomicLong.get()
java.util.concurrent.atomic.AtomicLong.lazySet(J)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.atomic.AtomicLong.get()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicLong.get()
Também chamam:
java.util.concurrent.atomic.AtomicLong.get()
Confiança: 0.8333341633342132
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicLong.lazySet(J)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicLong.get()
Também chamam:
java.util.concurrent.atomic.AtomicLong.get()
Confiança: 0.8333341633342132
Suporte: 0.00334672
Posição da Sugestão: 0
**************************
************************ Método Avaliado: rx.operators.OperatorObserveOn$InterruptibleBlockingQueue.size() ************************
*Commit: commit 5d1006ea07432e34f1ed4b2d75c0024fa8cdae78 1392157101 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.atomic.AtomicLong.get()
java.util.concurrent.atomic.AtomicLong.get()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.atomic.AtomicLong.get()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicLong.get()
Também chamam:
java.util.concurrent.atomic.AtomicLong.get()
Confiança: 0.8333341633342132
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
************************ Método Avaliado: rx.operators.OperatorObserveOn$InterruptibleBlockingQueue.poll() ************************
*Commit: commit 5d1006ea07432e34f1ed4b2d75c0024fa8cdae78 1392157101 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.atomic.AtomicLong.get()
java.util.concurrent.atomic.AtomicLong.get()
java.util.concurrent.atomic.AtomicLong.lazySet(J)
java.util.concurrent.Semaphore.release()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.atomic.AtomicLong.get()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicLong.get()
Também chamam:
java.util.concurrent.atomic.AtomicLong.get()
Confiança: 0.8333341633342132
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicLong.lazySet(J)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicLong.get()
Também chamam:
java.util.concurrent.atomic.AtomicLong.get()
Confiança: 0.8333341633342132
Suporte: 0.00334672
Posição da Sugestão: 0
**************************
Chamada: java.util.concurrent.Semaphore.release()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperatorObserveOnBounded$InterruptibleBlockingQueue.size() ************************
*Commit: commit ac4aed1bdb7a67a3fae70c41549aef7e0d4fc6d1 1392663641 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.atomic.AtomicLong.get()
java.util.concurrent.atomic.AtomicLong.get()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.atomic.AtomicLong.get()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicLong.get()
Também chamam:
java.util.concurrent.atomic.AtomicLong.get()
Confiança: 0.8333341633342132
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
************************ Método Avaliado: rx.operators.OperatorObserveOnBounded$ObserveOnSubscriber.schedule() ************************
*Commit: commit ac4aed1bdb7a67a3fae70c41549aef7e0d4fc6d1 1392663641 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.atomic.AtomicLong.getAndIncrement()
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
add
rx.operators.OperatorObserveOnBounded$InterruptibleBlockingQueue.interrupt()
rx.Scheduler.schedule(rx.util.functions.Action1)
add
rx.operators.OperatorObserveOnBounded$ObserveOnSubscriber.pollQueue()
schedule
rx.operators.OperatorObserveOnBounded$ObserveOnSubscriber.pollQueue()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Nenhuma sugestão fornecida.
**************************
Chamada: add
** Sugestões fornecidas **
Usuários que chamam:
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 0.88888796666722
Suporte: 0.00535475
Posição da Sugestão: 0
**************************
Chamada: rx.operators.OperatorObserveOnBounded$InterruptibleBlockingQueue.interrupt()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Scheduler.schedule(rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: add
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperatorObserveOnBounded$ObserveOnSubscriber.pollQueue()
Nenhuma sugestão fornecida.
**************************
Chamada: schedule
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperatorObserveOnBounded$ObserveOnSubscriber.pollQueue()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperatorObserveOnBounded$InterruptibleBlockingQueue.offer(rx.operators.OperatorObserveOnBounded$InterruptibleBlockingQueue$E) ************************
*Commit: commit ac4aed1bdb7a67a3fae70c41549aef7e0d4fc6d1 1392663641 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.atomic.AtomicLong.get()
java.util.concurrent.atomic.AtomicLong.get()
java.util.concurrent.atomic.AtomicLong.lazySet(J)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.atomic.AtomicLong.get()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicLong.get()
Também chamam:
java.util.concurrent.atomic.AtomicLong.get()
Confiança: 0.8333341633342132
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicLong.lazySet(J)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicLong.get()
Também chamam:
java.util.concurrent.atomic.AtomicLong.get()
Confiança: 0.8333341633342132
Suporte: 0.00334672
Posição da Sugestão: 0
**************************
************************ Método Avaliado: rx.operators.OperatorObserveOnBounded$InterruptibleBlockingQueue.poll() ************************
*Commit: commit ac4aed1bdb7a67a3fae70c41549aef7e0d4fc6d1 1392663641 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.atomic.AtomicLong.get()
java.util.concurrent.atomic.AtomicLong.get()
java.util.concurrent.atomic.AtomicLong.lazySet(J)
java.util.concurrent.Semaphore.release()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.atomic.AtomicLong.get()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicLong.get()
Também chamam:
java.util.concurrent.atomic.AtomicLong.get()
Confiança: 0.8333341633342132
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicLong.lazySet(J)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicLong.get()
Também chamam:
java.util.concurrent.atomic.AtomicLong.get()
Confiança: 0.8333341633342132
Suporte: 0.00334672
Posição da Sugestão: 0
**************************
Chamada: java.util.concurrent.Semaphore.release()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: call ************************
*Commit: commit 873fa75bf80fb6dd05c53d791eac8441147c528b 1392669122 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
add
rx.Scheduler.schedule(rx.util.functions.Action1)
rx.subscriptions.MultipleAssignmentSubscription.set(rx.Subscription)
rx.subscriptions.CompositeSubscription.unsubscribe()
rx.subscriptions.MultipleAssignmentSubscription.unsubscribe()
onCompleted
onError
onNext
---------------- Chamadas de método adicionadas ---------------
Chamada: add
** Sugestões fornecidas **
Usuários que chamam:
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 0.88888796666722
Suporte: 0.00535475
Posição da Sugestão: 0
**************************
Chamada: rx.Scheduler.schedule(rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.MultipleAssignmentSubscription.set(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.CompositeSubscription.unsubscribe()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.MultipleAssignmentSubscription.unsubscribe()
Nenhuma sugestão fornecida.
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: activate ************************
*Commit: commit c20c01e866a7001826c942c631166606c052e9a7 1392670659 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
onErrorFrom
rx.joins.Pattern1.first()
rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
call
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onNext(rx.joins.Plan1$R)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
call
java.util.concurrent.atomic.AtomicReference.set(rx.joins.ActivePlan1)
rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.joins.Pattern1.first()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: call
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(rx.joins.Plan1$R)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
java.util.concurrent.atomic.AtomicReference.get()
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 2
**************************
Chamada: call
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 0
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.set(rx.joins.ActivePlan1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: activate ************************
*Commit: commit c20c01e866a7001826c942c631166606c052e9a7 1392670659 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
onErrorFrom
rx.joins.Pattern2.first()
rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
rx.joins.Pattern2.second()
rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
call
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onNext(rx.joins.Plan2$R)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
call
java.util.concurrent.atomic.AtomicReference.set(rx.joins.ActivePlan2)
rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.joins.Pattern2.first()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Pattern2.second()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: call
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(rx.joins.Plan2$R)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
java.util.concurrent.atomic.AtomicReference.get()
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 2
**************************
Chamada: rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 0
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
java.util.concurrent.atomic.AtomicReference.get()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: call
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.set(rx.joins.ActivePlan2)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: activate ************************
*Commit: commit c20c01e866a7001826c942c631166606c052e9a7 1392670659 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
onErrorFrom
rx.joins.Pattern3.first()
rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
rx.joins.Pattern3.second()
rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
rx.joins.Pattern3.third()
rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
call
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onNext(rx.joins.Plan3$R)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
call
java.util.concurrent.atomic.AtomicReference.set(rx.joins.ActivePlan3)
rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.joins.Pattern3.first()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Pattern3.second()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Pattern3.third()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.Plan0.createObserver(java.util.Map, rx.Observable, rx.util.functions.Action1)
Nenhuma sugestão fornecida.
**************************
Chamada: call
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(rx.joins.Plan3$R)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
java.util.concurrent.atomic.AtomicReference.get()
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 2
**************************
Chamada: rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 0
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
java.util.concurrent.atomic.AtomicReference.get()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
** Sugestões fornecidas **
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
Também chamam:
java.util.concurrent.atomic.AtomicReference.get()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: call
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
java.util.concurrent.atomic.AtomicReference.get()
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
rx.joins.JoinObserver1.removeActivePlan(rx.joins.ActivePlan0)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.util.functions.Action1.call(rx.joins.ActivePlan0)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.set(rx.joins.ActivePlan3)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.joins.JoinObserver1.addActivePlan(rx.joins.ActivePlan0)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: forEach ************************
*Commit: commit c20c01e866a7001826c942c631166606c052e9a7 1392670659 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
protectivelyWrapAndSubscribe
java.util.concurrent.CountDownLatch.countDown()
java.util.concurrent.atomic.AtomicReference.set(java.lang.Throwable)
java.util.concurrent.CountDownLatch.countDown()
call
java.util.concurrent.CountDownLatch.await()
java.lang.Thread.currentThread()
java.lang.Thread.interrupt()
java.util.concurrent.atomic.AtomicReference.get()
java.util.concurrent.atomic.AtomicReference.get()
java.util.concurrent.atomic.AtomicReference.get()
java.util.concurrent.atomic.AtomicReference.get()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.CountDownLatch.countDown()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.set(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.CountDownLatch.countDown()
Nenhuma sugestão fornecida.
**************************
Chamada: call
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.CountDownLatch.await()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Thread.currentThread()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.CountDownLatch.await()
Também chamam:
java.util.concurrent.atomic.AtomicReference.get()
Confiança: 0.8000011952000765
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: java.lang.Thread.interrupt()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Thread.currentThread()
Também chamam:
java.lang.Thread.interrupt()
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: minMaxBy ************************
*Commit: commit c20c01e866a7001826c942c631166606c052e9a7 1392670659 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.reduce(rx.Observable$(Ljava/lang/Object;Lrx/util/functions/Func2;)Lrx/Observable;$R, rx.util.functions.Func2)
java.util.List.isEmpty()
java.util.List.add(rx.operators.OperationMinMax$(Lrx/Observable;LFunc1;Ljava/util/Comparator;J)Lrx/Observable;$T)
java.util.List.get(I)
call
call
java.util.Comparator.compare(null, null)
java.util.List.add(rx.operators.OperationMinMax$(Lrx/Observable;LFunc1;Ljava/util/Comparator;J)Lrx/Observable;$T)
java.util.List.clear()
java.util.List.add(rx.operators.OperationMinMax$(Lrx/Observable;LFunc1;Ljava/util/Comparator;J)Lrx/Observable;$T)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.List.isEmpty()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.add(rx.operators.OperationMinMax$(Lrx/Observable;LFunc1;Ljava/util/Comparator;J)Lrx/Observable;$T)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: call
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.isEmpty()
java.util.List.get(I)
Também chamam:
java.util.List.clear()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: call
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Comparator.compare(null, null)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.add(rx.operators.OperationMinMax$(Lrx/Observable;LFunc1;Ljava/util/Comparator;J)Lrx/Observable;$T)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.clear()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.add(rx.operators.OperationMinMax$(Lrx/Observable;LFunc1;Ljava/util/Comparator;J)Lrx/Observable;$T)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: sequenceEqual ************************
*Commit: commit c20c01e866a7001826c942c631166606c052e9a7 1392670659 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Observable.map(rx.util.functions.Func1)
rx.Observable.from(rx.Notification)
rx.Observable.concat(rx.Observable, rx.Observable)
rx.Observable.map(rx.util.functions.Func1)
rx.Observable.from(rx.Notification)
rx.Observable.concat(rx.Observable, rx.Observable)
rx.Observable.zip(rx.Observable, rx.Observable, rx.util.functions.Func2)
identity
all
rx.Notification.isOnCompleted()
rx.Notification.isOnCompleted()
rx.Notification.isOnCompleted()
rx.Notification.isOnCompleted()
rx.Notification.getValue()
rx.Notification.getValue()
call
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observable.from(rx.Notification)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.concat(rx.Observable, rx.Observable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.map(rx.util.functions.Func1)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.from(rx.Notification)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.concat(rx.Observable, rx.Observable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.zip(rx.Observable, rx.Observable, rx.util.functions.Func2)
Nenhuma sugestão fornecida.
**************************
Chamada: identity
Nenhuma sugestão fornecida.
**************************
Chamada: all
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Notification.isOnCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Notification.isOnCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Notification.isOnCompleted()
** Sugestões fornecidas **
Usuários que chamam:
rx.Notification.isOnCompleted()
rx.Notification.isOnCompleted()
Também chamam:
rx.Notification.getValue()
Confiança: 0.8000011952000765
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Notification.isOnCompleted()
** Sugestões fornecidas **
Usuários que chamam:
rx.Notification.isOnCompleted()
rx.Notification.isOnCompleted()
Também chamam:
rx.Notification.getValue()
Confiança: 0.8000011952000765
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Notification.getValue()
** Sugestões fornecidas **
Usuários que chamam:
rx.Notification.isOnCompleted()
rx.Notification.isOnCompleted()
Também chamam:
rx.Notification.getValue()
Confiança: 0.8000011952000765
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Notification.getValue()
** Sugestões fornecidas **
Usuários que chamam:
rx.Notification.isOnCompleted()
rx.Notification.isOnCompleted()
rx.Notification.getValue()
Também chamam:
rx.Notification.getValue()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: call
** Sugestões fornecidas **
Usuários que chamam:
rx.Notification.isOnCompleted()
rx.Notification.isOnCompleted()
rx.Notification.getValue()
Também chamam:
rx.Notification.getValue()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
************************ Método Avaliado: using ************************
*Commit: commit c20c01e866a7001826c942c631166606c052e9a7 1392670659 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.subscriptions.Subscriptions.empty()
call
call
rx.Observable.subscribe(rx.Observer)
rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
rx.Subscription.unsubscribe()
rx.Observable.error(java.lang.Throwable)
rx.Observable.subscribe(rx.Observer)
---------------- Chamadas de método adicionadas ---------------
Chamada: call
Nenhuma sugestão fornecida.
**************************
Chamada: call
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.SafeObservableSubscription.wrap(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Subscription.unsubscribe()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.error(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observable.subscribe(rx.Observer)
** Sugestões fornecidas **
Usuários que chamam:
rx.Subscription.unsubscribe()
rx.Observable.error(java.lang.Throwable)
Também chamam:
rx.Observable.subscribe(rx.Observer)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
************************ Método Avaliado: rx.observers.SerializedObserver.doIt() ************************
*Commit: commit 34a2561f9010bf81506da54ead6858e77ab5de40 1394728953 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.atomic.AtomicInteger.getAndIncrement()
java.util.concurrent.ConcurrentLinkedQueue.poll()
rx.Observer.onNext(null)
rx.Observer.onCompleted()
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicInteger.decrementAndGet()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.ConcurrentLinkedQueue.poll()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicInteger.getAndIncrement()
Também chamam:
rx.Observer.onNext(null)
Confiança: 0.8000011952000765
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicInteger.decrementAndGet()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onNext(null)
rx.Observer.onCompleted()
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onNext(null)
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onNext(null)
rx.Observer.onCompleted()
rx.Observer.onNext(null)
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00468541
Posição da Sugestão: 0
**************************
************************ Método Avaliado: rx.observers.SerializedObserverViaStateMachine.terminateIfNecessary(rx.observers.SerializedObserverViaStateMachine$State) ************************
*Commit: commit 34a2561f9010bf81506da54ead6858e77ab5de40 1394728953 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.observers.SerializedObserverViaStateMachine$State.isTerminated()
java.util.concurrent.atomic.AtomicReference.get()
rx.observers.SerializedObserverViaStateMachine$State.startTermination()
java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.observers.SerializedObserverViaStateMachine$State, rx.observers.SerializedObserverViaStateMachine$State)
rx.observers.SerializedObserverViaStateMachine$State.shouldProcess()
rx.Observer.onNext(null)
rx.Observer.onCompleted()
rx.Observer.onError(java.lang.Throwable)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.observers.SerializedObserverViaStateMachine$State.startTermination()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.observers.SerializedObserverViaStateMachine$State, rx.observers.SerializedObserverViaStateMachine$State)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.observers.SerializedObserverViaStateMachine$State.shouldProcess()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReference.get()
rx.Observer.onNext(null)
rx.Observer.onCompleted()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
************************ Método Avaliado: rx.observers.SerializedObserverViaStateMachine.onNext(rx.observers.SerializedObserverViaStateMachine$T) ************************
*Commit: commit 34a2561f9010bf81506da54ead6858e77ab5de40 1394728953 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.atomic.AtomicReference.get()
rx.observers.SerializedObserverViaStateMachine$State.isTerminated()
rx.observers.SerializedObserverViaStateMachine$State.offerItem(java.lang.Object)
java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.observers.SerializedObserverViaStateMachine$State, rx.observers.SerializedObserverViaStateMachine$State)
rx.observers.SerializedObserverViaStateMachine$State.shouldProcess()
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
rx.observers.SerializedObserverViaStateMachine$State.finishProcessing(I)
java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.observers.SerializedObserverViaStateMachine$State, rx.observers.SerializedObserverViaStateMachine$State)
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
rx.observers.SerializedObserverViaStateMachine$State.finishProcessing(I)
java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.observers.SerializedObserverViaStateMachine$State, rx.observers.SerializedObserverViaStateMachine$State)
rx.observers.SerializedObserverViaStateMachine.terminateIfNecessary(rx.observers.SerializedObserverViaStateMachine$State)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.observers.SerializedObserverViaStateMachine$State.isTerminated()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.observers.SerializedObserverViaStateMachine$State.offerItem(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.observers.SerializedObserverViaStateMachine$State, rx.observers.SerializedObserverViaStateMachine$State)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.observers.SerializedObserverViaStateMachine$State.shouldProcess()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.observers.SerializedObserverViaStateMachine$State.finishProcessing(I)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.Observer.onCompleted()
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.Observer.onCompleted()
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.observers.SerializedObserverViaStateMachine$State, rx.observers.SerializedObserverViaStateMachine$State)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.observers.SerializedObserverViaStateMachine$State.finishProcessing(I)
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.Observer.onCompleted()
java.util.concurrent.atomic.AtomicReference.getAndSet(rx.operators.SafeObservableSubscription)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.operators.SafeObservableSubscription.unsubscribe()
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
rx.Observer.onNext(null)
java.util.concurrent.atomic.AtomicReference.get()
Também chamam:
rx.Observer.onCompleted()
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.observers.SerializedObserverViaStateMachine$State, rx.observers.SerializedObserverViaStateMachine$State)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.observers.SerializedObserverViaStateMachine.terminateIfNecessary(rx.observers.SerializedObserverViaStateMachine$State)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: call ************************
*Commit: commit 07e27697dc51ffa4c26f9e20a427d9900bf6b0b9 1395764524 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.operators.OperatorPivot$State.create()
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
add
java.util.concurrent.atomic.AtomicReference.get()
rx.operators.OperatorPivot$State.unsubscribe()
java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.operators.OperatorPivot$State, rx.operators.OperatorPivot$State)
rx.operators.OperatorPivot$State.shouldComplete()
rx.operators.OperatorPivot$GroupState.completeAll(rx.operators.OperatorPivot$State)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Nenhuma sugestão fornecida.
**************************
Chamada: add
** Sugestões fornecidas **
Usuários que chamam:
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 0.88888796666722
Suporte: 0.00535475
Posição da Sugestão: 0
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperatorPivot$State.unsubscribe()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.compareAndSet(rx.operators.OperatorPivot$State, rx.operators.OperatorPivot$State)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperatorPivot$State.shouldComplete()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperatorPivot$GroupState.completeAll(rx.operators.OperatorPivot$State)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperatorPivot$Inner.create(rx.operators.OperatorPivot$GroupState, java.util.concurrent.atomic.AtomicReference, rx.operators.OperatorPivot$Outer, rx.operators.OperatorPivot$KeyPair) ************************
*Commit: commit 07e27697dc51ffa4c26f9e20a427d9900bf6b0b9 1395764524 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
create
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
add
rx.operators.OperatorPivot$GroupState.completeK1K2Group(java.util.concurrent.atomic.AtomicReference, rx.operators.OperatorPivot$KeyPair)
subscribe
rx.operators.OperatorPivot$GroupState.completeK1K2Group(java.util.concurrent.atomic.AtomicReference, rx.operators.OperatorPivot$KeyPair)
onCompleted
onError
isUnsubscribed
onNext
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Nenhuma sugestão fornecida.
**************************
Chamada: add
** Sugestões fornecidas **
Usuários que chamam:
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 0.88888796666722
Suporte: 0.00535475
Posição da Sugestão: 0
**************************
Chamada: rx.operators.OperatorPivot$GroupState.completeK1K2Group(java.util.concurrent.atomic.AtomicReference, rx.operators.OperatorPivot$KeyPair)
Nenhuma sugestão fornecida.
**************************
Chamada: subscribe
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperatorPivot$GroupState.completeK1K2Group(java.util.concurrent.atomic.AtomicReference, rx.operators.OperatorPivot$KeyPair)
Nenhuma sugestão fornecida.
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: isUnsubscribed
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.schedulers.SleepingAction.call() ************************
*Commit: commit cbc1c6b58f2148f47f5e4a1cc8d2d060909dc75c 1397791721 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
isUnsubscribed
now
now
java.lang.Thread.sleep(J)
java.lang.Thread.currentThread()
java.lang.Thread.interrupt()
isUnsubscribed
call
---------------- Chamadas de método adicionadas ---------------
Chamada: now
Nenhuma sugestão fornecida.
**************************
Chamada: now
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Thread.sleep(J)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Thread.currentThread()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Thread.interrupt()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Thread.currentThread()
Também chamam:
java.lang.Thread.interrupt()
Confiança: 1.0
Suporte: 0.00401606
Posição da Sugestão: 1
**************************
Chamada: isUnsubscribed
Nenhuma sugestão fornecida.
**************************
Chamada: call
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperatorConcat$ConcatSubscriber.onNext(rx.Observable) ************************
*Commit: commit a8c1e3c8ee14b612bfc086ee9cad2c78151837af 1398258407 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
next
java.util.concurrent.ConcurrentLinkedQueue.add(java.lang.Object)
java.util.concurrent.atomic.AtomicInteger.getAndIncrement()
rx.operators.OperatorConcat$ConcatSubscriber.subscribeNext()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.ConcurrentLinkedQueue.add(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicInteger.getAndIncrement()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperatorConcat$ConcatSubscriber.subscribeNext()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicInteger.getAndIncrement()
Também chamam:
rx.Observer.onNext(null)
Confiança: 0.8000011952000765
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicInteger.getAndIncrement()
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 0.8000011952000765
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
************************ Método Avaliado: ConcatSubscriber ************************
*Commit: commit a8c1e3c8ee14b612bfc086ee9cad2c78151837af 1398258407 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
add
java.util.AbstractQueue.clear()
---------------- Chamadas de método adicionadas ---------------
Chamada: add
** Sugestões fornecidas **
Usuários que chamam:
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 0.88888796666722
Suporte: 0.00535475
Posição da Sugestão: 0
**************************
Chamada: java.util.AbstractQueue.clear()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperatorConcat$ConcatSubscriber.onCompleted() ************************
*Commit: commit a8c1e3c8ee14b612bfc086ee9cad2c78151837af 1398258407 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
completed
java.util.concurrent.ConcurrentLinkedQueue.add(java.lang.Object)
java.util.concurrent.atomic.AtomicInteger.getAndIncrement()
rx.operators.OperatorConcat$ConcatSubscriber.subscribeNext()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.ConcurrentLinkedQueue.add(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicInteger.getAndIncrement()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperatorConcat$ConcatSubscriber.subscribeNext()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicInteger.getAndIncrement()
Também chamam:
rx.Observer.onNext(null)
Confiança: 0.8000011952000765
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicInteger.getAndIncrement()
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 0.8000011952000765
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
************************ Método Avaliado: call ************************
*Commit: commit 817fb3ad57ece39e3e9493f8bc1c0fc22757b297 1398333038 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.List.isEmpty()
onCompleted
java.util.List.size()
java.util.List.get(I)
unsafeSubscribe
call
onNext
onError
onCompleted
java.util.List.size()
java.util.List.size()
java.util.List.size()
add
java.util.List.add(rx.operators.OperatorCombineLatest$SourceSubscriber)
java.util.List.size()
isUnsubscribed
java.util.List.get(I)
java.util.List.get(I)
unsafeSubscribe
---------------- Chamadas de método adicionadas ---------------
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: unsafeSubscribe
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.isEmpty()
java.util.List.get(I)
Também chamam:
java.util.List.clear()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: call
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: add
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.add(rx.operators.OperatorCombineLatest$SourceSubscriber)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: isUnsubscribed
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.isEmpty()
java.util.List.get(I)
Também chamam:
java.util.List.clear()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: unsafeSubscribe
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.isEmpty()
java.util.List.get(I)
Também chamam:
java.util.List.clear()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
************************ Método Avaliado: call ************************
*Commit: commit 08085ac4ebb4a2e5bb65abc016677e47d092b9b6 1398345306 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.Notification.getKind()
rx.Notification.getValue()
onNext
rx.Notification.getThrowable()
null.onError(java.lang.Throwable)
null.onCompleted()
onError
onCompleted
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Notification.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
** Sugestões fornecidas **
Usuários que chamam:
rx.Notification.getKind()
rx.Notification.getValue()
Também chamam:
rx.Notification.getThrowable()
Confiança: 1.0
Suporte: 0.00334672
Posição da Sugestão: 1
**************************
Chamada: rx.Notification.getThrowable()
Nenhuma sugestão fornecida.
**************************
Chamada: null.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: null.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: call ************************
*Commit: commit bf976a2683fdef06fcbaff8e12edcc80c27f86bf 1398353124 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
add
java.util.concurrent.Future.cancel(Z)
java.util.concurrent.Future.get()
java.util.concurrent.Future.get(J, java.util.concurrent.TimeUnit)
onNext
onCompleted
onError
---------------- Chamadas de método adicionadas ---------------
Chamada: add
** Sugestões fornecidas **
Usuários que chamam:
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 0.88888796666722
Suporte: 0.00535475
Posição da Sugestão: 0
**************************
Chamada: java.util.concurrent.Future.cancel(Z)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.Future.get()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.Future.get(J, java.util.concurrent.TimeUnit)
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
Nenhuma sugestão fornecida.
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperatorJoin$ResultSink$LeftSubscriber.onCompleted() ************************
*Commit: commit cc1776de75dc18e8280f6c88b78e1898df311520 1398444772 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.isEmpty()
onCompleted
unsubscribe
rx.subscriptions.CompositeSubscription.remove(rx.Subscription)
---------------- Chamadas de método adicionadas ---------------
Chamada: onCompleted
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.isEmpty()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.isEmpty()
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.isEmpty()
Também chamam:
rx.Observer.onCompleted()
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: unsubscribe
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.CompositeSubscription.remove(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperatorJoin$ResultSink$RightSubscriber.expire(I, rx.Subscription) ************************
*Commit: commit cc1776de75dc18e8280f6c88b78e1898df311520 1398444772 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.remove(java.lang.Object)
java.util.Map.isEmpty()
onCompleted
unsubscribe
rx.subscriptions.CompositeSubscription.remove(rx.Subscription)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map.isEmpty()
Nenhuma sugestão fornecida.
**************************
Chamada: onCompleted
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.isEmpty()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.isEmpty()
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.isEmpty()
Também chamam:
rx.Observer.onCompleted()
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: unsubscribe
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.CompositeSubscription.remove(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperatorJoin$ResultSink$LeftSubscriber.expire(I, rx.Subscription) ************************
*Commit: commit cc1776de75dc18e8280f6c88b78e1898df311520 1398444772 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.remove(java.lang.Object)
java.util.Map.isEmpty()
onCompleted
unsubscribe
rx.subscriptions.CompositeSubscription.remove(rx.Subscription)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map.isEmpty()
Nenhuma sugestão fornecida.
**************************
Chamada: onCompleted
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.isEmpty()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.isEmpty()
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.isEmpty()
Também chamam:
rx.Observer.onCompleted()
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: unsubscribe
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.CompositeSubscription.remove(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperatorJoin$ResultSink$RightSubscriber.onCompleted() ************************
*Commit: commit cc1776de75dc18e8280f6c88b78e1898df311520 1398444772 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.isEmpty()
onCompleted
unsubscribe
rx.subscriptions.CompositeSubscription.remove(rx.Subscription)
---------------- Chamadas de método adicionadas ---------------
Chamada: onCompleted
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.isEmpty()
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.isEmpty()
Também chamam:
rx.Observer.onCompleted()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.isEmpty()
Também chamam:
rx.Observer.onCompleted()
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: unsubscribe
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.CompositeSubscription.remove(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperatorMulticast.connect() ************************
*Commit: commit 96f4b664bdd0a42222bcacd73f7ee618ca006508 1398462165 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
unsafeSubscribe
rx.Observer.onCompleted()
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onNext(null)
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
rx.Subscription.unsubscribe()
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Subscription.unsubscribe()
** Sugestões fornecidas **
Usuários que chamam:
rx.Observer.onError(java.lang.Throwable)
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
************************ Método Avaliado: call ************************
*Commit: commit 7484fc9af70bea89181782d2d4a8428e72f731fa 1398465771 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
onNext
call
onNext
java.util.Arrays.asList([Ljava.lang.Throwable;)
onError
onCompleted
onCompleted
---------------- Chamadas de método adicionadas ---------------
Chamada: call
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Arrays.asList([Ljava.lang.Throwable;)
Nenhuma sugestão fornecida.
**************************
Chamada: onError
** Sugestões fornecidas **
Usuários que chamam:
java.util.Arrays.asList([Ljava.lang.Throwable;)
Também chamam:
rx.Observer.onError(java.lang.Throwable)
Confiança: 0.8000011952000765
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: call ************************
*Commit: commit fc7f077686085b3089dcf949bcdbac2ff78cf891 1398671205 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
add
rx.Subscription.unsubscribe()
unsafeSubscribe
rx.observables.ConnectableObservable.connect()
---------------- Chamadas de método adicionadas ---------------
Chamada: add
** Sugestões fornecidas **
Usuários que chamam:
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 0.88888796666722
Suporte: 0.00535475
Posição da Sugestão: 1
**************************
Chamada: rx.Subscription.unsubscribe()
Nenhuma sugestão fornecida.
**************************
Chamada: unsafeSubscribe
Nenhuma sugestão fornecida.
**************************
Chamada: rx.observables.ConnectableObservable.connect()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: call ************************
*Commit: commit 21578d5d06523542516b027e6927faa569a33ffd 1398863792 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.atomic.AtomicBoolean.compareAndSet(Z, Z)
java.util.concurrent.atomic.AtomicReference.get()
java.util.concurrent.ConcurrentLinkedQueue.poll()
accept
java.util.concurrent.atomic.AtomicReference.set(rx.Observer)
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
add
empty
java.util.concurrent.atomic.AtomicReference.set(rx.Observer)
add
onError
onCompleted
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
add
remove
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.atomic.AtomicReference.get()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.ConcurrentLinkedQueue.poll()
Nenhuma sugestão fornecida.
**************************
Chamada: accept
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.set(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Nenhuma sugestão fornecida.
**************************
Chamada: add
** Sugestões fornecidas **
Usuários que chamam:
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 0.88888796666722
Suporte: 0.00535475
Posição da Sugestão: 0
**************************
Chamada: empty
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReference.set(rx.Observer)
Nenhuma sugestão fornecida.
**************************
Chamada: add
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Nenhuma sugestão fornecida.
**************************
Chamada: add
** Sugestões fornecidas **
Usuários que chamam:
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 0.88888796666722
Suporte: 0.00535475
Posição da Sugestão: 0
**************************
Chamada: remove
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: scheduleActual ************************
*Commit: commit 8fa3a37420c3bcca5ed8355a09cd67b75ae6665e 1399363660 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.ExecutorService.submit(java.lang.Runnable)
java.util.concurrent.ScheduledExecutorService.schedule(java.lang.Runnable, J, java.util.concurrent.TimeUnit)
rx.subscriptions.Subscriptions.from(java.util.concurrent.Future)
rx.schedulers.NewThreadScheduler$NewThreadWorker$ScheduledAction.add(rx.Subscription)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.ScheduledExecutorService.schedule(java.lang.Runnable, J, java.util.concurrent.TimeUnit)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.from(java.util.concurrent.Future)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.ScheduledExecutorService.schedule(java.lang.Runnable, J, java.util.concurrent.TimeUnit)
Também chamam:
rx.subscriptions.Subscriptions.from(java.util.concurrent.Future)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.schedulers.NewThreadScheduler$NewThreadWorker$ScheduledAction.add(rx.Subscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.subscriptions.Subscriptions.from(java.util.concurrent.Future)
Também chamam:
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Confiança: 0.7142854093878658
Suporte: 0.00334672
Posição da Sugestão: 0
**************************
************************ Método Avaliado: connect ************************
*Commit: commit 3e58d902fb08fb87059d7a017b352885dd24f4ba 1399585072 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
call
rx.Subscription.unsubscribe()
rx.Observer.onCompleted()
rx.Observer.onError(java.lang.Throwable)
rx.Observer.onNext(null)
unsafeSubscribe
---------------- Chamadas de método adicionadas ---------------
Chamada: call
** Sugestões fornecidas **
Usuários que chamam:
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 0.88888796666722
Suporte: 0.00535475
Posição da Sugestão: 1
**************************
Chamada: rx.Subscription.unsubscribe()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onCompleted()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.Observer.onNext(null)
Nenhuma sugestão fornecida.
**************************
Chamada: unsafeSubscribe
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: addUnsubscriber ************************
*Commit: commit 265090cf3b1433a0ccaa19f5348189ceafa6a66c 1399658683 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
add
rx.subjects.BehaviorSubject$State.remove(rx.subjects.BehaviorSubject$BehaviorObserver)
---------------- Chamadas de método adicionadas ---------------
Chamada: add
** Sugestões fornecidas **
Usuários que chamam:
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 0.88888796666722
Suporte: 0.00535475
Posição da Sugestão: 0
**************************
Chamada: rx.subjects.BehaviorSubject$State.remove(rx.subjects.BehaviorSubject$BehaviorObserver)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: addUnsubscriber ************************
*Commit: commit 1b88781653cde78650f34eabe1f07e53560b0880 1399674631 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
add
rx.subjects.SubjectSubscriptionManager.remove(rx.subjects.SubjectSubscriptionManager$SubjectObserver)
call
---------------- Chamadas de método adicionadas ---------------
Chamada: add
** Sugestões fornecidas **
Usuários que chamam:
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 0.88888796666722
Suporte: 0.00535475
Posição da Sugestão: 0
**************************
Chamada: rx.subjects.SubjectSubscriptionManager.remove(rx.subjects.SubjectSubscriptionManager$SubjectObserver)
Nenhuma sugestão fornecida.
**************************
Chamada: call
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: rx.operators.OperatorGroupBy$GroupBySubscriber.onNext(rx.operators.OperatorGroupBy$GroupBySubscriber$T) ************************
*Commit: commit 8b8c72113f277c21d413fc52868a1c6a6c4dd0ab 1400757859 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
call
get
isUnsubscribed
create
java.util.concurrent.atomic.AtomicIntegerFieldUpdater.incrementAndGet(rx.operators.OperatorGroupBy$GroupBySubscriber)
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
add
rx.operators.OperatorGroupBy$GroupBySubscriber.completeInner()
unsafeSubscribe
onCompleted
rx.operators.OperatorGroupBy$GroupBySubscriber.completeInner()
onError
onNext
put
onNext
onNext
addValueAsLastCause
rx.operators.OperatorGroupBy$GroupBySubscriber.onError(java.lang.Throwable)
---------------- Chamadas de método adicionadas ---------------
Chamada: get
Nenhuma sugestão fornecida.
**************************
Chamada: isUnsubscribed
Nenhuma sugestão fornecida.
**************************
Chamada: create
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicIntegerFieldUpdater.incrementAndGet(rx.operators.OperatorGroupBy$GroupBySubscriber)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Nenhuma sugestão fornecida.
**************************
Chamada: add
** Sugestões fornecidas **
Usuários que chamam:
rx.subscriptions.Subscriptions.create(rx.util.functions.Action0)
Também chamam:
rx.Subscription.unsubscribe()
Confiança: 0.88888796666722
Suporte: 0.00535475
Posição da Sugestão: 0
**************************
Chamada: rx.operators.OperatorGroupBy$GroupBySubscriber.completeInner()
Nenhuma sugestão fornecida.
**************************
Chamada: unsafeSubscribe
Nenhuma sugestão fornecida.
**************************
Chamada: onCompleted
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperatorGroupBy$GroupBySubscriber.completeInner()
Nenhuma sugestão fornecida.
**************************
Chamada: onError
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
Nenhuma sugestão fornecida.
**************************
Chamada: put
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
Nenhuma sugestão fornecida.
**************************
Chamada: onNext
Nenhuma sugestão fornecida.
**************************
Chamada: addValueAsLastCause
Nenhuma sugestão fornecida.
**************************
Chamada: rx.operators.OperatorGroupBy$GroupBySubscriber.onError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: schedule ************************
*Commit: commit 68b0ae67113f611f7427b3eb9ed22f706dc8b63e 1401269604 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
schedule
rx.schedulers.ExecutorScheduler$ExecutorSchedulerWorker.isUnsubscribed()
rx.subscriptions.Subscriptions.empty()
rx.schedulers.GenericScheduledExecutorService.getInstance()
java.util.concurrent.ScheduledExecutorService.schedule(java.lang.Runnable, J, java.util.concurrent.TimeUnit)
rx.subscriptions.MultipleAssignmentSubscription.isUnsubscribed()
schedule
rx.subscriptions.MultipleAssignmentSubscription.set(rx.Subscription)
rx.subscriptions.Subscriptions.from(java.util.concurrent.Future)
rx.subscriptions.MultipleAssignmentSubscription.set(rx.Subscription)
rx.plugins.RxJavaPlugins.getInstance()
rx.plugins.RxJavaPlugins.getErrorHandler()
rx.plugins.RxJavaErrorHandler.handleError(java.lang.Throwable)
---------------- Chamadas de método adicionadas ---------------
Chamada: rx.schedulers.ExecutorScheduler$ExecutorSchedulerWorker.isUnsubscribed()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.empty()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.schedulers.GenericScheduledExecutorService.getInstance()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.ScheduledExecutorService.schedule(java.lang.Runnable, J, java.util.concurrent.TimeUnit)
** Sugestões fornecidas **
Usuários que chamam:
rx.schedulers.GenericScheduledExecutorService.getInstance()
Também chamam:
java.util.concurrent.ScheduledExecutorService.schedule(java.lang.Runnable, J, java.util.concurrent.TimeUnit)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: rx.subscriptions.MultipleAssignmentSubscription.isUnsubscribed()
** Sugestões fornecidas **
Usuários que chamam:
rx.schedulers.GenericScheduledExecutorService.getInstance()
java.util.concurrent.ScheduledExecutorService.schedule(java.lang.Runnable, J, java.util.concurrent.TimeUnit)
Também chamam:
rx.subscriptions.Subscriptions.from(java.util.concurrent.Future)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 1
**************************
Chamada: schedule
** Sugestões fornecidas **
Usuários que chamam:
rx.subscriptions.MultipleAssignmentSubscription.isUnsubscribed()
Também chamam:
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Confiança: 1.0
Suporte: 0.00267738
Posição da Sugestão: 0
**************************
Chamada: rx.subscriptions.MultipleAssignmentSubscription.set(rx.Subscription)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.Subscriptions.from(java.util.concurrent.Future)
Nenhuma sugestão fornecida.
**************************
Chamada: rx.subscriptions.MultipleAssignmentSubscription.set(rx.Subscription)
** Sugestões fornecidas **
Usuários que chamam:
rx.subscriptions.Subscriptions.from(java.util.concurrent.Future)
Também chamam:
rx.subscriptions.CompositeSubscription.add(rx.Subscription)
Confiança: 0.7142854093878658
Suporte: 0.00334672
Posição da Sugestão: 0
**************************
Chamada: rx.plugins.RxJavaPlugins.getInstance()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.plugins.RxJavaPlugins.getErrorHandler()
Nenhuma sugestão fornecida.
**************************
Chamada: rx.plugins.RxJavaErrorHandler.handleError(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
