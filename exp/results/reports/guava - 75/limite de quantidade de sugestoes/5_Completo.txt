************************ Método Avaliado: com.google.common.hash.HashingInputStream.HashingInputStream(com.google.common.hash.HashFunction, java.io.InputStream) ************************
*Commit: commit 1b890d1bd2937634df2c5d57e5d649cca7f16ef3 1387492636 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.io.InputStream)
com.google.common.hash.HashFunction.newHasher()
com.google.common.base.Preconditions.checkNotNull(com.google.common.hash.Hasher)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.hash.HashFunction.newHasher()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkNotNull(com.google.common.hash.Hasher)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.hash.HashFunction.newHasher()
Também chamam:
com.google.common.hash.Hasher.hash()
Confiança: 0.8
Suporte: 6.62252E-4
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.hash.HashingOutputStream.HashingOutputStream(com.google.common.hash.HashFunction, java.io.OutputStream) ************************
*Commit: commit 1b890d1bd2937634df2c5d57e5d649cca7f16ef3 1387492636 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.io.OutputStream)
com.google.common.hash.HashFunction.newHasher()
com.google.common.base.Preconditions.checkNotNull(com.google.common.hash.Hasher)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.hash.HashFunction.newHasher()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkNotNull(com.google.common.hash.Hasher)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.hash.HashFunction.newHasher()
Também chamam:
com.google.common.hash.Hasher.hash()
Confiança: 0.8
Suporte: 6.62252E-4
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.base.Converter$FunctionBasedConverter.hashCode() ************************
*Commit: commit 4ab391e4924ef436da8e3d1363bc5d57e3b75514 1388431714 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.Object.hashCode()
java.lang.Object.hashCode()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.Object.hashCode()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.hashCode()
Também chamam:
java.lang.Object.hashCode()
Confiança: 0.21311491642028094
Suporte: 0.00107616
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.base.Converter$FunctionBasedConverter.FunctionBasedConverter(com.google.common.base.Function, com.google.common.base.Function) ************************
*Commit: commit 4ab391e4924ef436da8e3d1363bc5d57e3b75514 1388431714 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Function)
com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Function)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Function)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Function)
Também chamam:
com.google.common.base.Function.apply(null)
Confiança: 0.2692304118346714
Suporte: 5.7947E-4
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.util.concurrent.Striped$LargeLazyStriped.getAt(I) ************************
*Commit: commit 6a122f12efebc6c79e539b2ede91514eb2e21103 1390610337 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.util.concurrent.Striped$LargeLazyStriped.size()
com.google.common.base.Preconditions.checkElementIndex(I, I)
java.util.Map.get(java.lang.Object)
com.google.common.base.Supplier.get()
java.util.concurrent.ConcurrentMap.putIfAbsent(java.lang.Integer, com.google.common.util.concurrent.Striped$LargeLazyStriped$L)
com.google.common.base.Objects.firstNonNull(com.google.common.util.concurrent.Striped$LargeLazyStriped$L, com.google.common.util.concurrent.Striped$LargeLazyStriped$L)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkElementIndex(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.get(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkElementIndex(I, I)
Também chamam:
java.util.List.get(I)
Confiança: 0.2500001677779157
Suporte: 7.45033E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkElementIndex(I, I)
Também chamam:
java.util.List.get(I)
java.util.List.get(I)
Confiança: 0.19444453765439762
Suporte: 5.7947E-4
Posição da Sugestão: 0
**************************
Chamada: com.google.common.base.Supplier.get()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.ConcurrentMap.putIfAbsent(java.lang.Integer, com.google.common.util.concurrent.Striped$LargeLazyStriped$L)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Objects.firstNonNull(com.google.common.util.concurrent.Striped$LargeLazyStriped$L, com.google.common.util.concurrent.Striped$LargeLazyStriped$L)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.util.concurrent.Striped$SmallLazyStriped.getAt(I) ************************
*Commit: commit 6a122f12efebc6c79e539b2ede91514eb2e21103 1390610337 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.util.concurrent.Striped$SmallLazyStriped.size()
com.google.common.base.Preconditions.checkElementIndex(I, I)
java.util.concurrent.atomic.AtomicReferenceArray.get(I)
java.lang.ref.Reference.get()
com.google.common.base.Supplier.get()
java.util.concurrent.atomic.AtomicReferenceArray.compareAndSet(I, com.google.common.util.concurrent.Striped$SmallLazyStriped$ArrayReference, com.google.common.util.concurrent.Striped$SmallLazyStriped$ArrayReference)
java.util.concurrent.atomic.AtomicReferenceArray.get(I)
java.lang.ref.Reference.get()
com.google.common.util.concurrent.Striped$SmallLazyStriped.drainQueue()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkElementIndex(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReferenceArray.get(I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkElementIndex(I, I)
Também chamam:
java.util.List.get(I)
Confiança: 0.2500001677779157
Suporte: 7.45033E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkElementIndex(I, I)
Também chamam:
java.util.List.get(I)
java.util.List.get(I)
Confiança: 0.19444453765439762
Suporte: 5.7947E-4
Posição da Sugestão: 0
**************************
Chamada: java.lang.ref.Reference.get()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReferenceArray.get(I)
Também chamam:
java.util.concurrent.locks.ReentrantLock.unlock()
Confiança: 0.6470579875433903
Suporte: 0.00182119
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReferenceArray.get(I)
Também chamam:
com.google.common.base.Equivalence.equivalent(java.lang.Object, java.lang.Object)
Confiança: 0.6470579875433903
Suporte: 0.00182119
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReferenceArray.get(I)
Também chamam:
com.google.common.base.Equivalence.equivalent(java.lang.Object, java.lang.Object)
java.util.concurrent.locks.ReentrantLock.unlock()
Confiança: 0.5294130186849145
Suporte: 0.00149007
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReferenceArray.get(I)
Também chamam:
com.google.common.cache.LocalCache$ReferenceEntry.getNext()
Confiança: 0.47058698131508536
Suporte: 0.0013245
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReferenceArray.get(I)
Também chamam:
com.google.common.collect.MapMakerInternalMap$ReferenceEntry.getNext()
Confiança: 0.41176449688584754
Suporte: 0.00115894
Posição da Sugestão: 0
**************************
Chamada: com.google.common.base.Supplier.get()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReferenceArray.compareAndSet(I, com.google.common.util.concurrent.Striped$SmallLazyStriped$ArrayReference, com.google.common.util.concurrent.Striped$SmallLazyStriped$ArrayReference)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReferenceArray.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.ref.Reference.get()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.atomic.AtomicReferenceArray.get(I)
Também chamam:
java.util.concurrent.locks.ReentrantLock.unlock()
Confiança: 0.6470579875433903
Suporte: 0.00182119
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReferenceArray.get(I)
Também chamam:
com.google.common.base.Equivalence.equivalent(java.lang.Object, java.lang.Object)
Confiança: 0.6470579875433903
Suporte: 0.00182119
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReferenceArray.get(I)
Também chamam:
com.google.common.base.Equivalence.equivalent(java.lang.Object, java.lang.Object)
java.util.concurrent.locks.ReentrantLock.unlock()
Confiança: 0.5294130186849145
Suporte: 0.00149007
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReferenceArray.get(I)
Também chamam:
com.google.common.cache.LocalCache$ReferenceEntry.getNext()
Confiança: 0.47058698131508536
Suporte: 0.0013245
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.atomic.AtomicReferenceArray.get(I)
Também chamam:
com.google.common.collect.MapMakerInternalMap$ReferenceEntry.getNext()
Confiança: 0.41176449688584754
Suporte: 0.00115894
Posição da Sugestão: 0
**************************
Chamada: com.google.common.util.concurrent.Striped$SmallLazyStriped.drainQueue()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.primitives.Ints.tryParse(java.lang.String, I) ************************
*Commit: commit af5afeffaddbd3de5b44d3f1b49c2462e19795f8 1391193115 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
java.lang.String.isEmpty()
java.lang.String.charAt(I)
java.lang.String.length()
java.lang.String.charAt(I)
com.google.common.primitives.Ints.digit(C)
java.lang.String.length()
java.lang.String.charAt(I)
com.google.common.primitives.Ints.digit(C)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.String.isEmpty()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.String.length()
Confiança: 0.2539677061222611
Suporte: 0.0013245
Posição da Sugestão: 1
**************************
Chamada: java.lang.String.charAt(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.length()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.charAt(I)
Também chamam:
java.lang.String.length()
Confiança: 0.2258059488042771
Suporte: 5.7947E-4
Posição da Sugestão: 1
**************************
Chamada: java.lang.String.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.5625013212533031
Suporte: 7.45033E-4
Posição da Sugestão: 1
**************************
Chamada: com.google.common.primitives.Ints.digit(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
java.lang.String.charAt(I)
Também chamam:
java.lang.String.length()
Confiança: 0.2592590935528612
Suporte: 5.7947E-4
Posição da Sugestão: 1
**************************
Chamada: java.lang.String.length()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.5625013212533031
Suporte: 7.45033E-4
Posição da Sugestão: 1
**************************
Chamada: com.google.common.primitives.Ints.digit(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
java.lang.String.charAt(I)
Também chamam:
java.lang.String.length()
Confiança: 0.2592590935528612
Suporte: 5.7947E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.String.charAt(I)
Também chamam:
java.lang.String.length()
Confiança: 0.2258059488042771
Suporte: 5.7947E-4
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.reflect.TypeResolver$TypeMappingIntrospector.map(com.google.common.reflect.TypeResolver$TypeVariableKey, java.lang.reflect.Type) ************************
*Commit: commit 5f913f5e6411698a4e50a0593ea4db4632e2c912 1391449378 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.containsKey(java.lang.Object)
com.google.common.reflect.TypeResolver$TypeVariableKey.forLookup(java.lang.reflect.Type)
java.util.Map.get(java.lang.Object)
com.google.common.reflect.TypeResolver$TypeVariableKey.equalsType(java.lang.reflect.Type)
com.google.common.reflect.TypeResolver$TypeVariableKey.forLookup(java.lang.reflect.Type)
java.util.Map.remove(java.lang.Object)
java.util.Map.put(com.google.common.reflect.TypeResolver$TypeVariableKey, java.lang.reflect.Type)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.reflect.TypeResolver$TypeVariableKey.forLookup(java.lang.reflect.Type)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.containsKey(java.lang.Object)
Também chamam:
java.util.Map.get(java.lang.Object)
Confiança: 0.21621660447091165
Suporte: 6.62252E-4
Posição da Sugestão: 1
**************************
Chamada: java.util.Map.get(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.reflect.TypeResolver$TypeVariableKey.equalsType(java.lang.reflect.Type)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.reflect.TypeResolver$TypeVariableKey.forLookup(java.lang.reflect.Type)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.remove(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.put(com.google.common.reflect.TypeResolver$TypeVariableKey, java.lang.reflect.Type)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.reflect.TypeResolver$TypeVariableKey.equalsTypeVariable(java.lang.reflect.TypeVariable) ************************
*Commit: commit 5f913f5e6411698a4e50a0593ea4db4632e2c912 1391449378 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.reflect.TypeVariable.getGenericDeclaration()
java.lang.reflect.TypeVariable.getGenericDeclaration()
java.lang.Object.equals(java.lang.Object)
java.lang.reflect.TypeVariable.getName()
java.lang.reflect.TypeVariable.getName()
java.lang.String.equals(java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.reflect.TypeVariable.getGenericDeclaration()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Object.equals(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.reflect.TypeVariable.getName()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.equals(java.lang.Object)
Também chamam:
java.lang.Object.equals(java.lang.Object)
Confiança: 0.15151512378330692
Suporte: 8.27815E-4
Posição da Sugestão: 0
**************************
Chamada: java.lang.reflect.TypeVariable.getName()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.equals(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.reflect.TypeResolver.resolveWildcardType(java.lang.reflect.WildcardType) ************************
*Commit: commit 5f913f5e6411698a4e50a0593ea4db4632e2c912 1391449378 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.reflect.WildcardType.getLowerBounds()
java.lang.reflect.WildcardType.getUpperBounds()
com.google.common.reflect.TypeResolver.resolveTypes([Ljava.lang.reflect.Type;)
com.google.common.reflect.TypeResolver.resolveTypes([Ljava.lang.reflect.Type;)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.reflect.WildcardType.getUpperBounds()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.reflect.WildcardType.getLowerBounds()
Também chamam:
java.lang.reflect.WildcardType.getUpperBounds()
Confiança: 0.6000000000000001
Suporte: 4.96689E-4
Posição da Sugestão: 1
**************************
Chamada: com.google.common.reflect.TypeResolver.resolveTypes([Ljava.lang.reflect.Type;)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.reflect.TypeResolver.resolveTypes([Ljava.lang.reflect.Type;)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.util.concurrent.MoreExecutors.shutdownAndAwaitTermination(java.util.concurrent.ExecutorService, J, java.util.concurrent.TimeUnit) ************************
*Commit: commit ff9bf6d8eee80fcee46bdb3da4fdbd00d8381d44 1392320001 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.util.concurrent.TimeUnit)
java.util.concurrent.ExecutorService.shutdown()
java.util.concurrent.TimeUnit.convert(J, java.util.concurrent.TimeUnit)
java.util.concurrent.ExecutorService.awaitTermination(J, java.util.concurrent.TimeUnit)
java.util.concurrent.ExecutorService.shutdownNow()
java.util.concurrent.ExecutorService.awaitTermination(J, java.util.concurrent.TimeUnit)
java.lang.Thread.currentThread()
java.lang.Thread.interrupt()
java.util.concurrent.ExecutorService.shutdownNow()
java.util.concurrent.ExecutorService.isTerminated()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.ExecutorService.shutdown()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.TimeUnit.convert(J, java.util.concurrent.TimeUnit)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.ExecutorService.awaitTermination(J, java.util.concurrent.TimeUnit)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.ExecutorService.shutdownNow()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.ExecutorService.awaitTermination(J, java.util.concurrent.TimeUnit)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Thread.currentThread()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Thread.interrupt()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Thread.currentThread()
Também chamam:
java.lang.Thread.interrupt()
Confiança: 0.7999990336016699
Suporte: 0.00165563
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.ExecutorService.shutdownNow()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.ExecutorService.isTerminated()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.util.concurrent.Futures.inCompletionOrder(java.lang.Iterable) ************************
*Commit: commit 1511c17c0621f3a21921aed4b655c5b1306eaf32 1394735814 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
newConcurrentLinkedQueue
com.google.common.collect.ImmutableList.builder()
com.google.common.util.concurrent.MoreExecutors.sameThreadExecutor()
create
add
com.google.common.util.concurrent.ListenableFuture.addListener(java.lang.Runnable, java.util.concurrent.Executor)
remove
setFuture
com.google.common.collect.ImmutableList$Builder.add(com.google.common.util.concurrent.ListenableFuture)
com.google.common.collect.ImmutableList$Builder.build()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableList.builder()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.util.concurrent.MoreExecutors.sameThreadExecutor()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableList.builder()
Também chamam:
com.google.common.collect.ImmutableList$Builder.build()
Confiança: 1.0
Suporte: 7.45033E-4
Posição da Sugestão: 1
**************************
Chamada: create
Nenhuma sugestão fornecida.
**************************
Chamada: add
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.util.concurrent.ListenableFuture.addListener(java.lang.Runnable, java.util.concurrent.Executor)
Nenhuma sugestão fornecida.
**************************
Chamada: remove
Nenhuma sugestão fornecida.
**************************
Chamada: setFuture
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableList$Builder.add(com.google.common.util.concurrent.ListenableFuture)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableList$Builder.build()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.base.Converter$FunctionBasedConverter.hashCode() ************************
*Commit: commit b0171601101a650bcfc1e53c88220f6e6a708558 1394735853 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.Object.hashCode()
java.lang.Object.hashCode()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.Object.hashCode()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.hashCode()
Também chamam:
java.lang.Object.hashCode()
Confiança: 0.21311491642028094
Suporte: 0.00107616
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.base.Converter$FunctionBasedConverter.FunctionBasedConverter(com.google.common.base.Function, com.google.common.base.Function) ************************
*Commit: commit b0171601101a650bcfc1e53c88220f6e6a708558 1394735853 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Function)
com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Function)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Function)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Function)
Também chamam:
com.google.common.base.Function.apply(null)
Confiança: 0.2692304118346714
Suporte: 5.7947E-4
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.hash.BloomFilter.create(com.google.common.hash.Funnel, I, D, com.google.common.hash.BloomFilter$Strategy) ************************
*Commit: commit 6de004aebed935dfa060e76e1c2db23041ae3df5 1395453072 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.hash.Funnel)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.base.Preconditions.checkNotNull(com.google.common.hash.BloomFilter$Strategy)
com.google.common.hash.BloomFilter.optimalNumOfBits(J, D)
com.google.common.hash.BloomFilter.optimalNumOfHashFunctions(J, J)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2845532846858703
Suporte: 0.00289735
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2845532846858703
Suporte: 0.00289735
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.Preconditions.checkNotNull(com.google.common.hash.BloomFilter$Strategy)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2845532846858703
Suporte: 0.00289735
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.1714287193469895
Suporte: 4.96689E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
java.lang.String.length()
Confiança: 0.04878060517967807
Suporte: 4.96689E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.04878060517967807
Suporte: 4.96689E-4
Posição da Sugestão: 0
**************************
Chamada: com.google.common.hash.BloomFilter.optimalNumOfBits(J, D)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.hash.BloomFilter.optimalNumOfHashFunctions(J, J)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.reflect.Parameter.getDeclaredAnnotation(java.lang.Class) ************************
*Commit: commit 2ec1b12a1af770e39d7a837858097a6470c4516a 1397083865 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.Class)
com.google.common.collect.FluentIterable.from(java.lang.Iterable)
com.google.common.collect.FluentIterable.filter(java.lang.Class)
com.google.common.collect.FluentIterable.first()
com.google.common.base.Optional.orNull()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.FluentIterable.from(java.lang.Iterable)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.FluentIterable.filter(java.lang.Class)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.FluentIterable.from(java.lang.Iterable)
Também chamam:
com.google.common.collect.FluentIterable.toSet()
Confiança: 0.4285717983674737
Suporte: 4.96689E-4
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.FluentIterable.first()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Optional.orNull()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.reflect.Parameter.getDeclaredAnnotationsByType(java.lang.Class) ************************
*Commit: commit 2ec1b12a1af770e39d7a837858097a6470c4516a 1397083865 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.FluentIterable.from(java.lang.Iterable)
com.google.common.collect.FluentIterable.filter(java.lang.Class)
com.google.common.collect.FluentIterable.toArray(java.lang.Class)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.FluentIterable.filter(java.lang.Class)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.FluentIterable.from(java.lang.Iterable)
Também chamam:
com.google.common.collect.FluentIterable.toSet()
Confiança: 0.4285717983674737
Suporte: 4.96689E-4
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.FluentIterable.toArray(java.lang.Class)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.reflect.Parameter.getDeclaredAnnotation(java.lang.Class) ************************
*Commit: commit 555e872a0b8341d95c62f9d8a21777de5d1f67a8 1397688112 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.Class)
com.google.common.collect.FluentIterable.from(java.lang.Iterable)
com.google.common.collect.FluentIterable.filter(java.lang.Class)
com.google.common.collect.FluentIterable.first()
com.google.common.base.Optional.orNull()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.FluentIterable.from(java.lang.Iterable)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.FluentIterable.filter(java.lang.Class)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.FluentIterable.from(java.lang.Iterable)
Também chamam:
com.google.common.collect.FluentIterable.toSet()
Confiança: 0.4285717983674737
Suporte: 4.96689E-4
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.FluentIterable.first()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Optional.orNull()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.reflect.Parameter.getDeclaredAnnotationsByType(java.lang.Class) ************************
*Commit: commit 555e872a0b8341d95c62f9d8a21777de5d1f67a8 1397688112 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.FluentIterable.from(java.lang.Iterable)
com.google.common.collect.FluentIterable.filter(java.lang.Class)
com.google.common.collect.FluentIterable.toArray(java.lang.Class)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.FluentIterable.filter(java.lang.Class)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.FluentIterable.from(java.lang.Iterable)
Também chamam:
com.google.common.collect.FluentIterable.toSet()
Confiança: 0.4285717983674737
Suporte: 4.96689E-4
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.FluentIterable.toArray(java.lang.Class)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.util.concurrent.RateLimiter.createWithCapacity(com.google.common.util.concurrent.RateLimiter$SleepingStopwatch, D, J, java.util.concurrent.TimeUnit) ************************
*Commit: commit 07f99e57570b6e81d89c86f4f36fb9a6784d34b3 1397768171 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.TimeUnit.toNanos(J)
com.google.common.util.concurrent.RateLimiter.setRate(D)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.util.concurrent.RateLimiter.setRate(D)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.TimeUnit.toNanos(J)
Também chamam:
java.lang.System.nanoTime()
Confiança: 0.4761908870749708
Suporte: 8.27815E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.TimeUnit.toNanos(J)
Também chamam:
java.lang.Thread.interrupt()
Confiança: 0.3809527096599767
Suporte: 6.62252E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.TimeUnit.toNanos(J)
Também chamam:
java.lang.Thread.currentThread()
Confiança: 0.3809527096599767
Suporte: 6.62252E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.TimeUnit.toNanos(J)
Também chamam:
java.lang.Thread.currentThread()
java.lang.Thread.interrupt()
Confiança: 0.3809527096599767
Suporte: 6.62252E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.TimeUnit.toNanos(J)
Também chamam:
java.lang.System.nanoTime()
java.lang.System.nanoTime()
Confiança: 0.3809527096599767
Suporte: 6.62252E-4
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.primitives.Ints.tryParse(java.lang.String, I) ************************
*Commit: commit 14d8ae4015e5e686f45d428c7e1879e689f818ff 1399500494 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
java.lang.String.isEmpty()
java.lang.String.charAt(I)
java.lang.String.length()
java.lang.String.charAt(I)
com.google.common.primitives.Ints.digit(C)
java.lang.String.length()
java.lang.String.charAt(I)
com.google.common.primitives.Ints.digit(C)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.String.isEmpty()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.String.length()
Confiança: 0.2539677061222611
Suporte: 0.0013245
Posição da Sugestão: 1
**************************
Chamada: java.lang.String.charAt(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.length()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.charAt(I)
Também chamam:
java.lang.String.length()
Confiança: 0.2258059488042771
Suporte: 5.7947E-4
Posição da Sugestão: 1
**************************
Chamada: java.lang.String.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.5625013212533031
Suporte: 7.45033E-4
Posição da Sugestão: 1
**************************
Chamada: com.google.common.primitives.Ints.digit(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
java.lang.String.charAt(I)
Também chamam:
java.lang.String.length()
Confiança: 0.2592590935528612
Suporte: 5.7947E-4
Posição da Sugestão: 1
**************************
Chamada: java.lang.String.length()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.5625013212533031
Suporte: 7.45033E-4
Posição da Sugestão: 1
**************************
Chamada: com.google.common.primitives.Ints.digit(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
java.lang.String.charAt(I)
Também chamam:
java.lang.String.length()
Confiança: 0.2592590935528612
Suporte: 5.7947E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.String.charAt(I)
Também chamam:
java.lang.String.length()
Confiança: 0.2258059488042771
Suporte: 5.7947E-4
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.util.concurrent.Uninterruptibles.tryAcquireUninterruptibly(java.util.concurrent.Semaphore, I, J, java.util.concurrent.TimeUnit) ************************
*Commit: commit 7811f97b5dd9b75762f6868a8b0098d826139332 1400007956 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.TimeUnit.toNanos(J)
java.lang.System.nanoTime()
java.util.concurrent.Semaphore.tryAcquire(I, J, java.util.concurrent.TimeUnit)
java.lang.System.nanoTime()
java.lang.Thread.currentThread()
java.lang.Thread.interrupt()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.System.nanoTime()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.TimeUnit.toNanos(J)
Também chamam:
java.lang.System.nanoTime()
Confiança: 0.4761908870749708
Suporte: 8.27815E-4
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.Semaphore.tryAcquire(I, J, java.util.concurrent.TimeUnit)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.System.nanoTime()
Também chamam:
java.lang.System.nanoTime()
Confiança: 0.9230764942016058
Suporte: 9.93378E-4
Posição da Sugestão: 1
**************************
Chamada: java.lang.System.nanoTime()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Thread.currentThread()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.System.nanoTime()
Também chamam:
java.lang.System.nanoTime()
Confiança: 0.9230764942016058
Suporte: 9.93378E-4
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.util.concurrent.TimeUnit.toNanos(J)
java.lang.System.nanoTime()
java.lang.System.nanoTime()
Também chamam:
java.lang.Thread.currentThread()
Confiança: 0.8749992450003926
Suporte: 5.7947E-4
Posição da Sugestão: 2
**************************
Chamada: java.lang.Thread.interrupt()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.System.nanoTime()
java.lang.System.nanoTime()
java.lang.Thread.currentThread()
Também chamam:
java.lang.Thread.interrupt()
Confiança: 1.0
Suporte: 6.62252E-4
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.MultisetsTest.testRemoveOccurrencesMultisetEmpty() ************************
*Commit: commit 050aca81c004448a4a86c2541466828e83d12ffb 1402512714 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.HashMultiset.create()
java.util.Arrays.asList([Ljava.lang.String;)
com.google.common.collect.HashMultiset.create(java.lang.Iterable)
com.google.common.collect.Multisets.retainOccurrences(com.google.common.collect.Multiset, com.google.common.collect.Multiset)
assertFalse
java.util.Collection.isEmpty()
assertTrue
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Arrays.asList([Ljava.lang.String;)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.HashMultiset.create(java.lang.Iterable)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Multisets.retainOccurrences(com.google.common.collect.Multiset, com.google.common.collect.Multiset)
Nenhuma sugestão fornecida.
**************************
Chamada: assertFalse
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.isEmpty()
Nenhuma sugestão fornecida.
**************************
Chamada: assertTrue
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.isEmpty()
Também chamam:
java.util.Collection.size()
Confiança: 0.2127659847894868
Suporte: 8.27815E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.isEmpty()
Também chamam:
com.google.common.collect.AbstractIterator.endOfData()
Confiança: 0.1276595908736921
Suporte: 4.96689E-4
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.MultisetsTest.testRemoveOccurrencesIterableEmpty() ************************
*Commit: commit 050aca81c004448a4a86c2541466828e83d12ffb 1402512714 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.HashMultiset.create()
java.util.Arrays.asList([Ljava.lang.String;)
com.google.common.collect.Multisets.removeOccurrences(com.google.common.collect.Multiset, com.google.common.collect.Multiset)
assertFalse
java.util.Collection.isEmpty()
assertTrue
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Arrays.asList([Ljava.lang.String;)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Multisets.removeOccurrences(com.google.common.collect.Multiset, com.google.common.collect.Multiset)
Nenhuma sugestão fornecida.
**************************
Chamada: assertFalse
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.isEmpty()
Nenhuma sugestão fornecida.
**************************
Chamada: assertTrue
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.isEmpty()
Também chamam:
java.util.Collection.size()
Confiança: 0.2127659847894868
Suporte: 8.27815E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.isEmpty()
Também chamam:
com.google.common.collect.AbstractIterator.endOfData()
Confiança: 0.1276595908736921
Suporte: 4.96689E-4
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Multisets.removeOccurrencesImpl(com.google.common.collect.Multiset, java.lang.Iterable) ************************
*Commit: commit 050aca81c004448a4a86c2541466828e83d12ffb 1402512714 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Multiset)
com.google.common.base.Preconditions.checkNotNull(java.lang.Iterable)
com.google.common.collect.Multiset.remove(java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkNotNull(java.lang.Iterable)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Multiset)
Também chamam:
com.google.common.collect.Multiset.count(java.lang.Object)
Confiança: 0.7777776286419528
Suporte: 5.7947E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Multiset)
Também chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Multiset)
Confiança: 0.7777776286419528
Suporte: 5.7947E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Multiset)
Também chamam:
com.google.common.collect.Multiset.entrySet()
Confiança: 0.7777776286419528
Suporte: 5.7947E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Multiset)
Também chamam:
com.google.common.collect.Multiset$Entry.getCount()
Confiança: 0.7777776286419528
Suporte: 5.7947E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Multiset)
Também chamam:
com.google.common.collect.Multiset$Entry.getElement()
Confiança: 0.7777776286419528
Suporte: 5.7947E-4
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Multiset.remove(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.Iterable)
Também chamam:
java.lang.Iterable.iterator()
Confiança: 0.6071410081626313
Suporte: 0.00140728
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.base.MoreObjects$ToStringHelper.toString() ************************
*Commit: commit 39534cb20b1ae63e5a516ceacd9ba71fddeaa8c5 1403130468 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(java.lang.Object)
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.toString()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.StringBuilder.append(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.9523817741499416
Suporte: 0.00331126
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00165563
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00140728
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 9.10596E-4
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00165563
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.Object)
Também chamam:
java.lang.StringBuilder.append(C)
Confiança: 0.6666671140741417
Suporte: 4.96689E-4
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00165563
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.Maps$FilteredEntryNavigableMap.isEmpty() ************************
*Commit: commit 8988ec0278a4ffe0e1e5b9979e98ccbf0dc8faa3 1403297149 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.SortedMap.entrySet()
com.google.common.collect.Iterables.any(java.lang.Iterable, com.google.common.base.Predicate)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Iterables.any(java.lang.Iterable, com.google.common.base.Predicate)
** Sugestões fornecidas **
Usuários que chamam:
java.util.SortedMap.entrySet()
Também chamam:
java.util.Set.iterator()
Confiança: 0.7272731266115819
Suporte: 6.62252E-4
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.util.concurrent.MoreExecutors$DirectExecutorService.endTask() ************************
*Commit: commit 10695e272674ce32fe6a6486c2904a65ef3db4b1 1405543963 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.locks.Lock.lock()
com.google.common.util.concurrent.MoreExecutors$DirectExecutorService.isTerminated()
java.util.concurrent.locks.Condition.signalAll()
java.util.concurrent.locks.Lock.unlock()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.util.concurrent.MoreExecutors$DirectExecutorService.isTerminated()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.locks.Lock.lock()
Também chamam:
java.util.concurrent.locks.Lock.unlock()
Confiança: 1.0
Suporte: 7.45033E-4
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.locks.Condition.signalAll()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.locks.Lock.unlock()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.util.concurrent.MoreExecutors$DirectExecutorService.isShutdown() ************************
*Commit: commit 10695e272674ce32fe6a6486c2904a65ef3db4b1 1405543963 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.locks.Lock.lock()
java.util.concurrent.locks.Lock.unlock()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.locks.Lock.unlock()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.locks.Lock.lock()
Também chamam:
java.util.concurrent.locks.Lock.unlock()
Confiança: 1.0
Suporte: 7.45033E-4
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.util.concurrent.MoreExecutors$DirectExecutorService.isTerminated() ************************
*Commit: commit 10695e272674ce32fe6a6486c2904a65ef3db4b1 1405543963 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.locks.Lock.lock()
java.util.concurrent.locks.Lock.unlock()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.locks.Lock.unlock()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.locks.Lock.lock()
Também chamam:
java.util.concurrent.locks.Lock.unlock()
Confiança: 1.0
Suporte: 7.45033E-4
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.util.concurrent.MoreExecutors$DirectExecutorService.awaitTermination(J, java.util.concurrent.TimeUnit) ************************
*Commit: commit 10695e272674ce32fe6a6486c2904a65ef3db4b1 1405543963 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.TimeUnit.toNanos(J)
java.util.concurrent.locks.Lock.lock()
com.google.common.util.concurrent.MoreExecutors$DirectExecutorService.isTerminated()
java.util.concurrent.locks.Condition.awaitNanos(J)
java.util.concurrent.locks.Lock.unlock()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.locks.Lock.lock()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.TimeUnit.toNanos(J)
Também chamam:
java.lang.System.nanoTime()
Confiança: 0.4761908870749708
Suporte: 8.27815E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.TimeUnit.toNanos(J)
Também chamam:
java.lang.Thread.interrupt()
Confiança: 0.3809527096599767
Suporte: 6.62252E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.TimeUnit.toNanos(J)
Também chamam:
java.lang.Thread.currentThread()
Confiança: 0.3809527096599767
Suporte: 6.62252E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.TimeUnit.toNanos(J)
Também chamam:
java.lang.Thread.currentThread()
java.lang.Thread.interrupt()
Confiança: 0.3809527096599767
Suporte: 6.62252E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.concurrent.TimeUnit.toNanos(J)
Também chamam:
java.lang.System.nanoTime()
java.lang.System.nanoTime()
Confiança: 0.3809527096599767
Suporte: 6.62252E-4
Posição da Sugestão: 0
**************************
Chamada: com.google.common.util.concurrent.MoreExecutors$DirectExecutorService.isTerminated()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.locks.Lock.lock()
Também chamam:
java.util.concurrent.locks.Lock.unlock()
Confiança: 1.0
Suporte: 7.45033E-4
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.locks.Condition.awaitNanos(J)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.locks.Lock.unlock()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.util.concurrent.MoreExecutors$DirectExecutorService.shutdown() ************************
*Commit: commit 10695e272674ce32fe6a6486c2904a65ef3db4b1 1405543963 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.locks.Lock.lock()
java.util.concurrent.locks.Lock.unlock()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.locks.Lock.unlock()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.locks.Lock.lock()
Também chamam:
java.util.concurrent.locks.Lock.unlock()
Confiança: 1.0
Suporte: 7.45033E-4
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.util.concurrent.MoreExecutors$DirectExecutorService.startTask() ************************
*Commit: commit 10695e272674ce32fe6a6486c2904a65ef3db4b1 1405543963 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.locks.Lock.lock()
com.google.common.util.concurrent.MoreExecutors$DirectExecutorService.isShutdown()
java.util.concurrent.locks.Lock.unlock()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.util.concurrent.MoreExecutors$DirectExecutorService.isShutdown()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.locks.Lock.lock()
Também chamam:
java.util.concurrent.locks.Lock.unlock()
Confiança: 1.0
Suporte: 7.45033E-4
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.locks.Lock.unlock()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.util.concurrent.ServiceManager$ServiceManagerState.tryStartTiming(com.google.common.util.concurrent.Service) ************************
*Commit: commit 150713cb8346a20c89c6bb1a23176942ee7beafc 1406579293 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.util.concurrent.Monitor.enter()
java.util.Map.get(java.lang.Object)
com.google.common.base.Stopwatch.createStarted()
java.util.Map.put(com.google.common.util.concurrent.Service, com.google.common.base.Stopwatch)
com.google.common.util.concurrent.Monitor.leave()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map.get(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.util.concurrent.Monitor.enter()
Também chamam:
com.google.common.util.concurrent.Monitor.leave()
Confiança: 1.0
Suporte: 9.10596E-4
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.Stopwatch.createStarted()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.put(com.google.common.util.concurrent.Service, com.google.common.base.Stopwatch)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.util.concurrent.Monitor.leave()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.net.InetAddresses.decrement(java.net.InetAddress) ************************
*Commit: commit d39130651d8a90f5ebe066de7f0b2311806e5152 1406579293 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.net.InetAddress.getAddress()
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.net.InetAddresses.bytesToInetAddress([B)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.net.InetAddresses.bytesToInetAddress([B)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2845532846858703
Suporte: 0.00289735
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
java.lang.String.length()
Confiança: 0.04878060517967807
Suporte: 4.96689E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.04878060517967807
Suporte: 4.96689E-4
Posição da Sugestão: 0
**************************
************************ Método Avaliado: EventBus ************************
*Commit: commit 7c85e1303b7a506d500652d608329adf5dd90813 1407271082 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
com.google.common.base.Preconditions.checkNotNull(java.util.concurrent.Executor)
com.google.common.base.Preconditions.checkNotNull(java.lang.Object)
com.google.common.base.Preconditions.checkNotNull(com.google.common.eventbus.SubscriberExceptionHandler)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkNotNull(java.util.concurrent.Executor)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.String.length()
Confiança: 0.2539677061222611
Suporte: 0.0013245
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
Confiança: 0.2222222222222222
Suporte: 0.00115894
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.2222222222222222
Suporte: 0.00115894
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
Confiança: 0.2222222222222222
Suporte: 0.00115894
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.14285717024944247
Suporte: 7.45033E-4
Posição da Sugestão: 0
**************************
Chamada: com.google.common.base.Preconditions.checkNotNull(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkNotNull(com.google.common.eventbus.SubscriberExceptionHandler)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.eventbus.SubscriberRegistry.getAnnotatedMethodsNotCached(java.lang.Class) ************************
*Commit: commit 7c85e1303b7a506d500652d608329adf5dd90813 1407271082 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.reflect.TypeToken.of(java.lang.Class)
com.google.common.reflect.TypeToken.getTypes()
com.google.common.reflect.TypeToken$TypeSet.rawTypes()
com.google.common.collect.Maps.newHashMap()
java.lang.Class.getDeclaredMethods()
java.lang.reflect.AccessibleObject.isAnnotationPresent(java.lang.Class)
java.lang.reflect.Method.isSynthetic()
java.lang.reflect.Method.getParameterTypes()
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
java.util.Map.containsKey(java.lang.Object)
java.util.Map.put(com.google.common.eventbus.SubscriberRegistry$MethodIdentifier, java.lang.reflect.Method)
java.util.Map.values()
com.google.common.collect.ImmutableList.copyOf(java.util.Collection)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.reflect.TypeToken.getTypes()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.reflect.TypeToken$TypeSet.rawTypes()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Maps.newHashMap()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Class.getDeclaredMethods()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.reflect.AccessibleObject.isAnnotationPresent(java.lang.Class)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.reflect.Method.isSynthetic()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.reflect.Method.getParameterTypes()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.containsKey(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2845532846858703
Suporte: 0.00289735
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
java.lang.String.length()
Confiança: 0.04878060517967807
Suporte: 4.96689E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.04878060517967807
Suporte: 4.96689E-4
Posição da Sugestão: 0
**************************
Chamada: java.util.Map.put(com.google.common.eventbus.SubscriberRegistry$MethodIdentifier, java.lang.reflect.Method)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.containsKey(java.lang.Object)
Também chamam:
java.util.Map.get(java.lang.Object)
Confiança: 0.21621660447091165
Suporte: 6.62252E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.containsKey(java.lang.Object)
Também chamam:
java.util.Map.remove(java.lang.Object)
Confiança: 0.16216245335318374
Suporte: 4.96689E-4
Posição da Sugestão: 0
**************************
Chamada: java.util.Map.values()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableList.copyOf(java.util.Collection)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: getSubscribers ************************
*Commit: commit 7c85e1303b7a506d500652d608329adf5dd90813 1407271082 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.Object.getClass()
com.google.common.eventbus.SubscriberRegistry.flattenHierarchy(java.lang.Class)
java.util.AbstractCollection.size()
newArrayListWithCapacity
get
iterator
add
iterator
com.google.common.collect.Iterators.concat([Ljava.util.Iterator;)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.eventbus.SubscriberRegistry.flattenHierarchy(java.lang.Class)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.AbstractCollection.size()
Nenhuma sugestão fornecida.
**************************
Chamada: newArrayListWithCapacity
** Sugestões fornecidas **
Usuários que chamam:
java.util.AbstractCollection.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.29824479605979815
Suporte: 0.00140728
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.AbstractCollection.size()
Também chamam:
java.util.AbstractCollection.size()
Confiança: 0.24561410944910925
Suporte: 0.00115894
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.AbstractCollection.size()
Também chamam:
java.util.AbstractCollection.size()
java.util.AbstractCollection.size()
Confiança: 0.10526328059103028
Suporte: 4.96689E-4
Posição da Sugestão: 0
**************************
Chamada: get
Nenhuma sugestão fornecida.
**************************
Chamada: iterator
Nenhuma sugestão fornecida.
**************************
Chamada: add
Nenhuma sugestão fornecida.
**************************
Chamada: iterator
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Iterators.concat([Ljava.util.Iterator;)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.eventbus.SubscriberRegistry$MethodIdentifier.equals(java.lang.Object) ************************
*Commit: commit 7c85e1303b7a506d500652d608329adf5dd90813 1407271082 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.String.equals(java.lang.Object)
java.util.List.equals(java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.List.equals(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.equals(java.lang.Object)
Também chamam:
java.lang.String.equals(java.lang.Object)
Confiança: 0.30000000000000004
Suporte: 4.96689E-4
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.io.ByteSource$ByteArrayByteSource.truncate(java.lang.CharSequence, I, java.lang.String) ************************
*Commit: commit 6c9f886357a277e0fde19b87556eb7c0fa617e14 1409831465 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.CharSequence)
java.lang.String.length()
java.lang.String.length()
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
java.lang.CharSequence.length()
java.lang.CharSequence.toString()
java.lang.String.length()
java.lang.StringBuilder.append(java.lang.CharSequence, I, I)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.String.length()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.length()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.4736846566946555
Suporte: 0.0022351
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.length()
Confiança: 0.31579047756297496
Suporte: 0.00149007
Posição da Sugestão: 2
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.4736846566946555
Suporte: 0.0022351
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.lang.String.length()
java.lang.String.length()
Também chamam:
java.lang.String.length()
Confiança: 0.3333326622239224
Suporte: 4.96689E-4
Posição da Sugestão: 2
**************************
Chamada: java.lang.CharSequence.length()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2845532846858703
Suporte: 0.00289735
Posição da Sugestão: 2
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
java.lang.String.length()
Confiança: 0.04878060517967807
Suporte: 4.96689E-4
Posição da Sugestão: 2
**************************
Chamada: java.lang.CharSequence.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.5818189405620056
Suporte: 0.00264901
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
java.lang.CharSequence.charAt(I)
Confiança: 0.23636387596694913
Suporte: 0.00107616
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.19999999999999998
Suporte: 9.10596E-4
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.19999999999999998
Suporte: 9.10596E-4
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.toString()
Confiança: 0.18181828165289546
Suporte: 8.27815E-4
Posição da Sugestão: 5
**************************
Chamada: java.lang.String.length()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(java.lang.CharSequence, I, I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.4736846566946555
Suporte: 0.0022351
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.lang.String.length()
java.lang.String.length()
Também chamam:
java.lang.String.length()
Confiança: 0.3333326622239224
Suporte: 4.96689E-4
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.lang.String.length()
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.3333326622239224
Suporte: 4.96689E-4
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.length()
Confiança: 0.31579047756297496
Suporte: 0.00149007
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.2280705472455463
Suporte: 0.00107616
Posição da Sugestão: 5
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 9.10596E-4
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.io.CharSource$CharSequenceCharSource.truncate(java.lang.CharSequence, I, java.lang.String) ************************
*Commit: commit 6c9f886357a277e0fde19b87556eb7c0fa617e14 1409831465 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.CharSequence)
java.lang.String.length()
java.lang.String.length()
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
java.lang.CharSequence.length()
java.lang.CharSequence.toString()
java.lang.String.length()
java.lang.StringBuilder.append(java.lang.CharSequence, I, I)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.String.length()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.length()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.4736846566946555
Suporte: 0.0022351
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.length()
Confiança: 0.31579047756297496
Suporte: 0.00149007
Posição da Sugestão: 2
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.4736846566946555
Suporte: 0.0022351
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.lang.String.length()
java.lang.String.length()
Também chamam:
java.lang.String.length()
Confiança: 0.3333326622239224
Suporte: 4.96689E-4
Posição da Sugestão: 2
**************************
Chamada: java.lang.CharSequence.length()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2845532846858703
Suporte: 0.00289735
Posição da Sugestão: 2
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
java.lang.String.length()
Confiança: 0.04878060517967807
Suporte: 4.96689E-4
Posição da Sugestão: 2
**************************
Chamada: java.lang.CharSequence.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.5818189405620056
Suporte: 0.00264901
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
java.lang.CharSequence.charAt(I)
Confiança: 0.23636387596694913
Suporte: 0.00107616
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.19999999999999998
Suporte: 9.10596E-4
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.19999999999999998
Suporte: 9.10596E-4
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.toString()
Confiança: 0.18181828165289546
Suporte: 8.27815E-4
Posição da Sugestão: 5
**************************
Chamada: java.lang.String.length()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(java.lang.CharSequence, I, I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.4736846566946555
Suporte: 0.0022351
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.lang.String.length()
java.lang.String.length()
Também chamam:
java.lang.String.length()
Confiança: 0.3333326622239224
Suporte: 4.96689E-4
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.lang.String.length()
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.3333326622239224
Suporte: 4.96689E-4
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.length()
Confiança: 0.31579047756297496
Suporte: 0.00149007
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.2280705472455463
Suporte: 0.00107616
Posição da Sugestão: 5
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 9.10596E-4
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableSortedMap.ofEntries([Lcom.google.common.collect.ImmutableMapEntry$TerminalEntry;) ************************
*Commit: commit f2fb1352a5ee1b808635f699b93311698d9c5bef 1411502654 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Ordering.natural()
com.google.common.collect.ImmutableSortedMap.fromEntries(java.util.Comparator, Z, [Ljava.util.Map$Entry;, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableSortedMap.fromEntries(java.util.Comparator, Z, [Ljava.util.Map$Entry;, I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
com.google.common.collect.ImmutableSortedMultiset.copyOf(java.util.Comparator, java.lang.Iterable)
Confiança: 0.10606049513322767
Suporte: 5.7947E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
com.google.common.collect.ImmutableSortedSet.construct(java.util.Comparator, I, [Ljava.lang.Comparable;)
Confiança: 0.09090907426998415
Suporte: 4.96689E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
com.google.common.collect.Ordering.reverse()
Confiança: 0.09090907426998415
Suporte: 4.96689E-4
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableSortedMap.fromEntries(java.util.Comparator, Z, [Ljava.util.Map$Entry;, I) ************************
*Commit: commit f2fb1352a5ee1b808635f699b93311698d9c5bef 1411502654 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableSortedMap.emptyMap(java.util.Comparator)
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.collect.ImmutableSortedMap.of(java.util.Comparator, com.google.common.collect.ImmutableSortedMap$(Ljava/util/Comparator;Z[Ljava/util/Map$Entry;I)Lcom/google/common/collect/ImmutableSortedMap;$K, com.google.common.collect.ImmutableSortedMap$(Ljava/util/Comparator;Z[Ljava/util/Map$Entry;I)Lcom/google/common/collect/ImmutableSortedMap;$V)
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.collect.CollectPreconditions.checkEntryNotNull(java.lang.Object, java.lang.Object)
com.google.common.collect.Ordering.from(java.util.Comparator)
com.google.common.collect.Ordering.onKeys()
java.util.Arrays.sort([Ljava.util.Map$Entry;, I, I, java.util.Comparator)
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.collect.CollectPreconditions.checkEntryNotNull(java.lang.Object, java.lang.Object)
java.util.Comparator.compare(null, null)
com.google.common.collect.ImmutableMap.checkNoConflict(Z, java.lang.String, java.util.Map$Entry, java.util.Map$Entry)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7142866789717732
Suporte: 0.00951987
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ImmutableSortedMap.of(java.util.Comparator, com.google.common.collect.ImmutableSortedMap$(Ljava/util/Comparator;Z[Ljava/util/Map$Entry;I)Lcom/google/common/collect/ImmutableSortedMap;$K, com.google.common.collect.ImmutableSortedMap$(Ljava/util/Comparator;Z[Ljava/util/Map$Entry;I)Lcom/google/common/collect/ImmutableSortedMap;$V)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.14444422074130747
Suporte: 0.00215232
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.8
Suporte: 6.62252E-4
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.CollectPreconditions.checkEntryNotNull(java.lang.Object, java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.239999710080501
Suporte: 4.96689E-4
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.14444422074130747
Suporte: 0.00215232
Posição da Sugestão: 2
**************************
Chamada: com.google.common.collect.Ordering.from(java.util.Comparator)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Ordering.onKeys()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Ordering.from(java.util.Comparator)
Também chamam:
com.google.common.collect.Ordering.reverse()
Confiança: 0.571429064489965
Suporte: 6.62252E-4
Posição da Sugestão: 0
**************************
Chamada: java.util.Arrays.sort([Ljava.util.Map$Entry;, I, I, java.util.Comparator)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.8
Suporte: 6.62252E-4
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.239999710080501
Suporte: 4.96689E-4
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.14444422074130747
Suporte: 0.00215232
Posição da Sugestão: 2
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.8
Suporte: 6.62252E-4
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.CollectPreconditions.checkEntryNotNull(java.lang.Object, java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.239999710080501
Suporte: 4.96689E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.14444422074130747
Suporte: 0.00215232
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.1388887770373204
Suporte: 0.00206954
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.size()
Confiança: 0.10434785348959598
Suporte: 9.93378E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.09444388518660198
Suporte: 0.00140728
Posição da Sugestão: 0
**************************
Chamada: java.util.Comparator.compare(null, null)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableMap.checkNoConflict(Z, java.lang.String, java.util.Map$Entry, java.util.Map$Entry)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Lists.indexMap(java.util.Collection) ************************
*Commit: commit 8061999c2ae5a914ae765c1bdc373b9cc4ee70d0 1411502655 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Collection.size()
com.google.common.collect.ImmutableMap$Builder.put(com.google.common.collect.Lists$(Ljava/util/Collection;)Lcom/google/common/collect/ImmutableMap;$E, java.lang.Integer)
com.google.common.collect.ImmutableMap$Builder.build()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableMap$Builder.put(com.google.common.collect.Lists$(Ljava/util/Collection;)Lcom/google/common/collect/ImmutableMap;$E, java.lang.Integer)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Collection.clear()
Confiança: 0.2321431653062281
Suporte: 0.00107616
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Collection.size()
Confiança: 0.14285726612249125
Suporte: 6.62252E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.10714294959186843
Suporte: 4.96689E-4
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.ImmutableMap$Builder.build()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Lists.indexMap(java.util.Collection) ************************
*Commit: commit 8061999c2ae5a914ae765c1bdc373b9cc4ee70d0 1411502655 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Collection.size()
com.google.common.collect.ImmutableMap$Builder.put(com.google.common.collect.Lists$(Ljava/util/Collection;)Lcom/google/common/collect/ImmutableMap;$E, java.lang.Integer)
com.google.common.collect.ImmutableMap$Builder.build()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableMap$Builder.put(com.google.common.collect.Lists$(Ljava/util/Collection;)Lcom/google/common/collect/ImmutableMap;$E, java.lang.Integer)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Collection.clear()
Confiança: 0.2321431653062281
Suporte: 0.00107616
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Collection.size()
Confiança: 0.14285726612249125
Suporte: 6.62252E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.10714294959186843
Suporte: 4.96689E-4
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.ImmutableMap$Builder.build()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.RegularImmutableMap.checkNoConflictInBucket(java.lang.Object, java.util.Map$Entry, com.google.common.collect.ImmutableMapEntry) ************************
*Commit: commit 0bb9c27ab75205ffefba86cbb6cc4a3b4ceec988 1411563580 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableMapEntry.getNextInKeyBucket()
com.google.common.collect.ImmutableEntry.getKey()
java.lang.Object.equals(java.lang.Object)
com.google.common.collect.ImmutableMap.checkNoConflict(Z, java.lang.String, java.util.Map$Entry, java.util.Map$Entry)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableEntry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Object.equals(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableEntry.getKey()
Também chamam:
com.google.common.collect.ImmutableEntry.getValue()
Confiança: 0.7692304118346713
Suporte: 8.27815E-4
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.ImmutableMap.checkNoConflict(Z, java.lang.String, java.util.Map$Entry, java.util.Map$Entry)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.equals(java.lang.Object)
Também chamam:
java.lang.Object.equals(java.lang.Object)
Confiança: 0.15151512378330692
Suporte: 8.27815E-4
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet.iterator() ************************
*Commit: commit c2748c69b3a77f55990486130a139a161b3e12b2 1411563581 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableCollection.asList()
com.google.common.collect.ImmutableList.iterator()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableList.iterator()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableCollection.asList()
Também chamam:
java.util.List.get(I)
Confiança: 0.5172410920330242
Suporte: 0.00124172
Posição da Sugestão: 2
**************************
Usuários que chamam:
com.google.common.collect.ImmutableCollection.asList()
Também chamam:
com.google.common.collect.ImmutableList.iterator()
Confiança: 0.275862471153766
Suporte: 6.62252E-4
Posição da Sugestão: 2
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableMapEntrySet$RegularEntrySet.iterator() ************************
*Commit: commit c2748c69b3a77f55990486130a139a161b3e12b2 1411563581 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableCollection.asList()
com.google.common.collect.ImmutableList.iterator()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableList.iterator()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableCollection.asList()
Também chamam:
java.util.List.get(I)
Confiança: 0.5172410920330242
Suporte: 0.00124172
Posição da Sugestão: 2
**************************
Usuários que chamam:
com.google.common.collect.ImmutableCollection.asList()
Também chamam:
com.google.common.collect.ImmutableList.iterator()
Confiança: 0.275862471153766
Suporte: 6.62252E-4
Posição da Sugestão: 2
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableMap.copyOfEnumMap(java.util.EnumMap) ************************
*Commit: commit 544b57a25702ee58b9b87c3673b8748352a429e3 1411563584 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.EnumMap.entrySet()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.collect.CollectPreconditions.checkEntryNotNull(java.lang.Object, java.lang.Object)
com.google.common.collect.ImmutableEnumMap.asImmutable(java.util.EnumMap)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7142866789717732
Suporte: 0.00951987
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.CollectPreconditions.checkEntryNotNull(java.lang.Object, java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.14444422074130747
Suporte: 0.00215232
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.1388887770373204
Suporte: 0.00206954
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.size()
Confiança: 0.10434785348959598
Suporte: 9.93378E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.09444388518660198
Suporte: 0.00140728
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.08695654457466331
Suporte: 8.27815E-4
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.ImmutableEnumMap.asImmutable(java.util.EnumMap)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.RegularImmutableBiMap.checkNoConflictInValueBucket(java.lang.Object, java.util.Map$Entry, com.google.common.collect.ImmutableMapEntry) ************************
*Commit: commit 842efacbd00611778a4b33d917be6f71542259a8 1411565463 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableMapEntry.getNextInValueBucket()
com.google.common.collect.ImmutableEntry.getValue()
java.lang.Object.equals(java.lang.Object)
com.google.common.collect.ImmutableMap.checkNoConflict(Z, java.lang.String, java.util.Map$Entry, java.util.Map$Entry)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableEntry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Object.equals(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableMap.checkNoConflict(Z, java.lang.String, java.util.Map$Entry, java.util.Map$Entry)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.equals(java.lang.Object)
Também chamam:
java.lang.Object.equals(java.lang.Object)
Confiança: 0.15151512378330692
Suporte: 8.27815E-4
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.RegularImmutableMap.checkNoConflictInKeyBucket(java.lang.Object, java.util.Map$Entry, com.google.common.collect.ImmutableMapEntry) ************************
*Commit: commit 842efacbd00611778a4b33d917be6f71542259a8 1411565463 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableMapEntry.getNextInKeyBucket()
com.google.common.collect.ImmutableEntry.getKey()
java.lang.Object.equals(java.lang.Object)
com.google.common.collect.ImmutableMap.checkNoConflict(Z, java.lang.String, java.util.Map$Entry, java.util.Map$Entry)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableEntry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Object.equals(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableEntry.getKey()
Também chamam:
com.google.common.collect.ImmutableEntry.getValue()
Confiança: 0.7692304118346713
Suporte: 8.27815E-4
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.ImmutableMap.checkNoConflict(Z, java.lang.String, java.util.Map$Entry, java.util.Map$Entry)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.equals(java.lang.Object)
Também chamam:
java.lang.Object.equals(java.lang.Object)
Confiança: 0.15151512378330692
Suporte: 8.27815E-4
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.RegularImmutableMap.get(java.lang.Object, [Lcom.google.common.collect.ImmutableMapEntry;, I) ************************
*Commit: commit 842efacbd00611778a4b33d917be6f71542259a8 1411565463 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.Object.hashCode()
com.google.common.collect.Hashing.smear(I)
com.google.common.collect.ImmutableMapEntry.getNextInKeyBucket()
com.google.common.collect.ImmutableEntry.getKey()
java.lang.Object.equals(java.lang.Object)
com.google.common.collect.ImmutableEntry.getValue()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Hashing.smear(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.hashCode()
Também chamam:
java.lang.Object.hashCode()
Confiança: 0.21311491642028094
Suporte: 0.00107616
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.lang.Object.hashCode()
Também chamam:
com.google.common.collect.Hashing.smear(I)
Confiança: 0.18032782340232134
Suporte: 9.10596E-4
Posição da Sugestão: 2
**************************
Chamada: com.google.common.collect.ImmutableMapEntry.getNextInKeyBucket()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.hashCode()
com.google.common.collect.Hashing.smear(I)
Também chamam:
java.lang.Object.equals(java.lang.Object)
Confiança: 0.6363634366942091
Suporte: 5.7947E-4
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ImmutableEntry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Object.equals(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableEntry.getKey()
Também chamam:
com.google.common.collect.ImmutableEntry.getValue()
Confiança: 0.7692304118346713
Suporte: 8.27815E-4
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ImmutableEntry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.equals(java.lang.Object)
Também chamam:
java.lang.Object.equals(java.lang.Object)
Confiança: 0.15151512378330692
Suporte: 8.27815E-4
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets.entryIterator() ************************
*Commit: commit 055f93996fe9dba92972a7a1742b182fd80ed133 1412002416 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableMap.entrySet()
com.google.common.collect.ImmutableSet.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.collect.ImmutableSet.of(com.google.common.collect.ImmutableMap$V)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableSet.iterator()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableMap.entrySet()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6666666666666666
Suporte: 6.62252E-4
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7487176628010704
Suporte: 0.0120861
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.2671233896790528
Suporte: 0.00322848
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
com.google.common.collect.AbstractIterator.endOfData()
Confiança: 0.26027419928678397
Suporte: 0.0031457
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.21134025754066105
Suporte: 0.00339404
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
com.google.common.collect.AbstractIterator.endOfData()
Confiança: 0.19587660962913148
Suporte: 0.0031457
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.19178064057057279
Suporte: 0.00231788
Posição da Sugestão: 5
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableMap.entrySet()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.8749992450003926
Suporte: 5.7947E-4
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ImmutableSet.of(com.google.common.collect.ImmutableMap$V)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.4285717983674737
Suporte: 9.93378E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.4285717983674737
Suporte: 9.93378E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.34999969800015707
Suporte: 5.7947E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.34999969800015707
Suporte: 5.7947E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.342857438693979
Suporte: 9.93378E-4
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.DenseImmutableTable$ImmutableArrayMap.entryIterator() ************************
*Commit: commit 055f93996fe9dba92972a7a1742b182fd80ed133 1412002416 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.DenseImmutableTable$ImmutableArrayMap.keyToIndex()
java.util.Map.size()
com.google.common.collect.DenseImmutableTable$ImmutableArrayMap.getValue(I)
com.google.common.collect.DenseImmutableTable$ImmutableArrayMap.getKey(I)
com.google.common.collect.Maps.immutableEntry(com.google.common.collect.DenseImmutableTable$ImmutableArrayMap$K, com.google.common.collect.DenseImmutableTable$ImmutableArrayMap$V)
com.google.common.collect.AbstractIterator.endOfData()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map.size()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.DenseImmutableTable$ImmutableArrayMap.getValue(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.size()
Também chamam:
java.util.Map.entrySet()
Confiança: 0.17021278783158944
Suporte: 6.62252E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.size()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.17021278783158944
Suporte: 6.62252E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.size()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.17021278783158944
Suporte: 6.62252E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.size()
Também chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Confiança: 0.17021278783158944
Suporte: 6.62252E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.size()
Também chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getValue()
Confiança: 0.1489360608420528
Suporte: 5.7947E-4
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.DenseImmutableTable$ImmutableArrayMap.getKey(I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Maps.immutableEntry(com.google.common.collect.DenseImmutableTable$ImmutableArrayMap$K, com.google.common.collect.DenseImmutableTable$ImmutableArrayMap$V)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.AbstractIterator.endOfData()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableMap$MapViewOfValuesAsSingletonSets.entryIterator() ************************
*Commit: commit 055f93996fe9dba92972a7a1742b182fd80ed133 1412002416 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableMap.entrySet()
com.google.common.collect.ImmutableSet.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.collect.ImmutableSet.of(com.google.common.collect.ImmutableMap$V)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableSet.iterator()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableMap.entrySet()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6666666666666666
Suporte: 6.62252E-4
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7487176628010704
Suporte: 0.0120861
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.2671233896790528
Suporte: 0.00322848
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
com.google.common.collect.AbstractIterator.endOfData()
Confiança: 0.26027419928678397
Suporte: 0.0031457
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.21134025754066105
Suporte: 0.00339404
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
com.google.common.collect.AbstractIterator.endOfData()
Confiança: 0.19587660962913148
Suporte: 0.0031457
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.19178064057057279
Suporte: 0.00231788
Posição da Sugestão: 5
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableMap.entrySet()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.8749992450003926
Suporte: 5.7947E-4
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ImmutableSet.of(com.google.common.collect.ImmutableMap$V)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.4285717983674737
Suporte: 9.93378E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.4285717983674737
Suporte: 9.93378E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.34999969800015707
Suporte: 5.7947E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.34999969800015707
Suporte: 5.7947E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.342857438693979
Suporte: 9.93378E-4
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableMap.keyIterator() ************************
*Commit: commit 366da0b7956e2ae3e794c0d600d21e5dc7a404f0 1412002930 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableMap.entrySet()
com.google.common.collect.ImmutableSet.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getKey()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableSet.iterator()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableMap.entrySet()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6666666666666666
Suporte: 6.62252E-4
Posição da Sugestão: 2
**************************
Usuários que chamam:
com.google.common.collect.ImmutableMap.entrySet()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.6666666666666666
Suporte: 6.62252E-4
Posição da Sugestão: 2
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7487176628010704
Suporte: 0.0120861
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.2671233896790528
Suporte: 0.00322848
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
com.google.common.collect.AbstractIterator.endOfData()
Confiança: 0.26027419928678397
Suporte: 0.0031457
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.21134025754066105
Suporte: 0.00339404
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
com.google.common.collect.AbstractIterator.endOfData()
Confiança: 0.19587660962913148
Suporte: 0.0031457
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.19178064057057279
Suporte: 0.00231788
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Maps.unmodifiableEntryIterator(java.util.Iterator) ************************
*Commit: commit 366da0b7956e2ae3e794c0d600d21e5dc7a404f0 1412002930 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.collect.Maps.unmodifiableEntry(java.util.Map$Entry)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7487176628010704
Suporte: 0.0120861
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Maps.unmodifiableEntry(java.util.Map$Entry)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.2671233896790528
Suporte: 0.00322848
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
com.google.common.collect.AbstractIterator.endOfData()
Confiança: 0.26027419928678397
Suporte: 0.0031457
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.21134025754066105
Suporte: 0.00339404
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
com.google.common.collect.AbstractIterator.endOfData()
Confiança: 0.19587660962913148
Suporte: 0.0031457
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.19178064057057279
Suporte: 0.00231788
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableEnumMap.keyIterator() ************************
*Commit: commit 366da0b7956e2ae3e794c0d600d21e5dc7a404f0 1412002930 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.EnumMap.keySet()
java.util.Set.iterator()
com.google.common.collect.Iterators.unmodifiableIterator(java.util.Iterator)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Set.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Iterators.unmodifiableIterator(java.util.Iterator)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.4269669021587909
Suporte: 0.0031457
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.39325827446030226
Suporte: 0.00289735
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Confiança: 0.37078676086351636
Suporte: 0.00273179
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.19101058017929975
Suporte: 0.00140728
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.19101058017929975
Suporte: 0.00140728
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableMap.keyIterator() ************************
*Commit: commit 366da0b7956e2ae3e794c0d600d21e5dc7a404f0 1412002930 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableMap.entrySet()
com.google.common.collect.ImmutableSet.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getKey()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableSet.iterator()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableMap.entrySet()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6666666666666666
Suporte: 6.62252E-4
Posição da Sugestão: 2
**************************
Usuários que chamam:
com.google.common.collect.ImmutableMap.entrySet()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.6666666666666666
Suporte: 6.62252E-4
Posição da Sugestão: 2
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7487176628010704
Suporte: 0.0120861
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.2671233896790528
Suporte: 0.00322848
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
com.google.common.collect.AbstractIterator.endOfData()
Confiança: 0.26027419928678397
Suporte: 0.0031457
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.21134025754066105
Suporte: 0.00339404
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
com.google.common.collect.AbstractIterator.endOfData()
Confiança: 0.19587660962913148
Suporte: 0.0031457
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.19178064057057279
Suporte: 0.00231788
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Maps.unmodifiableEntryIterator(java.util.Iterator) ************************
*Commit: commit 366da0b7956e2ae3e794c0d600d21e5dc7a404f0 1412002930 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.collect.Maps.unmodifiableEntry(java.util.Map$Entry)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7487176628010704
Suporte: 0.0120861
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Maps.unmodifiableEntry(java.util.Map$Entry)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.2671233896790528
Suporte: 0.00322848
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
com.google.common.collect.AbstractIterator.endOfData()
Confiança: 0.26027419928678397
Suporte: 0.0031457
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.21134025754066105
Suporte: 0.00339404
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
com.google.common.collect.AbstractIterator.endOfData()
Confiança: 0.19587660962913148
Suporte: 0.0031457
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.19178064057057279
Suporte: 0.00231788
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Maps.indexMap(java.util.Collection) ************************
*Commit: commit f7e4a609d40d6ff422e5c90c860525b45b526250 1412003827 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Collection.size()
com.google.common.collect.ImmutableMap$Builder.put(com.google.common.collect.Maps$(Ljava/util/Collection;)Lcom/google/common/collect/ImmutableMap;$E, java.lang.Integer)
com.google.common.collect.ImmutableMap$Builder.build()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableMap$Builder.put(com.google.common.collect.Maps$(Ljava/util/Collection;)Lcom/google/common/collect/ImmutableMap;$E, java.lang.Integer)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Collection.clear()
Confiança: 0.2321431653062281
Suporte: 0.00107616
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Collection.size()
Confiança: 0.14285726612249125
Suporte: 6.62252E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.10714294959186843
Suporte: 4.96689E-4
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.ImmutableMap$Builder.build()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Maps.indexMap(java.util.Collection) ************************
*Commit: commit f7e4a609d40d6ff422e5c90c860525b45b526250 1412003827 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Collection.size()
com.google.common.collect.ImmutableMap$Builder.put(com.google.common.collect.Maps$(Ljava/util/Collection;)Lcom/google/common/collect/ImmutableMap;$E, java.lang.Integer)
com.google.common.collect.ImmutableMap$Builder.build()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableMap$Builder.put(com.google.common.collect.Maps$(Ljava/util/Collection;)Lcom/google/common/collect/ImmutableMap;$E, java.lang.Integer)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Collection.clear()
Confiança: 0.2321431653062281
Suporte: 0.00107616
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Collection.size()
Confiança: 0.14285726612249125
Suporte: 6.62252E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.10714294959186843
Suporte: 4.96689E-4
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.ImmutableMap$Builder.build()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableMap.copyOf(java.lang.Iterable) ************************
*Commit: commit d0a0c8fb1c7df372e617878c1d8414861558637d 1412003977 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableMap.fromEntryList(java.util.Collection)
java.lang.Iterable.iterator()
com.google.common.collect.Lists.newArrayList(java.util.Iterator)
com.google.common.collect.ImmutableMap.fromEntryList(java.util.Collection)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.Iterable.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Lists.newArrayList(java.util.Iterator)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Iterable.iterator()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.31521726285437424
Suporte: 0.00240066
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.Iterable.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.2608703644616716
Suporte: 0.00198676
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.Iterable.iterator()
Também chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Confiança: 0.2608703644616716
Suporte: 0.00198676
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.Iterable.iterator()
Também chamam:
java.util.Iterator.next()
java.util.Iterator.hasNext()
Confiança: 0.09782612406429189
Suporte: 7.45033E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.Iterable.iterator()
Também chamam:
java.util.Iterator.hasNext()
java.util.Iterator.hasNext()
Confiança: 0.09782612406429189
Suporte: 7.45033E-4
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.ImmutableMap.fromEntryList(java.util.Collection)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableMap.fromEntryList(java.util.Collection) ************************
*Commit: commit d0a0c8fb1c7df372e617878c1d8414861558637d 1412003977 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Collection.size()
com.google.common.collect.ImmutableMap.of()
com.google.common.collect.Iterables.getOnlyElement(java.lang.Iterable)
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.collect.ImmutableMap.of(com.google.common.collect.ImmutableMap$(Ljava/util/Collection;)Lcom/google/common/collect/ImmutableMap;$K, com.google.common.collect.ImmutableMap$(Ljava/util/Collection;)Lcom/google/common/collect/ImmutableMap;$V)
java.util.Collection.size()
java.util.Collection.toArray([Ljava.util.Map$Entry;)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableMap.of()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Collection.clear()
Confiança: 0.2321431653062281
Suporte: 0.00107616
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Collection.size()
Confiança: 0.14285726612249125
Suporte: 6.62252E-4
Posição da Sugestão: 2
**************************
Chamada: com.google.common.collect.Iterables.getOnlyElement(java.lang.Iterable)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7142866789717732
Suporte: 0.00951987
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ImmutableMap.of(com.google.common.collect.ImmutableMap$(Ljava/util/Collection;)Lcom/google/common/collect/ImmutableMap;$K, com.google.common.collect.ImmutableMap$(Ljava/util/Collection;)Lcom/google/common/collect/ImmutableMap;$V)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.14444422074130747
Suporte: 0.00215232
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.1388887770373204
Suporte: 0.00206954
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.size()
Confiança: 0.10434785348959598
Suporte: 9.93378E-4
Posição da Sugestão: 3
**************************
Chamada: java.util.Collection.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.toArray([Ljava.util.Map$Entry;)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Collection.clear()
Confiança: 0.2321431653062281
Suporte: 0.00107616
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Collection.size()
Confiança: 0.14285726612249125
Suporte: 6.62252E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.10714294959186843
Suporte: 4.96689E-4
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableSetMultimapTest$ImmutableSetMultimapGenerator.create([Ljava.util.Map$Entry;) ************************
*Commit: commit d0a0c8fb1c7df372e617878c1d8414861558637d 1412003977 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableSetMultimap.builder()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.collect.ImmutableSetMultimap$Builder.put(java.lang.String, java.lang.String)
com.google.common.collect.ImmutableSetMultimap$Builder.build()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableSetMultimap.builder()
Também chamam:
com.google.common.collect.ImmutableSetMultimap$Builder.build()
Confiança: 0.8749992450003926
Suporte: 5.7947E-4
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7142866789717732
Suporte: 0.00951987
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ImmutableSetMultimap$Builder.put(java.lang.String, java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.14444422074130747
Suporte: 0.00215232
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.1388887770373204
Suporte: 0.00206954
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.size()
Confiança: 0.10434785348959598
Suporte: 9.93378E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.09444388518660198
Suporte: 0.00140728
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.08695654457466331
Suporte: 8.27815E-4
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.ImmutableSetMultimap$Builder.build()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableBiMap.copyOf(java.lang.Iterable) ************************
*Commit: commit d0a0c8fb1c7df372e617878c1d8414861558637d 1412003977 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Iterables.toArray(java.lang.Iterable, java.lang.Class)
com.google.common.collect.ImmutableBiMap.of()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.collect.ImmutableBiMap.of(com.google.common.collect.ImmutableBiMap$(Ljava/lang/Iterable;)Lcom/google/common/collect/ImmutableBiMap;$K, com.google.common.collect.ImmutableBiMap$(Ljava/lang/Iterable;)Lcom/google/common/collect/ImmutableBiMap;$V)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableBiMap.of()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7142866789717732
Suporte: 0.00951987
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ImmutableBiMap.of(com.google.common.collect.ImmutableBiMap$(Ljava/lang/Iterable;)Lcom/google/common/collect/ImmutableBiMap;$K, com.google.common.collect.ImmutableBiMap$(Ljava/lang/Iterable;)Lcom/google/common/collect/ImmutableBiMap;$V)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.14444422074130747
Suporte: 0.00215232
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.1388887770373204
Suporte: 0.00206954
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.size()
Confiança: 0.10434785348959598
Suporte: 9.93378E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.09444388518660198
Suporte: 0.00140728
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.08695654457466331
Suporte: 8.27815E-4
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableMap.copyOf(java.lang.Iterable) ************************
*Commit: commit d0a0c8fb1c7df372e617878c1d8414861558637d 1412003977 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Iterables.toArray(java.lang.Iterable, java.lang.Class)
com.google.common.collect.ImmutableMap.of()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.collect.ImmutableMap.of(com.google.common.collect.ImmutableMap$(Ljava/lang/Iterable;)Lcom/google/common/collect/ImmutableMap;$K, com.google.common.collect.ImmutableMap$(Ljava/lang/Iterable;)Lcom/google/common/collect/ImmutableMap;$V)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableMap.of()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7142866789717732
Suporte: 0.00951987
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ImmutableMap.of(com.google.common.collect.ImmutableMap$(Ljava/lang/Iterable;)Lcom/google/common/collect/ImmutableMap;$K, com.google.common.collect.ImmutableMap$(Ljava/lang/Iterable;)Lcom/google/common/collect/ImmutableMap;$V)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.14444422074130747
Suporte: 0.00215232
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.1388887770373204
Suporte: 0.00206954
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.size()
Confiança: 0.10434785348959598
Suporte: 9.93378E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.09444388518660198
Suporte: 0.00140728
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.08695654457466331
Suporte: 8.27815E-4
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Maps$TransformedEntriesMap.entryIterator() ************************
*Commit: commit 1c5554dedb0924689285a34489ec1d6b57d076e9 1414678021 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.entrySet()
java.util.Set.iterator()
com.google.common.collect.Maps.asEntryToEntryFunction(com.google.common.collect.Maps$EntryTransformer)
com.google.common.collect.Iterators.transform(java.util.Iterator, com.google.common.base.Function)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Set.iterator()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.5795447213844774
Suporte: 0.00422185
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.5681812878100475
Suporte: 0.00413907
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Confiança: 0.4999993136365321
Suporte: 0.00364238
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Set.iterator()
Confiança: 0.261363090392696
Suporte: 0.00190397
Posição da Sugestão: 4
**************************
Chamada: com.google.common.collect.Maps.asEntryToEntryFunction(com.google.common.collect.Maps$EntryTransformer)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
java.util.Set.iterator()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.5217403635561485
Suporte: 9.93378E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.5217403635561485
Suporte: 9.93378E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Set.iterator()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.5217403635561485
Suporte: 9.93378E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Set.iterator()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.4782617373172896
Suporte: 9.10596E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Set.iterator()
Também chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Confiança: 0.4782617373172896
Suporte: 9.10596E-4
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Iterators.transform(java.util.Iterator, com.google.common.base.Function)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.HashBiMap.entryIterator() ************************
*Commit: commit 1c5554dedb0924689285a34489ec1d6b57d076e9 1414678021 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.HashBiMap.hash(java.lang.Object)
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
com.google.common.collect.HashBiMap.seekByValue(java.lang.Object, I)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.collect.HashBiMap.delete(com.google.common.collect.HashBiMap$BiEntry)
com.google.common.collect.HashBiMap.insert(com.google.common.collect.HashBiMap$BiEntry)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.HashBiMap.hash(java.lang.Object)
Também chamam:
com.google.common.collect.HashBiMap.delete(com.google.common.collect.HashBiMap$BiEntry)
Confiança: 0.7333344071127146
Suporte: 9.10596E-4
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.HashBiMap.seekByValue(java.lang.Object, I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.HashBiMap.hash(java.lang.Object)
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Também chamam:
com.google.common.collect.HashBiMap.insert(com.google.common.collect.HashBiMap$BiEntry)
Confiança: 1.0
Suporte: 5.7947E-4
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.HashBiMap.hash(java.lang.Object)
com.google.common.collect.HashBiMap.seekByValue(java.lang.Object, I)
Também chamam:
com.google.common.collect.HashBiMap.delete(com.google.common.collect.HashBiMap$BiEntry)
Confiança: 0.75
Suporte: 4.96689E-4
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.HashBiMap.delete(com.google.common.collect.HashBiMap$BiEntry)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2845532846858703
Suporte: 0.00289735
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
java.lang.String.length()
Confiança: 0.04878060517967807
Suporte: 4.96689E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.04878060517967807
Suporte: 4.96689E-4
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.HashBiMap.insert(com.google.common.collect.HashBiMap$BiEntry)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
com.google.common.collect.HashBiMap.delete(com.google.common.collect.HashBiMap$BiEntry)
Também chamam:
com.google.common.collect.HashBiMap.insert(com.google.common.collect.HashBiMap$BiEntry)
Confiança: 1.0
Suporte: 5.7947E-4
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.Maps$TransformedEntriesMap.entryIterator() ************************
*Commit: commit 1c5554dedb0924689285a34489ec1d6b57d076e9 1414678021 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.entrySet()
java.util.Set.iterator()
com.google.common.collect.Maps.asEntryToEntryFunction(com.google.common.collect.Maps$EntryTransformer)
com.google.common.collect.Iterators.transform(java.util.Iterator, com.google.common.base.Function)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Set.iterator()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.5795447213844774
Suporte: 0.00422185
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.5681812878100475
Suporte: 0.00413907
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Confiança: 0.4999993136365321
Suporte: 0.00364238
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Set.iterator()
Confiança: 0.261363090392696
Suporte: 0.00190397
Posição da Sugestão: 4
**************************
Chamada: com.google.common.collect.Maps.asEntryToEntryFunction(com.google.common.collect.Maps$EntryTransformer)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
java.util.Set.iterator()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.5217403635561485
Suporte: 9.93378E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.5217403635561485
Suporte: 9.93378E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Set.iterator()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.5217403635561485
Suporte: 9.93378E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Set.iterator()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.4782617373172896
Suporte: 9.10596E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Set.iterator()
Também chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Confiança: 0.4782617373172896
Suporte: 9.10596E-4
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Iterators.transform(java.util.Iterator, com.google.common.base.Function)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.StandardTable$Row.entryIterator() ************************
*Commit: commit 1c5554dedb0924689285a34489ec1d6b57d076e9 1414678021 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.StandardTable$Row.backingRowMap()
com.google.common.collect.Iterators.emptyModifiableIterator()
java.util.Map.entrySet()
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.StandardTable$V)
com.google.common.collect.ForwardingMapEntry.standardEquals(java.lang.Object)
java.util.Iterator.remove()
com.google.common.collect.StandardTable$Row.maintainEmptyInvariant()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Iterators.emptyModifiableIterator()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.entrySet()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Set.iterator()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.5795447213844774
Suporte: 0.00422185
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.5681812878100475
Suporte: 0.00413907
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Confiança: 0.4999993136365321
Suporte: 0.00364238
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Set.iterator()
Confiança: 0.261363090392696
Suporte: 0.00190397
Posição da Sugestão: 4
**************************
Chamada: java.util.Iterator.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
java.util.Set.iterator()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.5217403635561485
Suporte: 9.93378E-4
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.5217403635561485
Suporte: 9.93378E-4
Posição da Sugestão: 2
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
java.util.Set.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 1.0
Suporte: 9.10596E-4
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.StandardTable$V)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.916666163333595
Suporte: 9.10596E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.916666163333595
Suporte: 9.10596E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Set.iterator()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.916666163333595
Suporte: 9.10596E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Set.iterator()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.916666163333595
Suporte: 9.10596E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.9090914082644773
Suporte: 8.27815E-4
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.ForwardingMapEntry.standardEquals(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.remove()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.StandardTable$Row.maintainEmptyInvariant()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.remove()
Também chamam:
java.util.Collection.clear()
Confiança: 0.1
Suporte: 4.96689E-4
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.TreeRangeMap$AsMapOfRanges.entryIterator() ************************
*Commit: commit 1c5554dedb0924689285a34489ec1d6b57d076e9 1414678021 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.SortedMap.values()
java.util.Collection.iterator()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Collection.iterator()
** Sugestões fornecidas **
Usuários que chamam:
java.util.SortedMap.values()
Também chamam:
java.util.Collection.iterator()
Confiança: 0.8333333333333333
Suporte: 8.27815E-4
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.hash.BloomFilter.create(com.google.common.hash.Funnel, J, D, com.google.common.hash.BloomFilter$Strategy) ************************
*Commit: commit 727f62163b685f720a8c001532271f648e250fa2 1415306058 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.hash.Funnel)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.base.Preconditions.checkNotNull(com.google.common.hash.BloomFilter$Strategy)
com.google.common.hash.BloomFilter.optimalNumOfBits(J, D)
com.google.common.hash.BloomFilter.optimalNumOfHashFunctions(J, J)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2845532846858703
Suporte: 0.00289735
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2845532846858703
Suporte: 0.00289735
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.Preconditions.checkNotNull(com.google.common.hash.BloomFilter$Strategy)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2845532846858703
Suporte: 0.00289735
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.1714287193469895
Suporte: 4.96689E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
java.lang.String.length()
Confiança: 0.04878060517967807
Suporte: 4.96689E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.04878060517967807
Suporte: 4.96689E-4
Posição da Sugestão: 0
**************************
Chamada: com.google.common.hash.BloomFilter.optimalNumOfBits(J, D)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.hash.BloomFilter.optimalNumOfHashFunctions(J, J)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.base.Utf8Test.testEncodedLength_validStrings2() ************************
*Commit: commit f78ba14b0e1012184b67f2fe1a27d4d5aa3eb689 1415653667 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.HashMap.put(java.lang.Integer, java.lang.Integer)
java.util.HashMap.put(java.lang.Integer, java.lang.Integer)
java.util.HashMap.put(java.lang.Integer, java.lang.Integer)
java.util.HashMap.put(java.lang.Integer, java.lang.Integer)
java.util.HashMap.put(java.lang.Integer, java.lang.Integer)
java.util.HashMap.put(java.lang.Integer, java.lang.Integer)
java.util.HashMap.put(java.lang.Integer, java.lang.Integer)
java.util.HashMap.put(java.lang.Integer, java.lang.Integer)
java.util.HashMap.keySet()
java.util.Set.toArray([Ljava.lang.Integer;)
java.lang.AbstractStringBuilder.setLength(I)
java.util.Random.nextInt(I)
java.lang.StringBuilder.appendCodePoint(I)
java.util.HashMap.get(java.lang.Object)
com.google.common.base.Utf8.encodedLength(java.lang.CharSequence)
java.lang.AbstractStringBuilder.length()
java.lang.AbstractStringBuilder.charAt(I)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
com.google.common.base.Utf8.encodedLength(java.lang.CharSequence)
assertEquals
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.HashMap.put(java.lang.Integer, java.lang.Integer)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.HashMap.put(java.lang.Integer, java.lang.Integer)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.HashMap.put(java.lang.Integer, java.lang.Integer)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.HashMap.put(java.lang.Integer, java.lang.Integer)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.HashMap.put(java.lang.Integer, java.lang.Integer)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.HashMap.put(java.lang.Integer, java.lang.Integer)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.HashMap.put(java.lang.Integer, java.lang.Integer)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.HashMap.keySet()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Set.toArray([Ljava.lang.Integer;)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.AbstractStringBuilder.setLength(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Random.nextInt(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.appendCodePoint(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.HashMap.get(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Utf8.encodedLength(java.lang.CharSequence)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.AbstractStringBuilder.length()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.AbstractStringBuilder.charAt(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.9523817741499416
Suporte: 0.00331126
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.Utf8.encodedLength(java.lang.CharSequence)
Nenhuma sugestão fornecida.
**************************
Chamada: assertEquals
Nenhuma sugestão fornecida.
**************************
