************************ Método Avaliado: com.google.common.primitives.AndroidInteger.tryParse(java.lang.String, I, I, Z) ************************
*Commit: commit 72b2f75013ece02c4410a63e77579ba3c30ab774 1323448029 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.String.length()
java.lang.String.charAt(I)
java.lang.Character.digit(C, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.String.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.5121950033550847
Suporte: 0.00421348
Posição da Sugestão: 1
**************************
Chamada: java.lang.Character.digit(C, I)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.primitives.AndroidInteger.tryParse(java.lang.String, I) ************************
*Commit: commit 72b2f75013ece02c4410a63e77579ba3c30ab774 1323448029 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
java.lang.String.length()
java.lang.String.charAt(I)
com.google.common.primitives.AndroidInteger.tryParse(java.lang.String, I, I, Z)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
Confiança: 0.375
Suporte: 0.00300963
Posição da Sugestão: 4
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 4
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 4
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.String.length()
Confiança: 0.27499975079993216
Suporte: 0.00220706
Posição da Sugestão: 4
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2083336794451136
Suporte: 0.00300963
Posição da Sugestão: 1
**************************
Chamada: java.lang.String.length()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2083336794451136
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Chamada: java.lang.String.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.5121950033550847
Suporte: 0.00421348
Posição da Sugestão: 1
**************************
Chamada: com.google.common.primitives.AndroidInteger.tryParse(java.lang.String, I, I, Z)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableListMultimap.invert() ************************
*Commit: commit e4da692d191d2b3db21858f4b59abd70673674d3 1323809449 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableListMultimap.builder()
com.google.common.collect.ImmutableMultimap.entries()
java.util.Map$Entry.getValue()
java.util.Map$Entry.getKey()
com.google.common.collect.ImmutableListMultimap$Builder.put(com.google.common.collect.ImmutableListMultimap$V, com.google.common.collect.ImmutableListMultimap$K)
com.google.common.collect.ImmutableListMultimap$Builder.build()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableMultimap.entries()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableListMultimap.builder()
Também chamam:
com.google.common.collect.ImmutableListMultimap$Builder.build()
Confiança: 0.8571438742888878
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 2
**************************
Chamada: com.google.common.collect.ImmutableListMultimap$Builder.put(com.google.common.collect.ImmutableListMultimap$V, com.google.common.collect.ImmutableListMultimap$K)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.0848486221489221
Suporte: 0.00280899
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.07272721780709783
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.06060611552623551
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Confiança: 0.06060611552623551
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.ImmutableListMultimap$Builder.build()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableSetMultimap.invert() ************************
*Commit: commit e4da692d191d2b3db21858f4b59abd70673674d3 1323809449 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableSetMultimap.builder()
com.google.common.collect.ImmutableSetMultimap.entries()
java.util.Map$Entry.getValue()
java.util.Map$Entry.getKey()
com.google.common.collect.ImmutableSetMultimap$Builder.put(com.google.common.collect.ImmutableSetMultimap$V, com.google.common.collect.ImmutableSetMultimap$K)
com.google.common.collect.ImmutableSetMultimap$Builder.build()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableSetMultimap.entries()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 2
**************************
Chamada: com.google.common.collect.ImmutableSetMultimap$Builder.put(com.google.common.collect.ImmutableSetMultimap$V, com.google.common.collect.ImmutableSetMultimap$K)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.0848486221489221
Suporte: 0.00280899
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.07272721780709783
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.06060611552623551
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Confiança: 0.06060611552623551
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.ImmutableSetMultimap$Builder.build()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableListMultimap.invert() ************************
*Commit: commit e4da692d191d2b3db21858f4b59abd70673674d3 1323809449 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableListMultimap.builder()
com.google.common.collect.ImmutableMultimap.entries()
java.util.Map$Entry.getValue()
java.util.Map$Entry.getKey()
com.google.common.collect.ImmutableListMultimap$Builder.put(com.google.common.collect.ImmutableListMultimap$V, com.google.common.collect.ImmutableListMultimap$K)
com.google.common.collect.ImmutableListMultimap$Builder.build()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableMultimap.entries()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableListMultimap.builder()
Também chamam:
com.google.common.collect.ImmutableListMultimap$Builder.build()
Confiança: 0.8571438742888878
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 2
**************************
Chamada: com.google.common.collect.ImmutableListMultimap$Builder.put(com.google.common.collect.ImmutableListMultimap$V, com.google.common.collect.ImmutableListMultimap$K)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.0848486221489221
Suporte: 0.00280899
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.07272721780709783
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.06060611552623551
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Confiança: 0.06060611552623551
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.ImmutableListMultimap$Builder.build()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableSetMultimap.invert() ************************
*Commit: commit e4da692d191d2b3db21858f4b59abd70673674d3 1323809449 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableSetMultimap.builder()
com.google.common.collect.ImmutableSetMultimap.entries()
java.util.Map$Entry.getValue()
java.util.Map$Entry.getKey()
com.google.common.collect.ImmutableSetMultimap$Builder.put(com.google.common.collect.ImmutableSetMultimap$V, com.google.common.collect.ImmutableSetMultimap$K)
com.google.common.collect.ImmutableSetMultimap$Builder.build()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableSetMultimap.entries()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 2
**************************
Chamada: com.google.common.collect.ImmutableSetMultimap$Builder.put(com.google.common.collect.ImmutableSetMultimap$V, com.google.common.collect.ImmutableSetMultimap$K)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.0848486221489221
Suporte: 0.00280899
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.07272721780709783
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.06060611552623551
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Confiança: 0.06060611552623551
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.ImmutableSetMultimap$Builder.build()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.cache.CacheBuilder.refreshAfterWrite(J, java.util.concurrent.TimeUnit) ************************
*Commit: commit 852dcdc3a06a889d9a24e8e02d25d4cd1aa5bf37 1323809455 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.util.concurrent.TimeUnit)
com.google.common.base.Preconditions.checkState(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
java.util.concurrent.TimeUnit.toNanos(J)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkState(Z, java.lang.String, [Ljava.lang.Object;)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.TimeUnit.toNanos(J)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2083336794451136
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
************************ Método Avaliado: newHasher ************************
*Commit: commit f9318924b71d4ed2c59d3d835fe6a4ce3feefcbf 1323886452 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkArgument(Z)
newHasher
---------------- Chamadas de método adicionadas ---------------
Chamada: newHasher
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z)
Também chamam:
java.util.Iterator.next()
Confiança: 0.07608659143728567
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.hash.AbstractStreamingHashFunction$AbstractStreamingHasher.AbstractStreamingHasher(I, I) ************************
*Commit: commit f9318924b71d4ed2c59d3d835fe6a4ce3feefcbf 1323886452 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkArgument(Z)
java.nio.ByteBuffer.allocate(I)
java.nio.ByteBuffer.order(java.nio.ByteOrder)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.nio.ByteBuffer.allocate(I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z)
Também chamam:
java.util.Iterator.next()
Confiança: 0.07608659143728567
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: java.nio.ByteBuffer.order(java.nio.ByteOrder)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: putString ************************
*Commit: commit f9318924b71d4ed2c59d3d835fe6a4ce3feefcbf 1323886452 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
putChar
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.CharSequence.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.5897439501906699
Suporte: 0.00461477
Posição da Sugestão: 1
**************************
Chamada: putChar
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
Também chamam:
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.3913044420415319
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
Também chamam:
java.lang.CharSequence.toString()
Confiança: 0.3478266522491912
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.charAt(I)
Também chamam:
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.33333333333333337
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.charAt(I)
Também chamam:
java.lang.CharSequence.toString()
Confiança: 0.29629670650171486
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
Também chamam:
java.lang.CharSequence.subSequence(I, I)
Confiança: 0.26086890570927695
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.hash.HashCode.writeBytesTo([B, I, I) ************************
*Commit: commit f9318924b71d4ed2c59d3d835fe6a4ce3feefcbf 1323886452 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.hash.HashCode.asBytes()
com.google.common.primitives.Ints.min([I)
com.google.common.base.Preconditions.checkPositionIndexes(I, I, I)
java.lang.System.arraycopy(java.lang.Object, I, java.lang.Object, I, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.primitives.Ints.min([I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkPositionIndexes(I, I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.System.arraycopy(java.lang.Object, I, java.lang.Object, I, I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkPositionIndexes(I, I, I)
Também chamam:
java.util.Collections.emptyList()
Confiança: 0.5333346624003614
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.hash.HashCode.toString() ************************
*Commit: commit f9318924b71d4ed2c59d3d835fe6a4ce3feefcbf 1323886452 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.hash.HashCode.asBytes()
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.toString()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.StringBuilder.append(C)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.8139531110006131
Suporte: 0.00702247
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00461477
Posição da Sugestão: 1
**************************
************************ Método Avaliado: combineOrdered ************************
*Commit: commit f9318924b71d4ed2c59d3d835fe6a4ce3feefcbf 1323886452 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
iterator
hasNext
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
next
bits
asBytes
com.google.common.base.Preconditions.checkArgument(Z, java.lang.Object)
fromBytes
---------------- Chamadas de método adicionadas ---------------
Chamada: hasNext
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Nenhuma sugestão fornecida.
**************************
Chamada: next
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2083336794451136
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Chamada: bits
Nenhuma sugestão fornecida.
**************************
Chamada: asBytes
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: fromBytes
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: combineUnordered ************************
*Commit: commit f9318924b71d4ed2c59d3d835fe6a4ce3feefcbf 1323886452 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
iterator
hasNext
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
next
bits
asBytes
com.google.common.base.Preconditions.checkArgument(Z, java.lang.Object)
fromBytes
---------------- Chamadas de método adicionadas ---------------
Chamada: hasNext
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Nenhuma sugestão fornecida.
**************************
Chamada: next
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2083336794451136
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Chamada: bits
Nenhuma sugestão fornecida.
**************************
Chamada: asBytes
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: fromBytes
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: putBytes ************************
*Commit: commit f9318924b71d4ed2c59d3d835fe6a4ce3feefcbf 1323886452 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.hash.MessageDigestHashFunction$MessageDigestHasher.checkNotDone()
com.google.common.base.Preconditions.checkPositionIndexes(I, I, I)
java.security.MessageDigest.update([B, I, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkPositionIndexes(I, I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.security.MessageDigest.update([B, I, I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkPositionIndexes(I, I, I)
Também chamam:
java.util.Collections.emptyList()
Confiança: 0.5333346624003614
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.base.Joiner.appendTo(com.google.common.base.Joiner$(Ljava/lang/Appendable;Ljava/util/Iterator;)Ljava/lang/Appendable;$A, java.util.Iterator) ************************
*Commit: commit 8fce2b3fd00ec920f4621bb42b7e1862a732ed1c 1324062214 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Joiner$(Ljava/lang/Appendable;Ljava/util/Iterator;)Ljava/lang/Appendable;$A)
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.base.Joiner.toString(java.lang.Object)
java.lang.Appendable.append(java.lang.CharSequence)
java.util.Iterator.hasNext()
java.lang.Appendable.append(java.lang.CharSequence)
java.util.Iterator.next()
com.google.common.base.Joiner.toString(java.lang.Object)
java.lang.Appendable.append(java.lang.CharSequence)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7087362667937666
Suporte: 0.0292937
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.Joiner.toString(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.43835705288167764
Suporte: 0.0128411
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.2260277807173556
Suporte: 0.00662119
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.21621642251782006
Suporte: 0.00963082
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.1666668911713532
Suporte: 0.00742376
Posição da Sugestão: 0
**************************
Chamada: java.lang.Appendable.append(java.lang.CharSequence)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Appendable.append(java.lang.CharSequence)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.8571426028572547
Suporte: 0.00481541
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.next()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Joiner.toString(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.43835705288167764
Suporte: 0.0128411
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.2260277807173556
Suporte: 0.00662119
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.2222216069140944
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.21621642251782006
Suporte: 0.00963082
Posição da Sugestão: 0
**************************
Chamada: java.lang.Appendable.append(java.lang.CharSequence)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.base.Joiner$MapJoiner.appendTo(com.google.common.base.Joiner$MapJoiner$(Ljava/lang/Appendable;Ljava/util/Iterator;)Ljava/lang/Appendable;$A, java.util.Iterator) ************************
*Commit: commit 8fce2b3fd00ec920f4621bb42b7e1862a732ed1c 1324062214 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Joiner$MapJoiner$(Ljava/lang/Appendable;Ljava/util/Iterator;)Ljava/lang/Appendable;$A)
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getKey()
com.google.common.base.Joiner.toString(java.lang.Object)
java.lang.Appendable.append(java.lang.CharSequence)
java.lang.Appendable.append(java.lang.CharSequence)
java.util.Map$Entry.getValue()
com.google.common.base.Joiner.toString(java.lang.Object)
java.lang.Appendable.append(java.lang.CharSequence)
java.util.Iterator.hasNext()
java.lang.Appendable.append(java.lang.CharSequence)
java.util.Iterator.next()
java.util.Map$Entry.getKey()
com.google.common.base.Joiner.toString(java.lang.Object)
java.lang.Appendable.append(java.lang.CharSequence)
java.lang.Appendable.append(java.lang.CharSequence)
java.util.Map$Entry.getValue()
com.google.common.base.Joiner.toString(java.lang.Object)
java.lang.Appendable.append(java.lang.CharSequence)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7087362667937666
Suporte: 0.0292937
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.43835705288167764
Suporte: 0.0128411
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.2260277807173556
Suporte: 0.00662119
Posição da Sugestão: 3
**************************
Chamada: com.google.common.base.Joiner.toString(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7083322084723834
Suporte: 0.00341091
Posição da Sugestão: 1
**************************
Chamada: java.lang.Appendable.append(java.lang.CharSequence)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Appendable.append(java.lang.CharSequence)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Joiner.toString(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.6060602399266597
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.6060602399266597
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5294129719048583
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5294129719048583
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.41666649361113595
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Chamada: java.lang.Appendable.append(java.lang.CharSequence)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Appendable.append(java.lang.CharSequence)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.8571426028572547
Suporte: 0.00481541
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.next()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.43835705288167764
Suporte: 0.0128411
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.2260277807173556
Suporte: 0.00662119
Posição da Sugestão: 3
**************************
Chamada: com.google.common.base.Joiner.toString(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7142852057145095
Suporte: 0.00200642
Posição da Sugestão: 1
**************************
Chamada: java.lang.Appendable.append(java.lang.CharSequence)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Appendable.append(java.lang.CharSequence)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Joiner.toString(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.6060602399266597
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.6060602399266597
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5294129719048583
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5294129719048583
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.41666649361113595
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Chamada: java.lang.Appendable.append(java.lang.CharSequence)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Interners$WeakInterner.intern(com.google.common.collect.Interners$WeakInterner$E) ************************
*Commit: commit 674fc65b8d5bc466c7bbc138deabba957fa0df25 1326260772 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.MapMakerInternalMap.getEntry(java.lang.Object)
com.google.common.collect.MapMakerInternalMap$ReferenceEntry.getKey()
com.google.common.collect.MapMakerInternalMap.putIfAbsent(com.google.common.collect.Interners$WeakInterner$E, com.google.common.collect.Interners$WeakInterner$Dummy)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.MapMakerInternalMap$ReferenceEntry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.MapMakerInternalMap.putIfAbsent(com.google.common.collect.Interners$WeakInterner$E, com.google.common.collect.Interners$WeakInterner$Dummy)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.MapMakerInternalMap$ReferenceEntry.getKey()
Também chamam:
com.google.common.collect.MapMakerInternalMap$ReferenceEntry.getValueReference()
Confiança: 0.7368422433240648
Suporte: 0.00280899
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.MapMakerInternalMap$ReferenceEntry.getKey()
Também chamam:
com.google.common.collect.MapMakerInternalMap$ValueReference.get()
Confiança: 0.6315775667593516
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.MapMakerInternalMap$ReferenceEntry.getKey()
Também chamam:
com.google.common.collect.MapMakerInternalMap$ReferenceEntry.getValueReference()
com.google.common.collect.MapMakerInternalMap$ValueReference.get()
Confiança: 0.6315775667593516
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.MapMakerInternalMap$ReferenceEntry.getKey()
Também chamam:
java.util.concurrent.atomic.AtomicReferenceArray.set(I, com.google.common.collect.MapMakerInternalMap$ReferenceEntry)
Confiança: 0.5263155133518703
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.MapMakerInternalMap$ReferenceEntry.getKey()
Também chamam:
com.google.common.collect.MapMakerInternalMap$ReferenceEntry.getHash()
Confiança: 0.5263155133518703
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ForwardingNavigableMap.standardPollFirstEntry() ************************
*Commit: commit 381584a0f4124a9316dd2d7219033d2a981a3289 1328804059 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ForwardingMap.entrySet()
java.util.Set.iterator()
com.google.common.collect.ForwardingNavigableMap.poll(java.util.Iterator)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Set.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ForwardingNavigableMap.poll(java.util.Iterator)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.6374957947593357
Suporte: 0.0102327
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.5249990655020746
Suporte: 0.00842697
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Confiança: 0.48749890975242033
Suporte: 0.00782504
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.36249922125172884
Suporte: 0.00581862
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
java.util.Iterator.remove()
Confiança: 0.34999937700138306
Suporte: 0.00561798
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ForwardingNavigableMap.poll(java.util.Iterator) ************************
*Commit: commit 381584a0f4124a9316dd2d7219033d2a981a3289 1328804059 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Iterator.remove()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7087362667937666
Suporte: 0.0292937
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.remove()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.43835705288167764
Suporte: 0.0128411
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.ForwardingNavigableMap.standardPollLastEntry() ************************
*Commit: commit 381584a0f4124a9316dd2d7219033d2a981a3289 1328804059 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ForwardingNavigableMap.descendingMap()
java.util.SortedMap.entrySet()
java.util.Set.iterator()
com.google.common.collect.ForwardingNavigableMap.poll(java.util.Iterator)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.SortedMap.entrySet()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Set.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ForwardingNavigableMap.poll(java.util.Iterator)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.6374957947593357
Suporte: 0.0102327
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.5249990655020746
Suporte: 0.00842697
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Confiança: 0.48749890975242033
Suporte: 0.00782504
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.36249922125172884
Suporte: 0.00581862
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
java.util.Iterator.remove()
Confiança: 0.34999937700138306
Suporte: 0.00561798
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap.entryIterator() ************************
*Commit: commit 381584a0f4124a9316dd2d7219033d2a981a3289 1328804059 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap.forward()
java.util.NavigableMap.lastEntry()
null.hasNext()
com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap.forward()
java.util.Map$Entry.getKey()
java.util.NavigableMap.lowerEntry(com.google.common.collect.ForwardingNavigableMap$K)
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap.forward()
java.util.Map$Entry.getKey()
java.util.Map.remove(java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.NavigableMap.lastEntry()
Nenhuma sugestão fornecida.
**************************
Chamada: null.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap.forward()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.NavigableMap.lowerEntry(com.google.common.collect.ForwardingNavigableMap$K)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.0848486221489221
Suporte: 0.00280899
Posição da Sugestão: 2
**************************
Chamada: com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ForwardingNavigableMap$StandardDescendingMap.forward()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5217378114185539
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.26086890570927695
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.26086890570927695
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.remove(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7142852057145095
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.0848486221489221
Suporte: 0.00280899
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.07272721780709783
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.06060611552623551
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Maps$DescendingMap.comparator() ************************
*Commit: commit 381584a0f4124a9316dd2d7219033d2a981a3289 1328804059 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Maps$DescendingMap.forward()
java.util.SortedMap.comparator()
com.google.common.collect.Ordering.natural()
com.google.common.collect.Maps$DescendingMap.reverse(java.util.Comparator)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.SortedMap.comparator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Ordering.natural()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Maps$DescendingMap.reverse(java.util.Comparator)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
java.util.Arrays.asList([Ljava.lang.Comparable;)
Confiança: 0.18867970660146702
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
com.google.common.collect.ImmutableSortedMultiset.copyOf(java.util.Comparator, java.lang.Iterable)
Confiança: 0.1320754184690615
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
com.google.common.collect.Ordering.natural()
Confiança: 0.1320754184690615
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
com.google.common.collect.ImmutableSortedSet.copyOf(java.util.Comparator, java.util.Collection)
Confiança: 0.1320754184690615
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.base.CharMatcher$Or.toString() ************************
*Commit: commit a324899e2e017a5ea275e8d2c6b2fcf95ca73613 1328837090 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Joiner.on(java.lang.String)
com.google.common.base.Joiner.appendTo(java.lang.StringBuilder, java.lang.Iterable)
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.toString()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Joiner.appendTo(java.lang.StringBuilder, java.lang.Iterable)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(C)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.8139531110006131
Suporte: 0.00702247
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.base.CharMatcher$And.toString() ************************
*Commit: commit a324899e2e017a5ea275e8d2c6b2fcf95ca73613 1328837090 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Joiner.on(java.lang.String)
com.google.common.base.Joiner.appendTo(java.lang.StringBuilder, java.lang.Iterable)
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.toString()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Joiner.appendTo(java.lang.StringBuilder, java.lang.Iterable)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(C)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.8139531110006131
Suporte: 0.00702247
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.ForwardingNavigableSet.poll(java.util.Iterator) ************************
*Commit: commit 7806203c8f5e3f351b9d71744c33aa115aa43725 1328837093 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Iterator.remove()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7087362667937666
Suporte: 0.0292937
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.remove()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.43835705288167764
Suporte: 0.0128411
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.Sets$DescendingSet.comparator() ************************
*Commit: commit 7806203c8f5e3f351b9d71744c33aa115aa43725 1328837093 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.SortedSet.comparator()
com.google.common.collect.Ordering.natural()
com.google.common.collect.Ordering.reverse()
com.google.common.collect.Sets$DescendingSet.reverse(java.util.Comparator)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Ordering.natural()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Ordering.reverse()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
java.util.Arrays.asList([Ljava.lang.Comparable;)
Confiança: 0.18867970660146702
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
com.google.common.collect.ImmutableSortedMultiset.copyOf(java.util.Comparator, java.lang.Iterable)
Confiança: 0.1320754184690615
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
com.google.common.collect.Ordering.natural()
Confiança: 0.1320754184690615
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
com.google.common.collect.ImmutableSortedSet.copyOf(java.util.Comparator, java.util.Collection)
Confiança: 0.1320754184690615
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Sets$DescendingSet.reverse(java.util.Comparator)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.base.Enums.getIfPresent(java.lang.Class, java.lang.String) ************************
*Commit: commit 22fc7ff20615bebb9029184dcc0e33067035edae 1328837096 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.Class)
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
java.lang.Enum.valueOf(java.lang.Class, java.lang.String)
com.google.common.base.Optional.of(com.google.common.base.Enums$(Ljava/lang/Class;Ljava/lang/String;)Lcom/google/common/base/Optional;$T)
com.google.common.base.Optional.absent()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Enum.valueOf(java.lang.Class, java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
Confiança: 0.375
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.String.length()
Confiança: 0.27499975079993216
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Chamada: com.google.common.base.Optional.of(com.google.common.base.Enums$(Ljava/lang/Class;Ljava/lang/String;)Lcom/google/common/base/Optional;$T)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Optional.absent()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.base.Enums.getIfPresent(java.lang.Class, java.lang.String) ************************
*Commit: commit da2e687edd79b6bbab3d279de529a71ed034c2e6 1329329742 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.Class)
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
java.lang.Enum.valueOf(java.lang.Class, java.lang.String)
com.google.common.base.Optional.of(com.google.common.base.Enums$(Ljava/lang/Class;Ljava/lang/String;)Lcom/google/common/base/Optional;$T)
com.google.common.base.Optional.absent()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Enum.valueOf(java.lang.Class, java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
Confiança: 0.375
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.String.length()
Confiança: 0.27499975079993216
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Chamada: com.google.common.base.Optional.of(com.google.common.base.Enums$(Ljava/lang/Class;Ljava/lang/String;)Lcom/google/common/base/Optional;$T)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Optional.absent()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.base.Absent.transform(com.google.common.base.Function) ************************
*Commit: commit 0823847e96b1d082e94f06327cf218e418fe2228 1329838544 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Function)
com.google.common.base.Optional.absent()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Optional.absent()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Function)
Também chamam:
com.google.common.base.Function.apply(null)
Confiança: 0.4399996012798915
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.net.MediaType.toString() ************************
*Commit: commit 2daad4cb6bdd1ba3ae36f4bdab8fd4dbb7cf78a7 1329917065 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(java.lang.String)
com.google.common.collect.ImmutableMultimap.isEmpty()
java.lang.StringBuilder.append(java.lang.String)
com.google.common.collect.Multimaps.transformValues(com.google.common.collect.ListMultimap, com.google.common.base.Function)
com.google.common.base.CharMatcher.matchesAllOf(java.lang.CharSequence)
java.lang.StringBuilder.append(C)
com.google.common.escape.CharEscaper.escape(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.toString()
com.google.common.collect.Multimap.entries()
com.google.common.base.Joiner$MapJoiner.appendTo(java.lang.StringBuilder, java.lang.Iterable)
java.lang.StringBuilder.toString()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.StringBuilder.append(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.8780487508387711
Suporte: 0.00722311
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.9090896733897734
Suporte: 0.00401284
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ImmutableMultimap.isEmpty()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.0024077
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Multimaps.transformValues(com.google.common.collect.ListMultimap, com.google.common.base.Function)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.0024077
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.CharMatcher.matchesAllOf(java.lang.CharSequence)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(C)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.escape.CharEscaper.escape(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00461477
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.0024077
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00461477
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Multimap.entries()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Joiner$MapJoiner.appendTo(java.lang.StringBuilder, java.lang.Iterable)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multimap.entries()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6470589959864083
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Multimap.entries()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.47058995986408314
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Multimap.entries()
Também chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Confiança: 0.3529410040135917
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: java.lang.StringBuilder.toString()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.net.MediaType.withParameter(java.lang.String, java.lang.String) ************************
*Commit: commit 2daad4cb6bdd1ba3ae36f4bdab8fd4dbb7cf78a7 1329917065 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
com.google.common.net.MediaType.normalizeToken(java.lang.String)
com.google.common.collect.ImmutableListMultimap.builder()
com.google.common.collect.ImmutableMultimap.entries()
java.util.Map$Entry.getKey()
java.lang.String.equals(java.lang.Object)
java.util.Map$Entry.getValue()
com.google.common.collect.ImmutableListMultimap$Builder.put(java.lang.String, java.lang.String)
com.google.common.net.MediaType.normalizeParameterValue(java.lang.String, java.lang.String)
com.google.common.collect.ImmutableListMultimap$Builder.put(java.lang.String, java.lang.String)
com.google.common.collect.ImmutableListMultimap$Builder.build()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkNotNull(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
Confiança: 0.375
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.String.length()
Confiança: 0.27499975079993216
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Chamada: com.google.common.net.MediaType.normalizeToken(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
Confiança: 0.375
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.String.length()
Confiança: 0.27499975079993216
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.ImmutableListMultimap.builder()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableMultimap.entries()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableListMultimap.builder()
Também chamam:
com.google.common.collect.ImmutableListMultimap$Builder.build()
Confiança: 0.8571438742888878
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.equals(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableListMultimap$Builder.put(java.lang.String, java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.0891091942678931
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Chamada: com.google.common.net.MediaType.normalizeParameterValue(java.lang.String, java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableListMultimap$Builder.put(java.lang.String, java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableListMultimap$Builder.build()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.net.MediaType$Tokenizer.previewChar() ************************
*Commit: commit 2daad4cb6bdd1ba3ae36f4bdab8fd4dbb7cf78a7 1329917065 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.net.MediaType$Tokenizer.hasMore()
com.google.common.base.Preconditions.checkState(Z)
java.lang.String.charAt(I)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkState(Z)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.net.MediaType.normalizeToken(java.lang.String) ************************
*Commit: commit 2daad4cb6bdd1ba3ae36f4bdab8fd4dbb7cf78a7 1329917065 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.CharMatcher.matchesAllOf(java.lang.CharSequence)
com.google.common.base.Preconditions.checkArgument(Z)
com.google.common.base.Ascii.toLowerCase(java.lang.String)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkArgument(Z)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Ascii.toLowerCase(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z)
Também chamam:
java.util.Iterator.next()
Confiança: 0.07608659143728567
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.net.MediaType$Tokenizer.consumeToken(com.google.common.base.CharMatcher) ************************
*Commit: commit 2daad4cb6bdd1ba3ae36f4bdab8fd4dbb7cf78a7 1329917065 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.net.MediaType$Tokenizer.hasMore()
com.google.common.base.Preconditions.checkState(Z)
com.google.common.base.CharMatcher.negate()
com.google.common.base.CharMatcher.indexIn(java.lang.CharSequence, I)
com.google.common.base.Preconditions.checkState(Z)
com.google.common.net.MediaType$Tokenizer.hasMore()
java.lang.String.substring(I, I)
java.lang.String.substring(I)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkState(Z)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.CharMatcher.negate()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: com.google.common.base.CharMatcher.indexIn(java.lang.CharSequence, I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkState(Z)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.net.MediaType$Tokenizer.hasMore()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: java.lang.String.substring(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.substring(I)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.net.MediaType.parse(java.lang.String) ************************
*Commit: commit 2daad4cb6bdd1ba3ae36f4bdab8fd4dbb7cf78a7 1329917065 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
com.google.common.net.MediaType$Tokenizer.consumeToken(com.google.common.base.CharMatcher)
com.google.common.net.MediaType$Tokenizer.consumeCharacter(C)
com.google.common.net.MediaType$Tokenizer.consumeToken(com.google.common.base.CharMatcher)
com.google.common.collect.ImmutableListMultimap.builder()
com.google.common.net.MediaType$Tokenizer.hasMore()
com.google.common.net.MediaType$Tokenizer.consumeCharacter(C)
com.google.common.net.MediaType$Tokenizer.consumeCharacter(C)
com.google.common.net.MediaType$Tokenizer.consumeToken(com.google.common.base.CharMatcher)
com.google.common.net.MediaType$Tokenizer.consumeCharacter(C)
com.google.common.net.MediaType$Tokenizer.previewChar()
com.google.common.net.MediaType$Tokenizer.consumeCharacter(C)
com.google.common.net.MediaType$Tokenizer.previewChar()
com.google.common.net.MediaType$Tokenizer.previewChar()
com.google.common.net.MediaType$Tokenizer.consumeCharacter(C)
com.google.common.net.MediaType$Tokenizer.consumeCharacter(com.google.common.base.CharMatcher)
java.lang.StringBuilder.append(C)
com.google.common.net.MediaType$Tokenizer.consumeToken(com.google.common.base.CharMatcher)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
com.google.common.net.MediaType$Tokenizer.consumeCharacter(C)
com.google.common.net.MediaType$Tokenizer.consumeToken(com.google.common.base.CharMatcher)
com.google.common.collect.ImmutableListMultimap$Builder.put(java.lang.String, java.lang.String)
com.google.common.collect.ImmutableListMultimap$Builder.build()
com.google.common.net.MediaType.create(java.lang.String, java.lang.String, com.google.common.collect.Multimap)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.net.MediaType$Tokenizer.consumeToken(com.google.common.base.CharMatcher)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
Confiança: 0.375
Suporte: 0.00300963
Posição da Sugestão: 1
**************************
Chamada: com.google.common.net.MediaType$Tokenizer.consumeCharacter(C)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.net.MediaType$Tokenizer.consumeToken(com.google.common.base.CharMatcher)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableListMultimap.builder()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.net.MediaType$Tokenizer.hasMore()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableListMultimap.builder()
Também chamam:
com.google.common.collect.ImmutableListMultimap$Builder.build()
Confiança: 0.8571438742888878
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: com.google.common.net.MediaType$Tokenizer.consumeCharacter(C)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.net.MediaType$Tokenizer.consumeCharacter(C)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.net.MediaType$Tokenizer.consumeToken(com.google.common.base.CharMatcher)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.net.MediaType$Tokenizer.consumeCharacter(C)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.net.MediaType$Tokenizer.previewChar()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.net.MediaType$Tokenizer.consumeCharacter(C)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.net.MediaType$Tokenizer.previewChar()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.net.MediaType$Tokenizer.previewChar()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.net.MediaType$Tokenizer.consumeCharacter(C)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.net.MediaType$Tokenizer.consumeCharacter(com.google.common.base.CharMatcher)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(C)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.net.MediaType$Tokenizer.consumeToken(com.google.common.base.CharMatcher)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.8139531110006131
Suporte: 0.00702247
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00401284
Posição da Sugestão: 1
**************************
Chamada: com.google.common.net.MediaType$Tokenizer.consumeCharacter(C)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.net.MediaType$Tokenizer.consumeToken(com.google.common.base.CharMatcher)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableListMultimap$Builder.put(java.lang.String, java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableListMultimap$Builder.build()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.net.MediaType.create(java.lang.String, java.lang.String, com.google.common.collect.Multimap)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.net.MediaType$Tokenizer.consumeCharacter(C) ************************
*Commit: commit 2daad4cb6bdd1ba3ae36f4bdab8fd4dbb7cf78a7 1329917065 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.net.MediaType$Tokenizer.hasMore()
com.google.common.base.Preconditions.checkState(Z)
com.google.common.net.MediaType$Tokenizer.previewChar()
com.google.common.base.Preconditions.checkState(Z)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkState(Z)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.net.MediaType$Tokenizer.previewChar()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: com.google.common.base.Preconditions.checkState(Z)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.net.MediaType$Tokenizer.consumeCharacter(com.google.common.base.CharMatcher) ************************
*Commit: commit 2daad4cb6bdd1ba3ae36f4bdab8fd4dbb7cf78a7 1329917065 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.net.MediaType$Tokenizer.hasMore()
com.google.common.base.Preconditions.checkState(Z)
com.google.common.net.MediaType$Tokenizer.previewChar()
com.google.common.base.CharMatcher.matches(C)
com.google.common.base.Preconditions.checkState(Z)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkState(Z)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.net.MediaType$Tokenizer.previewChar()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: com.google.common.base.CharMatcher.matches(C)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkState(Z)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.net.MediaType.create(java.lang.String, java.lang.String, com.google.common.collect.Multimap) ************************
*Commit: commit 2daad4cb6bdd1ba3ae36f4bdab8fd4dbb7cf78a7 1329917065 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Multimap)
com.google.common.net.MediaType.normalizeToken(java.lang.String)
com.google.common.net.MediaType.normalizeToken(java.lang.String)
com.google.common.collect.Multimap.isEmpty()
com.google.common.collect.ImmutableListMultimap.builder()
com.google.common.collect.Multimap.entries()
java.util.Map$Entry.getKey()
com.google.common.net.MediaType.normalizeToken(java.lang.String)
java.util.Map$Entry.getValue()
com.google.common.net.MediaType.normalizeParameterValue(java.lang.String, java.lang.String)
com.google.common.collect.ImmutableListMultimap$Builder.put(java.lang.String, java.lang.String)
com.google.common.collect.ImmutableListMultimap$Builder.build()
com.google.common.collect.ImmutableMap.get(java.lang.Object)
com.google.common.base.Objects.firstNonNull(com.google.common.net.MediaType, com.google.common.net.MediaType)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkNotNull(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
Confiança: 0.375
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.String.length()
Confiança: 0.27499975079993216
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Chamada: com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Multimap)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
Confiança: 0.375
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.String.length()
Confiança: 0.27499975079993216
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Chamada: com.google.common.net.MediaType.normalizeToken(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.net.MediaType.normalizeToken(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Multimap.isEmpty()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableListMultimap.builder()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Multimap.entries()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableListMultimap.builder()
Também chamam:
com.google.common.collect.ImmutableListMultimap$Builder.build()
Confiança: 0.8571438742888878
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multimap.entries()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6470589959864083
Suporte: 0.00220706
Posição da Sugestão: 1
**************************
Chamada: com.google.common.net.MediaType.normalizeToken(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multimap.entries()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7499968850069153
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.net.MediaType.normalizeParameterValue(java.lang.String, java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.0891091942678931
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.ImmutableListMultimap$Builder.put(java.lang.String, java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableListMultimap$Builder.build()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableMap.get(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Objects.firstNonNull(com.google.common.net.MediaType, com.google.common.net.MediaType)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.net.MediaType.toString() ************************
*Commit: commit 2daad4cb6bdd1ba3ae36f4bdab8fd4dbb7cf78a7 1329917065 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(java.lang.String)
com.google.common.collect.ImmutableMultimap.isEmpty()
java.lang.StringBuilder.append(java.lang.String)
com.google.common.collect.Multimaps.transformValues(com.google.common.collect.ListMultimap, com.google.common.base.Function)
com.google.common.base.CharMatcher.matchesAllOf(java.lang.CharSequence)
java.lang.StringBuilder.append(C)
com.google.common.escape.CharEscaper.escape(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.toString()
com.google.common.collect.Multimap.entries()
com.google.common.base.Joiner$MapJoiner.appendTo(java.lang.StringBuilder, java.lang.Iterable)
java.lang.StringBuilder.toString()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.StringBuilder.append(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.8780487508387711
Suporte: 0.00722311
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.9090896733897734
Suporte: 0.00401284
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ImmutableMultimap.isEmpty()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.0024077
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Multimaps.transformValues(com.google.common.collect.ListMultimap, com.google.common.base.Function)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.0024077
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.CharMatcher.matchesAllOf(java.lang.CharSequence)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(C)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.escape.CharEscaper.escape(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00461477
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.0024077
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00461477
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Multimap.entries()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Joiner$MapJoiner.appendTo(java.lang.StringBuilder, java.lang.Iterable)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multimap.entries()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6470589959864083
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Multimap.entries()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.47058995986408314
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Multimap.entries()
Também chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Confiança: 0.3529410040135917
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: java.lang.StringBuilder.toString()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.net.MediaType.withParameter(java.lang.String, java.lang.String) ************************
*Commit: commit 2daad4cb6bdd1ba3ae36f4bdab8fd4dbb7cf78a7 1329917065 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
com.google.common.net.MediaType.normalizeToken(java.lang.String)
com.google.common.collect.ImmutableListMultimap.builder()
com.google.common.collect.ImmutableMultimap.entries()
java.util.Map$Entry.getKey()
java.lang.String.equals(java.lang.Object)
java.util.Map$Entry.getValue()
com.google.common.collect.ImmutableListMultimap$Builder.put(java.lang.String, java.lang.String)
com.google.common.net.MediaType.normalizeParameterValue(java.lang.String, java.lang.String)
com.google.common.collect.ImmutableListMultimap$Builder.put(java.lang.String, java.lang.String)
com.google.common.collect.ImmutableListMultimap$Builder.build()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkNotNull(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
Confiança: 0.375
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.String.length()
Confiança: 0.27499975079993216
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Chamada: com.google.common.net.MediaType.normalizeToken(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
Confiança: 0.375
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.String.length()
Confiança: 0.27499975079993216
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.ImmutableListMultimap.builder()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableMultimap.entries()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableListMultimap.builder()
Também chamam:
com.google.common.collect.ImmutableListMultimap$Builder.build()
Confiança: 0.8571438742888878
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.equals(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableListMultimap$Builder.put(java.lang.String, java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.0891091942678931
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Chamada: com.google.common.net.MediaType.normalizeParameterValue(java.lang.String, java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableListMultimap$Builder.put(java.lang.String, java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableListMultimap$Builder.build()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.net.MediaType$Tokenizer.previewChar() ************************
*Commit: commit 2daad4cb6bdd1ba3ae36f4bdab8fd4dbb7cf78a7 1329917065 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.net.MediaType$Tokenizer.hasMore()
com.google.common.base.Preconditions.checkState(Z)
java.lang.String.charAt(I)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkState(Z)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.net.MediaType.normalizeToken(java.lang.String) ************************
*Commit: commit 2daad4cb6bdd1ba3ae36f4bdab8fd4dbb7cf78a7 1329917065 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.CharMatcher.matchesAllOf(java.lang.CharSequence)
com.google.common.base.Preconditions.checkArgument(Z)
com.google.common.base.Ascii.toLowerCase(java.lang.String)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkArgument(Z)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Ascii.toLowerCase(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z)
Também chamam:
java.util.Iterator.next()
Confiança: 0.07608659143728567
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.net.MediaType.charset() ************************
*Commit: commit 2daad4cb6bdd1ba3ae36f4bdab8fd4dbb7cf78a7 1329917065 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableListMultimap.get(java.lang.String)
com.google.common.collect.ImmutableSet.copyOf(java.util.Collection)
java.util.Set.size()
com.google.common.base.Optional.absent()
com.google.common.collect.Iterables.getOnlyElement(java.lang.Iterable)
java.nio.charset.Charset.forName(java.lang.String)
com.google.common.base.Optional.of(java.nio.charset.Charset)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableSet.copyOf(java.util.Collection)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Set.size()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Optional.absent()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.size()
Também chamam:
java.util.Set.size()
Confiança: 0.1489356512813117
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Iterables.getOnlyElement(java.lang.Iterable)
Nenhuma sugestão fornecida.
**************************
Chamada: java.nio.charset.Charset.forName(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Optional.of(java.nio.charset.Charset)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.net.MediaType$Tokenizer.consumeToken(com.google.common.base.CharMatcher) ************************
*Commit: commit 2daad4cb6bdd1ba3ae36f4bdab8fd4dbb7cf78a7 1329917065 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.net.MediaType$Tokenizer.hasMore()
com.google.common.base.Preconditions.checkState(Z)
com.google.common.base.CharMatcher.negate()
com.google.common.base.CharMatcher.indexIn(java.lang.CharSequence, I)
com.google.common.base.Preconditions.checkState(Z)
com.google.common.net.MediaType$Tokenizer.hasMore()
java.lang.String.substring(I, I)
java.lang.String.substring(I)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkState(Z)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.CharMatcher.negate()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: com.google.common.base.CharMatcher.indexIn(java.lang.CharSequence, I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkState(Z)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.net.MediaType$Tokenizer.hasMore()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: java.lang.String.substring(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.substring(I)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.net.MediaType.parse(java.lang.String) ************************
*Commit: commit 2daad4cb6bdd1ba3ae36f4bdab8fd4dbb7cf78a7 1329917065 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
com.google.common.net.MediaType$Tokenizer.consumeToken(com.google.common.base.CharMatcher)
com.google.common.net.MediaType$Tokenizer.consumeCharacter(C)
com.google.common.net.MediaType$Tokenizer.consumeToken(com.google.common.base.CharMatcher)
com.google.common.collect.ImmutableListMultimap.builder()
com.google.common.net.MediaType$Tokenizer.hasMore()
com.google.common.net.MediaType$Tokenizer.consumeCharacter(C)
com.google.common.net.MediaType$Tokenizer.consumeCharacter(C)
com.google.common.net.MediaType$Tokenizer.consumeToken(com.google.common.base.CharMatcher)
com.google.common.net.MediaType$Tokenizer.consumeCharacter(C)
com.google.common.net.MediaType$Tokenizer.previewChar()
com.google.common.net.MediaType$Tokenizer.consumeCharacter(C)
com.google.common.net.MediaType$Tokenizer.previewChar()
com.google.common.net.MediaType$Tokenizer.previewChar()
com.google.common.net.MediaType$Tokenizer.consumeCharacter(C)
com.google.common.net.MediaType$Tokenizer.consumeCharacter(com.google.common.base.CharMatcher)
java.lang.StringBuilder.append(C)
com.google.common.net.MediaType$Tokenizer.consumeToken(com.google.common.base.CharMatcher)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
com.google.common.net.MediaType$Tokenizer.consumeCharacter(C)
com.google.common.net.MediaType$Tokenizer.consumeToken(com.google.common.base.CharMatcher)
com.google.common.collect.ImmutableListMultimap$Builder.put(java.lang.String, java.lang.String)
com.google.common.collect.ImmutableListMultimap$Builder.build()
com.google.common.net.MediaType.create(java.lang.String, java.lang.String, com.google.common.collect.Multimap)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.net.MediaType$Tokenizer.consumeToken(com.google.common.base.CharMatcher)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
Confiança: 0.375
Suporte: 0.00300963
Posição da Sugestão: 1
**************************
Chamada: com.google.common.net.MediaType$Tokenizer.consumeCharacter(C)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.net.MediaType$Tokenizer.consumeToken(com.google.common.base.CharMatcher)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableListMultimap.builder()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.net.MediaType$Tokenizer.hasMore()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableListMultimap.builder()
Também chamam:
com.google.common.collect.ImmutableListMultimap$Builder.build()
Confiança: 0.8571438742888878
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: com.google.common.net.MediaType$Tokenizer.consumeCharacter(C)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.net.MediaType$Tokenizer.consumeCharacter(C)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.net.MediaType$Tokenizer.consumeToken(com.google.common.base.CharMatcher)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.net.MediaType$Tokenizer.consumeCharacter(C)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.net.MediaType$Tokenizer.previewChar()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.net.MediaType$Tokenizer.consumeCharacter(C)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.net.MediaType$Tokenizer.previewChar()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.net.MediaType$Tokenizer.previewChar()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.net.MediaType$Tokenizer.consumeCharacter(C)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.net.MediaType$Tokenizer.consumeCharacter(com.google.common.base.CharMatcher)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(C)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.net.MediaType$Tokenizer.consumeToken(com.google.common.base.CharMatcher)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.8139531110006131
Suporte: 0.00702247
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00401284
Posição da Sugestão: 1
**************************
Chamada: com.google.common.net.MediaType$Tokenizer.consumeCharacter(C)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.net.MediaType$Tokenizer.consumeToken(com.google.common.base.CharMatcher)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableListMultimap$Builder.put(java.lang.String, java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableListMultimap$Builder.build()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.net.MediaType.create(java.lang.String, java.lang.String, com.google.common.collect.Multimap)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.net.MediaType$Tokenizer.consumeCharacter(C) ************************
*Commit: commit 2daad4cb6bdd1ba3ae36f4bdab8fd4dbb7cf78a7 1329917065 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.net.MediaType$Tokenizer.hasMore()
com.google.common.base.Preconditions.checkState(Z)
com.google.common.net.MediaType$Tokenizer.previewChar()
com.google.common.base.Preconditions.checkState(Z)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkState(Z)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.net.MediaType$Tokenizer.previewChar()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: com.google.common.base.Preconditions.checkState(Z)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.net.MediaType$Tokenizer.consumeCharacter(com.google.common.base.CharMatcher) ************************
*Commit: commit 2daad4cb6bdd1ba3ae36f4bdab8fd4dbb7cf78a7 1329917065 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.net.MediaType$Tokenizer.hasMore()
com.google.common.base.Preconditions.checkState(Z)
com.google.common.net.MediaType$Tokenizer.previewChar()
com.google.common.base.CharMatcher.matches(C)
com.google.common.base.Preconditions.checkState(Z)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkState(Z)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.net.MediaType$Tokenizer.previewChar()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: com.google.common.base.CharMatcher.matches(C)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkState(Z)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.net.MediaType.create(java.lang.String, java.lang.String, com.google.common.collect.Multimap) ************************
*Commit: commit 2daad4cb6bdd1ba3ae36f4bdab8fd4dbb7cf78a7 1329917065 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Multimap)
com.google.common.net.MediaType.normalizeToken(java.lang.String)
com.google.common.net.MediaType.normalizeToken(java.lang.String)
com.google.common.collect.Multimap.isEmpty()
com.google.common.collect.ImmutableListMultimap.builder()
com.google.common.collect.Multimap.entries()
java.util.Map$Entry.getKey()
com.google.common.net.MediaType.normalizeToken(java.lang.String)
java.util.Map$Entry.getValue()
com.google.common.net.MediaType.normalizeParameterValue(java.lang.String, java.lang.String)
com.google.common.collect.ImmutableListMultimap$Builder.put(java.lang.String, java.lang.String)
com.google.common.collect.ImmutableListMultimap$Builder.build()
com.google.common.collect.ImmutableMap.get(java.lang.Object)
com.google.common.base.Objects.firstNonNull(com.google.common.net.MediaType, com.google.common.net.MediaType)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkNotNull(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
Confiança: 0.375
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.String.length()
Confiança: 0.27499975079993216
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Chamada: com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Multimap)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
Confiança: 0.375
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.String.length()
Confiança: 0.27499975079993216
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Chamada: com.google.common.net.MediaType.normalizeToken(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.net.MediaType.normalizeToken(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Multimap.isEmpty()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableListMultimap.builder()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Multimap.entries()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableListMultimap.builder()
Também chamam:
com.google.common.collect.ImmutableListMultimap$Builder.build()
Confiança: 0.8571438742888878
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multimap.entries()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6470589959864083
Suporte: 0.00220706
Posição da Sugestão: 1
**************************
Chamada: com.google.common.net.MediaType.normalizeToken(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multimap.entries()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7499968850069153
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.net.MediaType.normalizeParameterValue(java.lang.String, java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.0891091942678931
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.ImmutableListMultimap$Builder.put(java.lang.String, java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableListMultimap$Builder.build()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableMap.get(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Objects.firstNonNull(com.google.common.net.MediaType, com.google.common.net.MediaType)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.escape.ArrayBasedCharEscaper.escape(java.lang.String) ************************
*Commit: commit 267e41fbf208f6511c513048cbe7f7da25370b24 1329917081 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
java.lang.String.length()
java.lang.String.charAt(I)
com.google.common.escape.CharEscaper.escapeSlow(java.lang.String, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.String.length()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
Confiança: 0.375
Suporte: 0.00300963
Posição da Sugestão: 4
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 4
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 4
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.String.length()
Confiança: 0.27499975079993216
Suporte: 0.00220706
Posição da Sugestão: 4
**************************
Chamada: java.lang.String.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.5121950033550847
Suporte: 0.00421348
Posição da Sugestão: 1
**************************
Chamada: com.google.common.escape.CharEscaper.escapeSlow(java.lang.String, I)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.escape.ArrayBasedEscaperMap.createReplacementArray(java.util.Map) ************************
*Commit: commit 267e41fbf208f6511c513048cbe7f7da25370b24 1329917081 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.util.Map)
java.util.Map.isEmpty()
java.util.Map.keySet()
java.util.Collections.max(java.util.Collection)
java.util.Map.keySet()
java.util.Map.get(java.lang.Object)
java.lang.String.toCharArray()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map.isEmpty()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.keySet()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.isEmpty()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1842099050417082
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.isEmpty()
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z)
Confiança: 0.1578943916898379
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: java.util.Collections.max(java.util.Collection)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.keySet()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.get(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.toCharArray()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.get(java.lang.Object)
Também chamam:
com.google.common.collect.Count.get()
Confiança: 0.10714222143111428
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.escape.ArrayBasedUnicodeEscaper.escape(java.lang.String) ************************
*Commit: commit 267e41fbf208f6511c513048cbe7f7da25370b24 1329917081 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
java.lang.String.length()
java.lang.String.charAt(I)
com.google.common.escape.UnicodeEscaper.escapeSlow(java.lang.String, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.String.length()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
Confiança: 0.375
Suporte: 0.00300963
Posição da Sugestão: 4
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 4
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 4
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.String.length()
Confiança: 0.27499975079993216
Suporte: 0.00220706
Posição da Sugestão: 4
**************************
Chamada: java.lang.String.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.5121950033550847
Suporte: 0.00421348
Posição da Sugestão: 1
**************************
Chamada: com.google.common.escape.UnicodeEscaper.escapeSlow(java.lang.String, I)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.escape.CharEscaper.escape(java.lang.String) ************************
*Commit: commit 267e41fbf208f6511c513048cbe7f7da25370b24 1329917081 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
java.lang.String.length()
java.lang.String.charAt(I)
com.google.common.escape.CharEscaper.escape(C)
com.google.common.escape.CharEscaper.escapeSlow(java.lang.String, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.String.length()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
Confiança: 0.375
Suporte: 0.00300963
Posição da Sugestão: 4
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 4
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 4
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.String.length()
Confiança: 0.27499975079993216
Suporte: 0.00220706
Posição da Sugestão: 4
**************************
Chamada: java.lang.String.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.5121950033550847
Suporte: 0.00421348
Posição da Sugestão: 1
**************************
Chamada: com.google.common.escape.CharEscaper.escape(C)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.escape.CharEscaper.escapeSlow(java.lang.String, I)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.escape.CharEscaper.escapeSlow(java.lang.String, I) ************************
*Commit: commit 267e41fbf208f6511c513048cbe7f7da25370b24 1329917081 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.String.length()
com.google.common.escape.Platform.charBufferFromThreadLocal()
java.lang.String.charAt(I)
com.google.common.escape.CharEscaper.escape(C)
com.google.common.escape.CharEscaper.growBuffer([C, I, I)
java.lang.String.getChars(I, I, [C, I)
java.lang.System.arraycopy(java.lang.Object, I, java.lang.Object, I, I)
com.google.common.escape.CharEscaper.growBuffer([C, I, I)
java.lang.String.getChars(I, I, [C, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.escape.Platform.charBufferFromThreadLocal()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.5121950033550847
Suporte: 0.00421348
Posição da Sugestão: 1
**************************
Chamada: java.lang.String.charAt(I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.escape.CharEscaper.escape(C)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.escape.CharEscaper.growBuffer([C, I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.getChars(I, I, [C, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.System.arraycopy(java.lang.Object, I, java.lang.Object, I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.escape.CharEscaper.growBuffer([C, I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.getChars(I, I, [C, I)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.escape.CharEscaperBuilder$CharArrayDecorator.escape(java.lang.String) ************************
*Commit: commit 267e41fbf208f6511c513048cbe7f7da25370b24 1329917081 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.String.length()
java.lang.String.charAt(I)
com.google.common.escape.CharEscaper.escapeSlow(java.lang.String, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.String.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.5121950033550847
Suporte: 0.00421348
Posição da Sugestão: 1
**************************
Chamada: com.google.common.escape.CharEscaper.escapeSlow(java.lang.String, I)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.escape.CharEscaperBuilder.toArray() ************************
*Commit: commit 267e41fbf208f6511c513048cbe7f7da25370b24 1329917081 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
java.lang.String.toCharArray()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.5999987540027661
Suporte: 0.00963082
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7659567473791592
Suporte: 0.00722311
Posição da Sugestão: 1
**************************
Chamada: java.lang.String.toCharArray()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.24999948083340776
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.19444394450589844
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.16666701277772816
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.12499974041670388
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.escape.Escapers$Builder.addEscape(C, java.lang.String) ************************
*Commit: commit 267e41fbf208f6511c513048cbe7f7da25370b24 1329917081 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
java.util.Map.put(java.lang.Character, java.lang.String)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map.put(java.lang.Character, java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
Confiança: 0.375
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.String.length()
Confiança: 0.27499975079993216
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.escape.UnicodeEscaper.escape(java.lang.String) ************************
*Commit: commit 267e41fbf208f6511c513048cbe7f7da25370b24 1329917081 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
java.lang.String.length()
com.google.common.escape.UnicodeEscaper.nextEscapeIndex(java.lang.CharSequence, I, I)
com.google.common.escape.UnicodeEscaper.escapeSlow(java.lang.String, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.String.length()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
Confiança: 0.375
Suporte: 0.00300963
Posição da Sugestão: 4
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 4
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 4
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.String.length()
Confiança: 0.27499975079993216
Suporte: 0.00220706
Posição da Sugestão: 4
**************************
Chamada: com.google.common.escape.UnicodeEscaper.nextEscapeIndex(java.lang.CharSequence, I, I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.5121950033550847
Suporte: 0.00421348
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.2926825117427963
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.length()
Confiança: 0.26829250503262697
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.StringBuilder.append(C)
Confiança: 0.24390249832245767
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.toString()
Confiança: 0.24390249832245767
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Chamada: com.google.common.escape.UnicodeEscaper.escapeSlow(java.lang.String, I)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.escape.UnicodeEscaper.codePointAt(java.lang.CharSequence, I, I) ************************
*Commit: commit 267e41fbf208f6511c513048cbe7f7da25370b24 1329917081 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.CharSequence.charAt(I)
java.lang.CharSequence.charAt(I)
java.lang.Character.isLowSurrogate(C)
java.lang.Character.toCodePoint(C, C)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.CharSequence.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.charAt(I)
Também chamam:
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.33333333333333337
Suporte: 0.00180578
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.lang.CharSequence.charAt(I)
Também chamam:
java.lang.CharSequence.toString()
Confiança: 0.29629670650171486
Suporte: 0.00160514
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.lang.CharSequence.charAt(I)
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.25925823374571283
Suporte: 0.00140449
Posição da Sugestão: 3
**************************
Chamada: java.lang.Character.isLowSurrogate(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.charAt(I)
Também chamam:
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.33333333333333337
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.charAt(I)
Também chamam:
java.lang.CharSequence.toString()
Confiança: 0.29629670650171486
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.charAt(I)
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.25925823374571283
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.charAt(I)
Também chamam:
java.lang.CharSequence.subSequence(I, I)
Confiança: 0.2222216069140944
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.charAt(I)
Também chamam:
java.lang.CharSequence.subSequence(I, I)
java.lang.CharSequence.toString()
Confiança: 0.2222216069140944
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: java.lang.Character.toCodePoint(C, C)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.escape.UnicodeEscaper.escapeSlow(java.lang.String, I) ************************
*Commit: commit 267e41fbf208f6511c513048cbe7f7da25370b24 1329917081 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.String.length()
com.google.common.escape.Platform.charBufferFromThreadLocal()
com.google.common.escape.UnicodeEscaper.codePointAt(java.lang.CharSequence, I, I)
com.google.common.escape.UnicodeEscaper.escape(I)
java.lang.Character.isSupplementaryCodePoint(I)
com.google.common.escape.UnicodeEscaper.growBuffer([C, I, I)
java.lang.String.getChars(I, I, [C, I)
java.lang.System.arraycopy(java.lang.Object, I, java.lang.Object, I, I)
com.google.common.escape.UnicodeEscaper.nextEscapeIndex(java.lang.CharSequence, I, I)
com.google.common.escape.UnicodeEscaper.growBuffer([C, I, I)
java.lang.String.getChars(I, I, [C, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.escape.Platform.charBufferFromThreadLocal()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.5121950033550847
Suporte: 0.00421348
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.2926825117427963
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.length()
Confiança: 0.26829250503262697
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.StringBuilder.append(C)
Confiança: 0.24390249832245767
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.toString()
Confiança: 0.24390249832245767
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Chamada: com.google.common.escape.UnicodeEscaper.codePointAt(java.lang.CharSequence, I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.escape.UnicodeEscaper.escape(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Character.isSupplementaryCodePoint(I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.escape.UnicodeEscaper.growBuffer([C, I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.getChars(I, I, [C, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.System.arraycopy(java.lang.Object, I, java.lang.Object, I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.escape.UnicodeEscaper.nextEscapeIndex(java.lang.CharSequence, I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.escape.UnicodeEscaper.growBuffer([C, I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.getChars(I, I, [C, I)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.net.PercentEscaper.escape(java.lang.String) ************************
*Commit: commit 267e41fbf208f6511c513048cbe7f7da25370b24 1329917081 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
java.lang.String.length()
java.lang.String.charAt(I)
com.google.common.escape.UnicodeEscaper.escapeSlow(java.lang.String, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.String.length()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
Confiança: 0.375
Suporte: 0.00300963
Posição da Sugestão: 4
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 4
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 4
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.String.length()
Confiança: 0.27499975079993216
Suporte: 0.00220706
Posição da Sugestão: 4
**************************
Chamada: java.lang.String.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.5121950033550847
Suporte: 0.00421348
Posição da Sugestão: 1
**************************
Chamada: com.google.common.escape.UnicodeEscaper.escapeSlow(java.lang.String, I)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.net.PercentEscaper.PercentEscaper(java.lang.String, Z) ************************
*Commit: commit 267e41fbf208f6511c513048cbe7f7da25370b24 1329917081 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
java.lang.String.matches(java.lang.String)
java.lang.String.contains(java.lang.CharSequence)
com.google.common.net.PercentEscaper.createSafeOctets(java.lang.String)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.String.matches(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
Confiança: 0.375
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.String.length()
Confiança: 0.27499975079993216
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Chamada: java.lang.String.contains(java.lang.CharSequence)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.net.PercentEscaper.createSafeOctets(java.lang.String)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.net.MediaType.escapeAndQuote(java.lang.String) ************************
*Commit: commit 66a4a82d359ee8ec552e0af29290081c09ad9d48 1330102582 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.String.length()
java.lang.StringBuilder.append(C)
java.lang.String.toCharArray()
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.toString()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.StringBuilder.append(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.5121950033550847
Suporte: 0.00421348
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.2926825117427963
Suporte: 0.0024077
Posição da Sugestão: 2
**************************
Chamada: java.lang.String.toCharArray()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00200642
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(C)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00200642
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00200642
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00200642
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.Lists$CharSequenceAsList.hashCode() ************************
*Commit: commit 3c8b80ac26c04ed731b87c99df0726e4605b5145 1330105171 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.CharSequence.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.5897439501906699
Suporte: 0.00461477
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.Lists.newArrayList(java.lang.Iterable) ************************
*Commit: commit 3c8b80ac26c04ed731b87c99df0726e4605b5145 1330105171 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.Iterable)
com.google.common.collect.Collections2.cast(java.lang.Iterable)
java.lang.Iterable.iterator()
com.google.common.collect.Lists.newArrayList(java.util.Iterator)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Collections2.cast(java.lang.Iterable)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.Iterable)
Também chamam:
java.lang.Iterable.iterator()
Confiança: 0.6086955579584682
Suporte: 0.00280899
Posição da Sugestão: 1
**************************
Chamada: java.lang.Iterable.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Lists.newArrayList(java.util.Iterator)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Iterable.iterator()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.29729786159286076
Suporte: 0.00441413
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.Iterable.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.25675702980299714
Suporte: 0.0038122
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.Iterable.iterator()
Também chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Confiança: 0.25675702980299714
Suporte: 0.0038122
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.Iterable.iterator()
Também chamam:
java.util.Iterator.hasNext()
java.util.Iterator.hasNext()
Confiança: 0.14864859403940056
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.Iterable.iterator()
Também chamam:
java.util.Iterator.next()
java.util.Iterator.hasNext()
Confiança: 0.14864859403940056
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Lists.lastIndexOfImpl(java.util.List, java.lang.Object) ************************
*Commit: commit 3c8b80ac26c04ed731b87c99df0726e4605b5145 1330105171 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.List.size()
java.util.List.listIterator(I)
java.util.ListIterator.hasPrevious()
java.util.ListIterator.previous()
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
java.util.ListIterator.nextIndex()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.List.listIterator(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.iterator()
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
java.util.List.get(I)
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
java.util.List.get(I)
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: java.util.ListIterator.hasPrevious()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.ListIterator.previous()
** Sugestões fornecidas **
Usuários que chamam:
java.util.ListIterator.hasPrevious()
Também chamam:
java.util.ListIterator.nextIndex()
Confiança: 0.5
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.ListIterator.nextIndex()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Também chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Confiança: 0.2619043380954245
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1666660733335944
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Lists$Partition.size() ************************
*Commit: commit 3c8b80ac26c04ed731b87c99df0726e4605b5145 1330105171 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.List.size()
java.util.List.size()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.List.size()
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 2
**************************
************************ Método Avaliado: com.google.common.collect.Lists$StringAsImmutableList.hashCode() ************************
*Commit: commit 3c8b80ac26c04ed731b87c99df0726e4605b5145 1330105171 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.String.length()
java.lang.String.charAt(I)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.String.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.5121950033550847
Suporte: 0.00421348
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.Lists.newArrayList(java.util.Iterator) ************************
*Commit: commit 3c8b80ac26c04ed731b87c99df0726e4605b5145 1330105171 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.util.Iterator)
com.google.common.collect.Lists.newArrayList()
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.ArrayList.add(com.google.common.collect.Lists$(Ljava/util/Iterator;)Ljava/util/ArrayList;$E)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Lists.newArrayList()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.util.Iterator)
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.7647079518368999
Suporte: 0.00260835
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.util.Iterator)
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 1.0
Suporte: 0.00260835
Posição da Sugestão: 1
**************************
Chamada: java.util.ArrayList.add(com.google.common.collect.Lists$(Ljava/util/Iterator;)Ljava/util/ArrayList;$E)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.43835705288167764
Suporte: 0.0128411
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.2260277807173556
Suporte: 0.00662119
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.21621642251782006
Suporte: 0.00963082
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.1666668911713532
Suporte: 0.00742376
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Lists$TransformingRandomAccessList.get(I) ************************
*Commit: commit 3c8b80ac26c04ed731b87c99df0726e4605b5145 1330105171 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.List.get(I)
com.google.common.base.Function.apply(null)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Function.apply(null)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Lists$ReverseList.listIterator(I) ************************
*Commit: commit 3c8b80ac26c04ed731b87c99df0726e4605b5145 1330105171 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Lists$ReverseList.reversePosition(I)
java.util.List.listIterator(I)
java.util.ListIterator.add(com.google.common.collect.Lists$ReverseList$T)
java.util.ListIterator.previous()
java.util.ListIterator.hasPrevious()
java.util.ListIterator.hasNext()
null.hasNext()
java.util.ListIterator.previous()
java.util.ListIterator.nextIndex()
com.google.common.collect.Lists$ReverseList.reversePosition(I)
null.hasPrevious()
java.util.ListIterator.next()
null.nextIndex()
com.google.common.base.Preconditions.checkState(Z)
java.util.ListIterator.remove()
com.google.common.base.Preconditions.checkState(Z)
java.util.ListIterator.set(com.google.common.collect.Lists$ReverseList$T)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.List.listIterator(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.ListIterator.add(com.google.common.collect.Lists$ReverseList$T)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.ListIterator.previous()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.ListIterator.hasPrevious()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.ListIterator.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
java.util.ListIterator.hasPrevious()
Também chamam:
java.util.ListIterator.nextIndex()
Confiança: 0.5
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: null.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
java.util.ListIterator.hasNext()
Também chamam:
java.util.ListIterator.next()
Confiança: 0.6363624006597012
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: java.util.ListIterator.previous()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.ListIterator.nextIndex()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Lists$ReverseList.reversePosition(I)
Nenhuma sugestão fornecida.
**************************
Chamada: null.hasPrevious()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.ListIterator.next()
Nenhuma sugestão fornecida.
**************************
Chamada: null.nextIndex()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkState(Z)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.ListIterator.remove()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: com.google.common.base.Preconditions.checkState(Z)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.ListIterator.set(com.google.common.collect.Lists$ReverseList$T)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Lists$ReverseList.subList(I, I) ************************
*Commit: commit 3c8b80ac26c04ed731b87c99df0726e4605b5145 1330105171 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Lists$ReverseList.size()
com.google.common.base.Preconditions.checkPositionIndexes(I, I, I)
com.google.common.collect.Lists$ReverseList.reversePosition(I)
com.google.common.collect.Lists$ReverseList.reversePosition(I)
java.util.List.subList(I, I)
com.google.common.collect.Lists.reverse(java.util.List)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkPositionIndexes(I, I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Lists$ReverseList.reversePosition(I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkPositionIndexes(I, I, I)
Também chamam:
java.util.Collections.emptyList()
Confiança: 0.5333346624003614
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Lists$ReverseList.reversePosition(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.subList(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Lists.reverse(java.util.List)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Lists$StringAsImmutableList.equals(java.lang.Object) ************************
*Commit: commit 3c8b80ac26c04ed731b87c99df0726e4605b5145 1330105171 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.String.length()
java.util.List.size()
java.util.List.iterator()
java.util.Iterator.next()
java.lang.Character.charValue()
java.lang.String.charAt(I)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.List.size()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.5121950033550847
Suporte: 0.00421348
Posição da Sugestão: 1
**************************
Chamada: java.util.List.iterator()
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.iterator()
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 3
**************************
Chamada: java.util.Iterator.next()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Character.charValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.21621642251782006
Suporte: 0.00963082
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.1666668911713532
Suporte: 0.00742376
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.next()
Confiança: 0.12162182185553123
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Confiança: 0.10360374922826514
Suporte: 0.00461477
Posição da Sugestão: 0
**************************
Chamada: java.lang.String.charAt(I)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Lists.indexOfImpl(java.util.List, java.lang.Object) ************************
*Commit: commit 3c8b80ac26c04ed731b87c99df0726e4605b5145 1330105171 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.List.listIterator()
java.util.ListIterator.hasNext()
java.util.ListIterator.next()
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
java.util.ListIterator.previousIndex()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.ListIterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.ListIterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.ListIterator.hasNext()
Também chamam:
java.util.ListIterator.next()
Confiança: 0.6363624006597012
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.ListIterator.previousIndex()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Também chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Confiança: 0.2619043380954245
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1666660733335944
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Lists$TransformingSequentialList.listIterator(I) ************************
*Commit: commit 3c8b80ac26c04ed731b87c99df0726e4605b5145 1330105171 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.List.listIterator(I)
java.util.ListIterator.hasNext()
java.util.ListIterator.hasPrevious()
java.util.ListIterator.next()
com.google.common.base.Function.apply(null)
java.util.ListIterator.nextIndex()
java.util.ListIterator.previous()
com.google.common.base.Function.apply(null)
java.util.ListIterator.previousIndex()
java.util.ListIterator.remove()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.ListIterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.ListIterator.hasPrevious()
** Sugestões fornecidas **
Usuários que chamam:
java.util.ListIterator.hasNext()
Também chamam:
java.util.ListIterator.next()
Confiança: 0.6363624006597012
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: java.util.ListIterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.ListIterator.hasPrevious()
Também chamam:
java.util.ListIterator.nextIndex()
Confiança: 0.5
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.Function.apply(null)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.ListIterator.nextIndex()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.ListIterator.previous()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Function.apply(null)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.ListIterator.previousIndex()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.ListIterator.remove()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Lists$CharSequenceAsList.indexOf(java.lang.Object) ************************
*Commit: commit 3c8b80ac26c04ed731b87c99df0726e4605b5145 1330105171 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.CharSequence.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.5897439501906699
Suporte: 0.00461477
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.Lists$CharSequenceAsList.equals(java.lang.Object) ************************
*Commit: commit 3c8b80ac26c04ed731b87c99df0726e4605b5145 1330105171 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.CharSequence.length()
java.util.List.size()
java.util.List.iterator()
java.util.Iterator.next()
java.lang.Character.charValue()
java.lang.CharSequence.charAt(I)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.List.size()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.5897439501906699
Suporte: 0.00461477
Posição da Sugestão: 1
**************************
Chamada: java.util.List.iterator()
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.iterator()
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 3
**************************
Chamada: java.util.Iterator.next()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Character.charValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.21621642251782006
Suporte: 0.00963082
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.1666668911713532
Suporte: 0.00742376
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.next()
Confiança: 0.12162182185553123
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Confiança: 0.10360374922826514
Suporte: 0.00461477
Posição da Sugestão: 0
**************************
Chamada: java.lang.CharSequence.charAt(I)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Lists.computeArrayListCapacity(I) ************************
*Commit: commit 3c8b80ac26c04ed731b87c99df0726e4605b5145 1330105171 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkArgument(Z)
com.google.common.primitives.Ints.saturatedCast(J)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.primitives.Ints.saturatedCast(J)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z)
Também chamam:
java.util.Iterator.next()
Confiança: 0.07608659143728567
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Lists.equalsImpl(java.util.List, java.lang.Object) ************************
*Commit: commit 3c8b80ac26c04ed731b87c99df0726e4605b5145 1330105171 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.util.List)
java.util.List.size()
java.util.List.size()
java.util.List.iterator()
java.util.List.iterator()
com.google.common.collect.Iterators.elementsEqual(java.util.Iterator, java.util.Iterator)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.size()
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 2
**************************
Chamada: java.util.List.iterator()
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.iterator()
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 4
**************************
Chamada: java.util.List.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Iterators.elementsEqual(java.util.Iterator, java.util.Iterator)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Lists$CharSequenceAsList.lastIndexOf(java.lang.Object) ************************
*Commit: commit 3c8b80ac26c04ed731b87c99df0726e4605b5145 1330105171 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.Character.charValue()
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.CharSequence.length()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.CharSequence.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.5897439501906699
Suporte: 0.00461477
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.Lists$CharSequenceAsList.subList(I, I) ************************
*Commit: commit 3c8b80ac26c04ed731b87c99df0726e4605b5145 1330105171 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.CharSequence.subSequence(I, I)
com.google.common.collect.Lists.charactersOf(java.lang.CharSequence)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Lists.charactersOf(java.lang.CharSequence)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.subSequence(I, I)
Também chamam:
java.lang.CharSequence.toString()
Confiança: 0.7499968850069153
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Lists$Partition.get(I) ************************
*Commit: commit 3c8b80ac26c04ed731b87c99df0726e4605b5145 1330105171 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Lists$Partition.size()
com.google.common.base.Preconditions.checkElementIndex(I, I)
java.util.List.size()
java.lang.Math.min(I, I)
java.util.List.subList(I, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkElementIndex(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Math.min(I, I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.iterator()
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
java.util.List.get(I)
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
java.util.List.get(I)
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: java.util.List.subList(I, I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Math.min(I, I)
Também chamam:
java.lang.System.arraycopy(java.lang.Object, I, java.lang.Object, I, I)
Confiança: 0.25714314194293464
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.cache.AbstractCache.putAll(java.util.Map) ************************
*Commit: commit 113dea14725c0c97b4abfce934a650bb6d9ba1dc 1330105171 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.cache.AbstractCache.put(com.google.common.cache.AbstractCache$K, com.google.common.cache.AbstractCache$V)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.5999987540027661
Suporte: 0.00963082
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7659567473791592
Suporte: 0.00722311
Posição da Sugestão: 1
**************************
Chamada: com.google.common.cache.AbstractCache.put(com.google.common.cache.AbstractCache$K, com.google.common.cache.AbstractCache$V)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.24999948083340776
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.19444394450589844
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.16666701277772816
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.12499974041670388
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.TreeMultiset$ToRemove.getAndClear() ************************
*Commit: commit a4944fb7e64392cd53159de6a42e2711e3808db1 1330618965 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkState(Z)
com.google.common.base.Optional.orNull()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Optional.orNull()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.TreeMultiset$ToRemove.getAndClear() ************************
*Commit: commit a4944fb7e64392cd53159de6a42e2711e3808db1 1330618965 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkState(Z)
com.google.common.base.Optional.orNull()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Optional.orNull()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.WellBehavedMap$EntrySet.contains(java.lang.Object) ************************
*Commit: commit a4944fb7e64392cd53159de6a42e2711e3808db1 1330618965 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.collect.ForwardingMap.containsKey(java.lang.Object)
com.google.common.collect.ForwardingMap.get(java.lang.Object)
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ForwardingMap.containsKey(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.0891091942678931
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.ForwardingMap.get(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.WellBehavedMap$EntrySet.iterator() ************************
*Commit: commit a4944fb7e64392cd53159de6a42e2711e3808db1 1330618965 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ForwardingMap.keySet()
java.util.Set.iterator()
com.google.common.collect.Iterators.transform(java.util.Iterator, com.google.common.base.Function)
com.google.common.collect.ForwardingMap.get(java.lang.Object)
com.google.common.collect.ForwardingMap.put(com.google.common.collect.WellBehavedMap$K, com.google.common.collect.WellBehavedMap$V)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Set.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Iterators.transform(java.util.Iterator, com.google.common.base.Function)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.6374957947593357
Suporte: 0.0102327
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.5249990655020746
Suporte: 0.00842697
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Confiança: 0.48749890975242033
Suporte: 0.00782504
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.36249922125172884
Suporte: 0.00581862
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
java.util.Iterator.remove()
Confiança: 0.34999937700138306
Suporte: 0.00561798
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.ForwardingMap.get(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ForwardingMap.put(com.google.common.collect.WellBehavedMap$K, com.google.common.collect.WellBehavedMap$V)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.WellBehavedMap$EntrySet.remove(java.lang.Object) ************************
*Commit: commit a4944fb7e64392cd53159de6a42e2711e3808db1 1330618965 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.WellBehavedMap$EntrySet.contains(java.lang.Object)
java.util.Map$Entry.getKey()
com.google.common.collect.ForwardingMap.remove(java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ForwardingMap.remove(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.0848486221489221
Suporte: 0.00280899
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.07272721780709783
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.06060611552623551
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Confiança: 0.06060611552623551
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.cache.CacheBuilderSpec$KeyStrengthParser.parse(com.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String) ************************
*Commit: commit 8395dcbd9c9860508c9c16a7db3c07945ca346d7 1330715364 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2083336794451136
Suporte: 0.00300963
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.cache.CacheBuilderSpec$ValueStrengthParser.parse(com.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String) ************************
*Commit: commit 8395dcbd9c9860508c9c16a7db3c07945ca346d7 1330715364 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2083336794451136
Suporte: 0.00300963
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.cache.CacheBuilderSpec.parse(java.lang.String) ************************
*Commit: commit 8395dcbd9c9860508c9c16a7db3c07945ca346d7 1330715364 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.String.isEmpty()
com.google.common.base.Splitter.split(java.lang.CharSequence)
com.google.common.base.Splitter.split(java.lang.CharSequence)
com.google.common.collect.ImmutableList.copyOf(java.lang.Iterable)
java.util.List.isEmpty()
com.google.common.base.Preconditions.checkArgument(Z, java.lang.Object)
java.util.List.size()
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
java.util.List.get(I)
com.google.common.collect.ImmutableMap.get(java.lang.Object)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
java.util.List.size()
java.util.List.get(I)
com.google.common.cache.CacheBuilderSpec$ValueParser.parse(com.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Splitter.split(java.lang.CharSequence)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Splitter.split(java.lang.CharSequence)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableList.copyOf(java.lang.Iterable)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.isEmpty()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 1
**************************
Chamada: java.util.List.get(I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2083336794451136
Suporte: 0.00300963
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ImmutableMap.get(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.size()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2083336794451136
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Chamada: java.util.List.get(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: com.google.common.cache.CacheBuilderSpec$ValueParser.parse(com.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.cache.CacheBuilderSpec.equals(java.lang.Object) ************************
*Commit: commit 8395dcbd9c9860508c9c16a7db3c07945ca346d7 1330715364 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
com.google.common.cache.CacheBuilderSpec.durationInNanos(J, java.util.concurrent.TimeUnit)
com.google.common.cache.CacheBuilderSpec.durationInNanos(J, java.util.concurrent.TimeUnit)
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
com.google.common.cache.CacheBuilderSpec.durationInNanos(J, java.util.concurrent.TimeUnit)
com.google.common.cache.CacheBuilderSpec.durationInNanos(J, java.util.concurrent.TimeUnit)
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
com.google.common.cache.CacheBuilderSpec.durationInNanos(J, java.util.concurrent.TimeUnit)
com.google.common.cache.CacheBuilderSpec.durationInNanos(J, java.util.concurrent.TimeUnit)
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Também chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Confiança: 0.2619043380954245
Suporte: 0.00220706
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Também chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Confiança: 0.2619043380954245
Suporte: 0.00220706
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Também chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Confiança: 0.2619043380954245
Suporte: 0.00220706
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Também chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Confiança: 0.2619043380954245
Suporte: 0.00220706
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Também chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Confiança: 0.2619043380954245
Suporte: 0.00220706
Posição da Sugestão: 1
**************************
Chamada: com.google.common.cache.CacheBuilderSpec.durationInNanos(J, java.util.concurrent.TimeUnit)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Também chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Confiança: 0.2619043380954245
Suporte: 0.00220706
Posição da Sugestão: 1
**************************
Chamada: com.google.common.cache.CacheBuilderSpec.durationInNanos(J, java.util.concurrent.TimeUnit)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.cache.CacheBuilderSpec.durationInNanos(J, java.util.concurrent.TimeUnit)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Também chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Confiança: 0.2619043380954245
Suporte: 0.00220706
Posição da Sugestão: 1
**************************
Chamada: com.google.common.cache.CacheBuilderSpec.durationInNanos(J, java.util.concurrent.TimeUnit)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.cache.CacheBuilderSpec.durationInNanos(J, java.util.concurrent.TimeUnit)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Também chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Confiança: 0.2619043380954245
Suporte: 0.00220706
Posição da Sugestão: 1
**************************
Chamada: com.google.common.cache.CacheBuilderSpec.durationInNanos(J, java.util.concurrent.TimeUnit)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.cache.CacheBuilderSpec$MaximumWeightParser.parseLong(com.google.common.cache.CacheBuilderSpec, J) ************************
*Commit: commit 8395dcbd9c9860508c9c16a7db3c07945ca346d7 1330715364 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2083336794451136
Suporte: 0.00300963
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.cache.CacheBuilderSpec$LongParser.parse(com.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String) ************************
*Commit: commit 8395dcbd9c9860508c9c16a7db3c07945ca346d7 1330715364 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.String.isEmpty()
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
java.lang.Long.parseLong(java.lang.String)
com.google.common.cache.CacheBuilderSpec$LongParser.parseLong(com.google.common.cache.CacheBuilderSpec, J)
java.lang.String.format(java.lang.String, [Ljava.lang.Object;)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Long.parseLong(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2083336794451136
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Chamada: com.google.common.cache.CacheBuilderSpec$LongParser.parseLong(com.google.common.cache.CacheBuilderSpec, J)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.format(java.lang.String, [Ljava.lang.Object;)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.cache.CacheBuilderSpec$DurationParser.parse(com.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String) ************************
*Commit: commit 8395dcbd9c9860508c9c16a7db3c07945ca346d7 1330715364 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.String.isEmpty()
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
java.lang.String.length()
java.lang.String.charAt(I)
java.lang.String.format(java.lang.String, [Ljava.lang.Object;)
java.lang.String.length()
java.lang.String.substring(I, I)
java.lang.Long.parseLong(java.lang.String)
com.google.common.cache.CacheBuilderSpec$DurationParser.parseDuration(com.google.common.cache.CacheBuilderSpec, J, java.util.concurrent.TimeUnit)
java.lang.String.format(java.lang.String, [Ljava.lang.Object;)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.length()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2083336794451136
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Chamada: java.lang.String.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.5121950033550847
Suporte: 0.00421348
Posição da Sugestão: 1
**************************
Chamada: java.lang.String.format(java.lang.String, [Ljava.lang.Object;)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.length()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.substring(I, I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.5121950033550847
Suporte: 0.00421348
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.2926825117427963
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.length()
Confiança: 0.26829250503262697
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.StringBuilder.append(C)
Confiança: 0.24390249832245767
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.toString()
Confiança: 0.24390249832245767
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Chamada: java.lang.Long.parseLong(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.cache.CacheBuilderSpec$DurationParser.parseDuration(com.google.common.cache.CacheBuilderSpec, J, java.util.concurrent.TimeUnit)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.format(java.lang.String, [Ljava.lang.Object;)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.cache.CacheBuilderSpec$MaximumSizeParser.parseLong(com.google.common.cache.CacheBuilderSpec, J) ************************
*Commit: commit 8395dcbd9c9860508c9c16a7db3c07945ca346d7 1330715364 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2083336794451136
Suporte: 0.00300963
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.cache.CacheBuilderSpec$IntegerParser.parse(com.google.common.cache.CacheBuilderSpec, java.lang.String, java.lang.String) ************************
*Commit: commit 8395dcbd9c9860508c9c16a7db3c07945ca346d7 1330715364 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.String.isEmpty()
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
java.lang.Integer.parseInt(java.lang.String)
com.google.common.cache.CacheBuilderSpec$IntegerParser.parseInteger(com.google.common.cache.CacheBuilderSpec, I)
java.lang.String.format(java.lang.String, [Ljava.lang.Object;)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Integer.parseInt(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2083336794451136
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Chamada: com.google.common.cache.CacheBuilderSpec$IntegerParser.parseInteger(com.google.common.cache.CacheBuilderSpec, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.format(java.lang.String, [Ljava.lang.Object;)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Collections2.factorial(I) ************************
*Commit: commit 8395dcbd9c9860508c9c16a7db3c07945ca346d7 1330715364 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkArgument(Z)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z)
Também chamam:
java.util.Iterator.next()
Confiança: 0.07608659143728567
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Collections2$PermutationCollection.size() ************************
*Commit: commit 8395dcbd9c9860508c9c16a7db3c07945ca346d7 1330715364 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.List.size()
com.google.common.collect.Collections2.safeIntFactorial(I)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Collections2.safeIntFactorial(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.iterator()
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
java.util.List.get(I)
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
java.util.List.get(I)
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Collections2.isPermutation(java.util.List, java.util.List) ************************
*Commit: commit 8395dcbd9c9860508c9c16a7db3c07945ca346d7 1330715364 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.List.size()
java.util.List.size()
com.google.common.collect.HashMultiset.create(java.lang.Iterable)
com.google.common.collect.HashMultiset.create(java.lang.Iterable)
com.google.common.collect.Multiset.equals(java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.List.size()
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 2
**************************
Chamada: com.google.common.collect.HashMultiset.create(java.lang.Iterable)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.iterator()
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
java.util.List.get(I)
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.HashMultiset.create(java.lang.Iterable)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Multiset.equals(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Collections2.binomialCoefficient(I, I) ************************
*Commit: commit 8395dcbd9c9860508c9c16a7db3c07945ca346d7 1330715364 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkArgument(Z)
com.google.common.collect.Collections2.factorialQuotient(I, I)
com.google.common.collect.Collections2.factorial(I)
com.google.common.collect.Collections2.factorialQuotient(I, I)
com.google.common.collect.Collections2.factorial(I)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Collections2.factorialQuotient(I, I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z)
Também chamam:
java.util.Iterator.next()
Confiança: 0.07608659143728567
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Collections2.factorial(I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Collections2.factorialQuotient(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Collections2.factorial(I)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Collections2$OrderedPermutationIterator.findNextL(I) ************************
*Commit: commit 8395dcbd9c9860508c9c16a7db3c07945ca346d7 1330715364 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.List.get(I)
java.util.List.size()
java.util.List.get(I)
java.util.Comparator.compare(null, null)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.List.size()
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: java.util.List.get(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 1
**************************
Chamada: java.util.Comparator.compare(null, null)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Collections2.factorialQuotient(I, I) ************************
*Commit: commit 8395dcbd9c9860508c9c16a7db3c07945ca346d7 1330715364 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkArgument(Z)
com.google.common.base.Preconditions.checkArgument(Z)
com.google.common.base.Preconditions.checkArgument(Z)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkArgument(Z)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z)
Também chamam:
java.util.Iterator.next()
Confiança: 0.07608659143728567
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z)
Também chamam:
java.util.Iterator.next()
Confiança: 0.07608659143728567
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Collections2$OrderedPermutationIterator.calculateNextPermutation() ************************
*Commit: commit 8395dcbd9c9860508c9c16a7db3c07945ca346d7 1330715364 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Collections2$OrderedPermutationIterator.findNextJ()
com.google.common.collect.Collections2$OrderedPermutationIterator.findNextL(I)
java.util.Collections.swap(java.util.List, I, I)
java.util.List.size()
java.util.List.subList(I, I)
java.util.Collections.reverse(java.util.List)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Collections2$OrderedPermutationIterator.findNextL(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collections.swap(java.util.List, I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.subList(I, I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.iterator()
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
java.util.List.get(I)
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
java.util.List.get(I)
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: java.util.Collections.reverse(java.util.List)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Collections2.orderedPermutations(java.lang.Iterable) ************************
*Commit: commit 8395dcbd9c9860508c9c16a7db3c07945ca346d7 1330715364 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Ordering.natural()
com.google.common.collect.Collections2.orderedPermutations(java.lang.Iterable, java.util.Comparator)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Collections2.orderedPermutations(java.lang.Iterable, java.util.Comparator)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
java.util.Arrays.asList([Ljava.lang.Comparable;)
Confiança: 0.18867970660146702
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
com.google.common.collect.ImmutableSortedMultiset.copyOf(java.util.Comparator, java.lang.Iterable)
Confiança: 0.1320754184690615
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
com.google.common.collect.Ordering.natural()
Confiança: 0.1320754184690615
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
com.google.common.collect.ImmutableSortedSet.copyOf(java.util.Comparator, java.util.Collection)
Confiança: 0.1320754184690615
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Collections2$OrderedPermutationIterator.findNextJ() ************************
*Commit: commit 8395dcbd9c9860508c9c16a7db3c07945ca346d7 1330715364 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.List.size()
java.util.List.get(I)
java.util.List.get(I)
java.util.Comparator.compare(null, null)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.List.get(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 1
**************************
Chamada: java.util.List.get(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: java.util.Comparator.compare(null, null)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Collections2$OrderedPermutationCollection.calculateSize(java.util.List, java.util.Comparator) ************************
*Commit: commit 8395dcbd9c9860508c9c16a7db3c07945ca346d7 1330715364 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.List.size()
java.util.List.get(I)
java.util.List.get(I)
java.util.Comparator.compare(null, null)
com.google.common.base.Preconditions.checkState(Z)
com.google.common.collect.Collections2.binomialCoefficient(I, I)
com.google.common.collect.Collections2.isPositiveInt(J)
com.google.common.collect.Collections2.binomialCoefficient(I, I)
com.google.common.collect.Collections2.isPositiveInt(J)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.List.get(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 1
**************************
Chamada: java.util.List.get(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: java.util.Comparator.compare(null, null)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: com.google.common.base.Preconditions.checkState(Z)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Collections2.binomialCoefficient(I, I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Collections2.isPositiveInt(J)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Collections2.binomialCoefficient(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Collections2.isPositiveInt(J)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Collections2$PermutationIterator.calculateNextPermutation() ************************
*Commit: commit 8395dcbd9c9860508c9c16a7db3c07945ca346d7 1330715364 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.List.size()
com.google.common.collect.Collections2$PermutationIterator.switchDirection()
com.google.common.collect.Collections2$PermutationIterator.switchDirection()
java.util.Collections.swap(java.util.List, I, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Collections2$PermutationIterator.switchDirection()
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.iterator()
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
java.util.List.get(I)
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
java.util.List.get(I)
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Collections2$PermutationIterator.switchDirection()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collections.swap(java.util.List, I, I)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.ForwardingSet.standardRemoveAll(java.util.Collection) ************************
*Commit: commit 9d782cc8033a9cd0ec6e6257db7fa8b06f4ab8a8 1330720534 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.util.Collection)
com.google.common.collect.Multiset.elementSet()
java.util.Collection.size()
com.google.common.collect.ForwardingCollection.size()
com.google.common.collect.ForwardingCollection.remove(java.lang.Object)
com.google.common.collect.ForwardingCollection.iterator()
com.google.common.collect.Iterators.removeAll(java.util.Iterator, java.util.Collection)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Multiset.elementSet()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.util.Collection)
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.4411763412456775
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.util.Collection)
Também chamam:
java.util.Iterator.next()
Confiança: 0.23529463501729006
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.util.Collection)
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.23529463501729006
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.util.Collection)
Também chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Confiança: 0.23529463501729006
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.util.Collection)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.2058817062283874
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: java.util.Collection.size()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multiset.elementSet()
Também chamam:
java.util.Set.size()
Confiança: 0.4117640160543667
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.ForwardingCollection.size()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Collection.clear()
Confiança: 0.1694912104342831
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Iterator.next()
Confiança: 0.10169455731168535
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.ForwardingCollection.remove(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ForwardingCollection.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Iterators.removeAll(java.util.Iterator, java.util.Collection)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Iterators.forArray([Ljava.lang.Object;, I, I, I) ************************
*Commit: commit 707f3a276d4ea8e9d53621d137febb00cd2128da 1330993686 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkArgument(Z)
com.google.common.base.Preconditions.checkPositionIndexes(I, I, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkPositionIndexes(I, I, I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z)
Também chamam:
java.util.Iterator.next()
Confiança: 0.07608659143728567
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableList.listIterator(I) ************************
*Commit: commit 707f3a276d4ea8e9d53621d137febb00cd2128da 1330993686 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.List.size()
java.util.List.get(I)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.List.get(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.Iterators.forArray([Ljava.lang.Object;, I, I, I) ************************
*Commit: commit 707f3a276d4ea8e9d53621d137febb00cd2128da 1330993686 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkArgument(Z)
com.google.common.base.Preconditions.checkPositionIndexes(I, I, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkPositionIndexes(I, I, I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z)
Também chamam:
java.util.Iterator.next()
Confiança: 0.07608659143728567
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Sets.removeAllImpl(java.util.Set, java.util.Iterator) ************************
*Commit: commit 2f830e65a6705678a41f5da1d3eb5eee86f2f2fb 1330994182 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Set.remove(java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7087362667937666
Suporte: 0.0292937
Posição da Sugestão: 1
**************************
Chamada: java.util.Set.remove(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.43835705288167764
Suporte: 0.0128411
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.2260277807173556
Suporte: 0.00662119
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.21621642251782006
Suporte: 0.00963082
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.1666668911713532
Suporte: 0.00742376
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Sets.removeAllImpl(java.util.Set, java.util.Collection) ************************
*Commit: commit 2f830e65a6705678a41f5da1d3eb5eee86f2f2fb 1330994182 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Multiset.elementSet()
java.util.Collection.size()
java.util.Set.size()
java.util.Collection.iterator()
com.google.common.collect.Sets.removeAllImpl(java.util.Set, java.util.Iterator)
java.util.Set.iterator()
com.google.common.collect.Iterators.removeAll(java.util.Iterator, java.util.Collection)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Collection.size()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multiset.elementSet()
Também chamam:
java.util.Set.size()
Confiança: 0.4117640160543667
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: java.util.Set.size()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Collection.clear()
Confiança: 0.1694912104342831
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Iterator.next()
Confiança: 0.10169455731168535
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: java.util.Collection.iterator()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.size()
Também chamam:
java.util.Set.size()
Confiança: 0.1489356512813117
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Sets.removeAllImpl(java.util.Set, java.util.Iterator)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.6551725323186598
Suporte: 0.0038122
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.48275879847798964
Suporte: 0.00280899
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Confiança: 0.48275879847798964
Suporte: 0.00280899
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.4482763954339689
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.next()
java.util.Iterator.remove()
Confiança: 0.4482763954339689
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Chamada: java.util.Set.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Iterators.removeAll(java.util.Iterator, java.util.Collection)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.6374957947593357
Suporte: 0.0102327
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.5249990655020746
Suporte: 0.00842697
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Confiança: 0.48749890975242033
Suporte: 0.00782504
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.36249922125172884
Suporte: 0.00581862
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
java.util.Iterator.remove()
Confiança: 0.34999937700138306
Suporte: 0.00561798
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Sets.removeAllImpl(java.util.Set, java.util.Iterator) ************************
*Commit: commit 2f830e65a6705678a41f5da1d3eb5eee86f2f2fb 1330994182 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Set.remove(java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7087362667937666
Suporte: 0.0292937
Posição da Sugestão: 1
**************************
Chamada: java.util.Set.remove(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.43835705288167764
Suporte: 0.0128411
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.2260277807173556
Suporte: 0.00662119
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.21621642251782006
Suporte: 0.00963082
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.1666668911713532
Suporte: 0.00742376
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Sets.removeAllImpl(java.util.Set, java.util.Collection) ************************
*Commit: commit 2f830e65a6705678a41f5da1d3eb5eee86f2f2fb 1330994182 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Multiset.elementSet()
java.util.Collection.size()
java.util.Set.size()
java.util.Collection.iterator()
com.google.common.collect.Sets.removeAllImpl(java.util.Set, java.util.Iterator)
java.util.Set.iterator()
com.google.common.collect.Iterators.removeAll(java.util.Iterator, java.util.Collection)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Collection.size()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multiset.elementSet()
Também chamam:
java.util.Set.size()
Confiança: 0.4117640160543667
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: java.util.Set.size()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Collection.clear()
Confiança: 0.1694912104342831
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Iterator.next()
Confiança: 0.10169455731168535
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: java.util.Collection.iterator()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.size()
Também chamam:
java.util.Set.size()
Confiança: 0.1489356512813117
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Sets.removeAllImpl(java.util.Set, java.util.Iterator)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.6551725323186598
Suporte: 0.0038122
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.48275879847798964
Suporte: 0.00280899
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Confiança: 0.48275879847798964
Suporte: 0.00280899
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.4482763954339689
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.next()
java.util.Iterator.remove()
Confiança: 0.4482763954339689
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Chamada: java.util.Set.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Iterators.removeAll(java.util.Iterator, java.util.Collection)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.6374957947593357
Suporte: 0.0102327
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.5249990655020746
Suporte: 0.00842697
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Confiança: 0.48749890975242033
Suporte: 0.00782504
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.36249922125172884
Suporte: 0.00581862
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
java.util.Iterator.remove()
Confiança: 0.34999937700138306
Suporte: 0.00561798
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.StandardTable$RowMap$EntrySet.iterator() ************************
*Commit: commit 2f830e65a6705678a41f5da1d3eb5eee86f2f2fb 1330994182 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.keySet()
java.util.Set.iterator()
com.google.common.collect.StandardTable.row(com.google.common.collect.StandardTable$R)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Set.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.StandardTable.row(com.google.common.collect.StandardTable$R)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.6374957947593357
Suporte: 0.0102327
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.5249990655020746
Suporte: 0.00842697
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Confiança: 0.48749890975242033
Suporte: 0.00782504
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.36249922125172884
Suporte: 0.00581862
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
java.util.Iterator.remove()
Confiança: 0.34999937700138306
Suporte: 0.00561798
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.TransformedIterator.next() ************************
*Commit: commit 2f830e65a6705678a41f5da1d3eb5eee86f2f2fb 1330994182 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Iterator.next()
com.google.common.collect.TransformedIterator.transform(com.google.common.collect.TransformedIterator$F)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.TransformedIterator.transform(com.google.common.collect.TransformedIterator$F)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.21621642251782006
Suporte: 0.00963082
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.1666668911713532
Suporte: 0.00742376
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.next()
Confiança: 0.12162182185553123
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Confiança: 0.10360374922826514
Suporte: 0.00461477
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableList$SubList.subList(I, I) ************************
*Commit: commit 2f4db4ac381cb8405286d8d57f47ad90cd63b5f2 1331234339 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkPositionIndexes(I, I, I)
com.google.common.collect.ImmutableList.subList(I, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableList.subList(I, I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkPositionIndexes(I, I, I)
Também chamam:
java.util.Collections.emptyList()
Confiança: 0.5333346624003614
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableList.subList(I, I) ************************
*Commit: commit 2f4db4ac381cb8405286d8d57f47ad90cd63b5f2 1331234339 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.List.size()
com.google.common.base.Preconditions.checkPositionIndexes(I, I, I)
com.google.common.collect.ImmutableList.of()
java.util.List.get(I)
com.google.common.collect.ImmutableList.of(com.google.common.collect.ImmutableList$E)
com.google.common.collect.ImmutableList.subListUnchecked(I, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkPositionIndexes(I, I, I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ImmutableList.of()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkPositionIndexes(I, I, I)
Também chamam:
java.util.Collections.emptyList()
Confiança: 0.5333346624003614
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableList.of(com.google.common.collect.ImmutableList$E)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.ImmutableList.subListUnchecked(I, I)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Maps.valueIterator(com.google.common.collect.UnmodifiableIterator) ************************
*Commit: commit bd3d46ff61aab113bac98311b77c1d5f6ce1334e 1331234663 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getValue()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7087362667937666
Suporte: 0.0292937
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.43835705288167764
Suporte: 0.0128411
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.2260277807173556
Suporte: 0.00662119
Posição da Sugestão: 3
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableMap$EntrySet.contains(java.lang.Object) ************************
*Commit: commit bd3d46ff61aab113bac98311b77c1d5f6ce1334e 1331234663 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map$Entry.getKey()
com.google.common.collect.ImmutableMap.get(java.lang.Object)
java.util.Map$Entry.getValue()
java.lang.Object.equals(java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableMap.get(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Object.equals(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.0891091942678931
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Maps.valueIterator(com.google.common.collect.UnmodifiableIterator) ************************
*Commit: commit bd3d46ff61aab113bac98311b77c1d5f6ce1334e 1331234663 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getValue()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7087362667937666
Suporte: 0.0292937
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.43835705288167764
Suporte: 0.0128411
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.2260277807173556
Suporte: 0.00662119
Posição da Sugestão: 3
**************************
************************ Método Avaliado: com.google.common.collect.Collections2.filter(java.util.Collection, com.google.common.base.Predicate) ************************
*Commit: commit 843f8d8fc37133e6870d5b2200838219a55eb83e 1331669881 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Collections2$FilteredCollection.createCombined(com.google.common.base.Predicate)
com.google.common.base.Preconditions.checkNotNull(java.util.Collection)
com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Predicate)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkNotNull(java.util.Collection)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Predicate)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.util.Collection)
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.4411763412456775
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.util.Collection)
Também chamam:
java.util.Iterator.next()
Confiança: 0.23529463501729006
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.util.Collection)
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.23529463501729006
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.util.Collection)
Também chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Confiança: 0.23529463501729006
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.util.Collection)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.2058817062283874
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Collections2.containsAllImpl(java.util.Collection, java.util.Collection) ************************
*Commit: commit 843f8d8fc37133e6870d5b2200838219a55eb83e 1331669881 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.util.Collection)
java.util.Collection.contains(java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Collection.contains(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.util.Collection)
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.4411763412456775
Suporte: 0.00300963
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.Collections2$FilteredCollection.addAll(java.util.Collection) ************************
*Commit: commit 843f8d8fc37133e6870d5b2200838219a55eb83e 1331669881 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Predicate.apply(null)
com.google.common.base.Preconditions.checkArgument(Z)
java.util.Collection.addAll(java.util.Collection)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkArgument(Z)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Predicate.apply(null)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.18367363545190643
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Chamada: java.util.Collection.addAll(java.util.Collection)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z)
Também chamam:
java.util.Iterator.next()
Confiança: 0.07608659143728567
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Collections2$FilteredCollection.retainAll(java.util.Collection) ************************
*Commit: commit 843f8d8fc37133e6870d5b2200838219a55eb83e 1331669881 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.util.Collection)
com.google.common.base.Predicate.apply(null)
java.util.Collection.contains(java.lang.Object)
com.google.common.collect.Iterables.removeIf(java.lang.Iterable, com.google.common.base.Predicate)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Predicate.apply(null)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.util.Collection)
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.4411763412456775
Suporte: 0.00300963
Posição da Sugestão: 1
**************************
Chamada: java.util.Collection.contains(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Predicate.apply(null)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.18367363545190643
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Iterables.removeIf(java.lang.Iterable, com.google.common.base.Predicate)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.contains(java.lang.Object)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.14035115331479636
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Collections2$FilteredCollection.remove(java.lang.Object) ************************
*Commit: commit 843f8d8fc37133e6870d5b2200838219a55eb83e 1331669881 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Predicate.apply(null)
java.util.Collection.remove(java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Collection.remove(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Predicate.apply(null)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.18367363545190643
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Collections2$TransformedCollection.TransformedCollection(java.util.Collection, com.google.common.base.Function) ************************
*Commit: commit 843f8d8fc37133e6870d5b2200838219a55eb83e 1331669881 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.util.Collection)
com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Function)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Function)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.util.Collection)
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.4411763412456775
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.util.Collection)
Também chamam:
java.util.Iterator.next()
Confiança: 0.23529463501729006
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.util.Collection)
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.23529463501729006
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.util.Collection)
Também chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Confiança: 0.23529463501729006
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.util.Collection)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.2058817062283874
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Collections2$FilteredCollection.add(com.google.common.collect.Collections2$FilteredCollection$E) ************************
*Commit: commit 843f8d8fc37133e6870d5b2200838219a55eb83e 1331669881 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Predicate.apply(null)
com.google.common.base.Preconditions.checkArgument(Z)
java.util.Collection.add(com.google.common.collect.Collections2$FilteredCollection$E)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkArgument(Z)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Predicate.apply(null)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.18367363545190643
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Chamada: java.util.Collection.add(com.google.common.collect.Collections2$FilteredCollection$E)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z)
Também chamam:
java.util.Iterator.next()
Confiança: 0.07608659143728567
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Collections2$FilteredCollection.contains(java.lang.Object) ************************
*Commit: commit 843f8d8fc37133e6870d5b2200838219a55eb83e 1331669881 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Predicate.apply(null)
java.util.Collection.contains(java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Collection.contains(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Predicate.apply(null)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.18367363545190643
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Collections2$TransformedCollection.iterator() ************************
*Commit: commit 843f8d8fc37133e6870d5b2200838219a55eb83e 1331669881 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Collection.iterator()
com.google.common.collect.Iterators.transform(java.util.Iterator, com.google.common.base.Function)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Iterators.transform(java.util.Iterator, com.google.common.base.Function)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.6551725323186598
Suporte: 0.0038122
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.48275879847798964
Suporte: 0.00280899
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Confiança: 0.48275879847798964
Suporte: 0.00280899
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.4482763954339689
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.next()
java.util.Iterator.remove()
Confiança: 0.4482763954339689
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Collections2.toStringImpl(java.util.Collection) ************************
*Commit: commit 843f8d8fc37133e6870d5b2200838219a55eb83e 1331669881 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Collection.size()
com.google.common.collect.Collections2.newStringBuilderForCollection(I)
java.lang.StringBuilder.append(C)
com.google.common.collect.Iterables.transform(java.lang.Iterable, com.google.common.base.Function)
com.google.common.base.Joiner.appendTo(java.lang.StringBuilder, java.lang.Iterable)
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.toString()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Collections2.newStringBuilderForCollection(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Collection.clear()
Confiança: 0.1694912104342831
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Iterator.next()
Confiança: 0.10169455731168535
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: java.lang.StringBuilder.append(C)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Iterables.transform(java.lang.Iterable, com.google.common.base.Function)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.8139531110006131
Suporte: 0.00702247
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.Joiner.appendTo(java.lang.StringBuilder, java.lang.Iterable)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(C)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00461477
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.Collections2$FilteredCollection.isEmpty() ************************
*Commit: commit 843f8d8fc37133e6870d5b2200838219a55eb83e 1331669881 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Collection.iterator()
com.google.common.collect.Iterators.any(java.util.Iterator, com.google.common.base.Predicate)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Iterators.any(java.util.Iterator, com.google.common.base.Predicate)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.6551725323186598
Suporte: 0.0038122
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.48275879847798964
Suporte: 0.00280899
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Confiança: 0.48275879847798964
Suporte: 0.00280899
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.4482763954339689
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.next()
java.util.Iterator.remove()
Confiança: 0.4482763954339689
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Collections2$FilteredCollection.iterator() ************************
*Commit: commit 843f8d8fc37133e6870d5b2200838219a55eb83e 1331669881 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Collection.iterator()
com.google.common.collect.Iterators.filter(java.util.Iterator, com.google.common.base.Predicate)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Iterators.filter(java.util.Iterator, com.google.common.base.Predicate)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.6551725323186598
Suporte: 0.0038122
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.48275879847798964
Suporte: 0.00280899
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Confiança: 0.48275879847798964
Suporte: 0.00280899
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.4482763954339689
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.next()
java.util.Iterator.remove()
Confiança: 0.4482763954339689
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Collections2$FilteredCollection.removeAll(java.util.Collection) ************************
*Commit: commit 843f8d8fc37133e6870d5b2200838219a55eb83e 1331669881 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.util.Collection)
com.google.common.base.Predicate.apply(null)
java.util.Collection.contains(java.lang.Object)
com.google.common.collect.Iterables.removeIf(java.lang.Iterable, com.google.common.base.Predicate)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Predicate.apply(null)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.util.Collection)
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.4411763412456775
Suporte: 0.00300963
Posição da Sugestão: 1
**************************
Chamada: java.util.Collection.contains(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Predicate.apply(null)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.18367363545190643
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Iterables.removeIf(java.lang.Iterable, com.google.common.base.Predicate)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.contains(java.lang.Object)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.14035115331479636
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.FluentIterable.isEmpty() ************************
*Commit: commit ec452d24ada3b476ede4bbd9c68e71d4211c0afe 1331669943 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.Iterable.iterator()
java.util.Iterator.hasNext()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Iterator.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Iterable.iterator()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.29729786159286076
Suporte: 0.00441413
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.FluentIterable.first() ************************
*Commit: commit ec452d24ada3b476ede4bbd9c68e71d4211c0afe 1331669943 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.Iterable.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.base.Optional.of(com.google.common.collect.FluentIterable$E)
com.google.common.base.Optional.absent()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Iterator.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Iterable.iterator()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.29729786159286076
Suporte: 0.00441413
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Iterable.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.8636356428107012
Suporte: 0.0038122
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.Optional.of(com.google.common.collect.FluentIterable$E)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Iterable.iterator()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.5789465400556109
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.Iterable.iterator()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.next()
Confiança: 0.5789465400556109
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.Iterable.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.5263155133518703
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.Iterable.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.next()
Confiança: 0.5263155133518703
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.Iterable.iterator()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Confiança: 0.47368448664812973
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Chamada: com.google.common.base.Optional.absent()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.FluentIterable.isEmpty() ************************
*Commit: commit ec452d24ada3b476ede4bbd9c68e71d4211c0afe 1331669943 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.Iterable.iterator()
java.util.Iterator.hasNext()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Iterator.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Iterable.iterator()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.29729786159286076
Suporte: 0.00441413
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.FluentIterable.first() ************************
*Commit: commit ec452d24ada3b476ede4bbd9c68e71d4211c0afe 1331669943 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.Iterable.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.base.Optional.of(com.google.common.collect.FluentIterable$E)
com.google.common.base.Optional.absent()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Iterator.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Iterable.iterator()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.29729786159286076
Suporte: 0.00441413
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Iterable.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.8636356428107012
Suporte: 0.0038122
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.Optional.of(com.google.common.collect.FluentIterable$E)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Iterable.iterator()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.5789465400556109
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.Iterable.iterator()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.next()
Confiança: 0.5789465400556109
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.Iterable.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.5263155133518703
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.Iterable.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.next()
Confiança: 0.5263155133518703
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.Iterable.iterator()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Confiança: 0.47368448664812973
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Chamada: com.google.common.base.Optional.absent()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.reflect.Reflection.newProxy(java.lang.Class, java.lang.reflect.InvocationHandler) ************************
*Commit: commit f4cdd87a6103131b1faaa6531ee3650dd790d47e 1331936855 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.Class)
com.google.common.base.Preconditions.checkNotNull(java.lang.reflect.InvocationHandler)
java.lang.Class.isInterface()
com.google.common.base.Preconditions.checkArgument(Z)
java.lang.Class.getClassLoader()
java.lang.reflect.Proxy.newProxyInstance(java.lang.ClassLoader, [Ljava.lang.Class;, java.lang.reflect.InvocationHandler)
java.lang.Class.cast(java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkNotNull(java.lang.reflect.InvocationHandler)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Class.isInterface()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Class.getClassLoader()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z)
Também chamam:
java.util.Iterator.next()
Confiança: 0.07608659143728567
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: java.lang.reflect.Proxy.newProxyInstance(java.lang.ClassLoader, [Ljava.lang.Class;, java.lang.reflect.InvocationHandler)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Class.cast(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.reflect.TypeCapture.capture() ************************
*Commit: commit f4cdd87a6103131b1faaa6531ee3650dd790d47e 1331936855 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.Object.getClass()
java.lang.Class.getGenericSuperclass()
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
java.lang.reflect.ParameterizedType.getActualTypeArguments()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.Class.getGenericSuperclass()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.reflect.ParameterizedType.getActualTypeArguments()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2083336794451136
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.reflect.TypeResolver.populateTypeMappings(java.util.Map, java.lang.reflect.Type, java.lang.reflect.Type) ************************
*Commit: commit f4cdd87a6103131b1faaa6531ee3650dd790d47e 1331936855 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.put(java.lang.reflect.TypeVariable, java.lang.reflect.Type)
java.lang.reflect.GenericArrayType.getGenericComponentType()
getComponentType
com.google.common.reflect.TypeResolver.populateTypeMappings(java.util.Map, java.lang.reflect.Type, java.lang.reflect.Type)
java.lang.reflect.ParameterizedType.getActualTypeArguments()
java.lang.reflect.ParameterizedType.getActualTypeArguments()
com.google.common.base.Preconditions.checkArgument(Z)
com.google.common.reflect.TypeResolver.populateTypeMappings(java.util.Map, java.lang.reflect.Type, java.lang.reflect.Type)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.reflect.GenericArrayType.getGenericComponentType()
Nenhuma sugestão fornecida.
**************************
Chamada: getComponentType
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.reflect.TypeResolver.populateTypeMappings(java.util.Map, java.lang.reflect.Type, java.lang.reflect.Type)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.reflect.ParameterizedType.getActualTypeArguments()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.reflect.ParameterizedType.getActualTypeArguments()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.reflect.TypeResolver.populateTypeMappings(java.util.Map, java.lang.reflect.Type, java.lang.reflect.Type)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z)
Também chamam:
java.util.Iterator.next()
Confiança: 0.07608659143728567
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.reflect.TypeResolver$TypeMappingIntrospector.introspectParameterizedType(java.lang.reflect.ParameterizedType) ************************
*Commit: commit f4cdd87a6103131b1faaa6531ee3650dd790d47e 1331936855 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.reflect.ParameterizedType.getRawType()
java.lang.Class.getTypeParameters()
java.lang.reflect.ParameterizedType.getActualTypeArguments()
com.google.common.base.Preconditions.checkState(Z)
com.google.common.reflect.TypeResolver$TypeMappingIntrospector.map(java.lang.reflect.TypeVariable, java.lang.reflect.Type)
com.google.common.reflect.TypeResolver$TypeMappingIntrospector.introspectClass(java.lang.Class)
java.lang.reflect.ParameterizedType.getOwnerType()
com.google.common.reflect.TypeResolver$TypeMappingIntrospector.introspect(java.lang.reflect.Type)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.Class.getTypeParameters()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.reflect.ParameterizedType.getActualTypeArguments()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkState(Z)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.reflect.TypeResolver$TypeMappingIntrospector.map(java.lang.reflect.TypeVariable, java.lang.reflect.Type)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: com.google.common.reflect.TypeResolver$TypeMappingIntrospector.introspectClass(java.lang.Class)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.reflect.ParameterizedType.getOwnerType()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.reflect.TypeResolver$TypeMappingIntrospector.introspect(java.lang.reflect.Type)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.reflect.TypeResolver.resolveTypeVariable(java.lang.reflect.TypeVariable) ************************
*Commit: commit f4cdd87a6103131b1faaa6531ee3650dd790d47e 1331936855 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.reflect.TypeVariable.getGenericDeclaration()
java.lang.reflect.TypeVariable.getGenericDeclaration()
java.lang.Object.equals(java.lang.Object)
com.google.common.reflect.TypeResolver.resolveTypeVariable(java.lang.reflect.TypeVariable, com.google.common.reflect.TypeResolver)
com.google.common.reflect.TypeResolver.resolveTypeVariable(java.lang.reflect.TypeVariable, com.google.common.reflect.TypeResolver)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.reflect.TypeVariable.getGenericDeclaration()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Object.equals(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.reflect.TypeResolver.resolveTypeVariable(java.lang.reflect.TypeVariable, com.google.common.reflect.TypeResolver)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.equals(java.lang.Object)
Também chamam:
java.lang.Object.equals(java.lang.Object)
Confiança: 0.11999980063994577
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: com.google.common.reflect.TypeResolver.resolveTypeVariable(java.lang.reflect.TypeVariable, com.google.common.reflect.TypeResolver)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.reflect.TypeResolver$TypeMappingIntrospector.map(java.lang.reflect.TypeVariable, java.lang.reflect.Type) ************************
*Commit: commit f4cdd87a6103131b1faaa6531ee3650dd790d47e 1331936855 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.containsKey(java.lang.Object)
java.util.Map.get(java.lang.Object)
java.lang.Object.equals(java.lang.Object)
java.util.Map.remove(java.lang.Object)
java.util.Map.put(java.lang.reflect.TypeVariable, java.lang.reflect.Type)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map.get(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.containsKey(java.lang.Object)
Também chamam:
java.util.Map.remove(java.lang.Object)
Confiança: 0.1621617616948824
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: java.lang.Object.equals(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.get(java.lang.Object)
Também chamam:
com.google.common.collect.Count.get()
Confiança: 0.10714222143111428
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: java.util.Map.remove(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.equals(java.lang.Object)
Também chamam:
java.lang.Object.equals(java.lang.Object)
Confiança: 0.11999980063994577
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: java.util.Map.put(java.lang.reflect.TypeVariable, java.lang.reflect.Type)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.reflect.TypeResolver.where(java.util.Map) ************************
*Commit: commit f4cdd87a6103131b1faaa6531ee3650dd790d47e 1331936855 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableMap.builder()
com.google.common.collect.ImmutableMap$Builder.putAll(java.util.Map)
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
java.lang.Object.equals(java.lang.Object)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.collect.ImmutableMap$Builder.put(java.lang.reflect.TypeVariable, java.lang.reflect.Type)
com.google.common.collect.ImmutableMap$Builder.build()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableMap$Builder.putAll(java.util.Map)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableMap.builder()
Também chamam:
com.google.common.collect.ImmutableMap$Builder.build()
Confiança: 0.9333339978668473
Suporte: 0.00280899
Posição da Sugestão: 1
**************************
Chamada: java.util.Map.entrySet()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.5999987540027661
Suporte: 0.00963082
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7659567473791592
Suporte: 0.00722311
Posição da Sugestão: 1
**************************
Chamada: java.lang.Object.equals(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.24999948083340776
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.19444394450589844
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.16666701277772816
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.12499974041670388
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.equals(java.lang.Object)
Também chamam:
java.lang.Object.equals(java.lang.Object)
Confiança: 0.11999980063994577
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.ImmutableMap$Builder.put(java.lang.reflect.TypeVariable, java.lang.reflect.Type)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2083336794451136
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.ImmutableMap$Builder.build()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.reflect.TypeToken.sortKeysByValue(java.util.Map, java.util.Comparator) ************************
*Commit: commit f4cdd87a6103131b1faaa6531ee3650dd790d47e 1331936855 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.get(java.lang.Object)
java.util.Map.get(java.lang.Object)
java.util.Comparator.compare(null, null)
java.util.Map.keySet()
com.google.common.collect.ImmutableSortedSet.copyOf(java.util.Comparator, java.util.Collection)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map.get(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.get(java.lang.Object)
Também chamam:
com.google.common.collect.Count.get()
Confiança: 0.10714222143111428
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: java.util.Comparator.compare(null, null)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.get(java.lang.Object)
Também chamam:
com.google.common.collect.Count.get()
Confiança: 0.10714222143111428
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: java.util.Map.keySet()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableSortedSet.copyOf(java.util.Comparator, java.util.Collection)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.reflect.TypeToken.getSubtype(java.lang.Class) ************************
*Commit: commit f4cdd87a6103131b1faaa6531ee3650dd790d47e 1331936855 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
java.lang.reflect.WildcardType.getLowerBounds()
com.google.common.reflect.TypeToken.getSubtypeFromLowerBounds(java.lang.Class, [Ljava.lang.reflect.Type;)
com.google.common.reflect.TypeToken.getRawType()
java.lang.Class.isAssignableFrom(java.lang.Class)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.reflect.TypeToken.isArray()
com.google.common.reflect.TypeToken.getArraySubtype(java.lang.Class)
com.google.common.reflect.TypeToken.resolveTypeArgsForSubclass(java.lang.Class)
com.google.common.reflect.TypeToken.of(java.lang.reflect.Type)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.reflect.WildcardType.getLowerBounds()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2083336794451136
Suporte: 0.00300963
Posição da Sugestão: 1
**************************
Chamada: com.google.common.reflect.TypeToken.getSubtypeFromLowerBounds(java.lang.Class, [Ljava.lang.reflect.Type;)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.reflect.TypeToken.getRawType()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Class.isAssignableFrom(java.lang.Class)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.reflect.TypeToken.isArray()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2083336794451136
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Chamada: com.google.common.reflect.TypeToken.getArraySubtype(java.lang.Class)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.reflect.TypeToken.resolveTypeArgsForSubclass(java.lang.Class)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.reflect.TypeToken.of(java.lang.reflect.Type)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.reflect.TypeToken.findAllTypes() ************************
*Commit: commit f4cdd87a6103131b1faaa6531ee3650dd790d47e 1331936855 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Maps.newHashMap()
com.google.common.reflect.TypeToken.collectTypes(java.util.Map)
com.google.common.collect.Ordering.natural()
com.google.common.collect.Ordering.reverse()
com.google.common.reflect.TypeToken.sortKeysByValue(java.util.Map, java.util.Comparator)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.reflect.TypeToken.collectTypes(java.util.Map)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Ordering.natural()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Ordering.reverse()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
java.util.Arrays.asList([Ljava.lang.Comparable;)
Confiança: 0.18867970660146702
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
com.google.common.collect.ImmutableSortedMultiset.copyOf(java.util.Comparator, java.lang.Iterable)
Confiança: 0.1320754184690615
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
com.google.common.collect.Ordering.natural()
Confiança: 0.1320754184690615
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
com.google.common.collect.ImmutableSortedSet.copyOf(java.util.Comparator, java.util.Collection)
Confiança: 0.1320754184690615
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: com.google.common.reflect.TypeToken.sortKeysByValue(java.util.Map, java.util.Comparator)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.reflect.TypeToken.matchTypeArgument(java.lang.reflect.Type, java.lang.reflect.Type) ************************
*Commit: commit f4cdd87a6103131b1faaa6531ee3650dd790d47e 1331936855 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.Object.equals(java.lang.Object)
com.google.common.reflect.TypeToken.isAssignableToWildcardType(java.lang.reflect.Type, java.lang.reflect.WildcardType)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.reflect.TypeToken.isAssignableToWildcardType(java.lang.reflect.Type, java.lang.reflect.WildcardType)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.equals(java.lang.Object)
Também chamam:
java.lang.Object.equals(java.lang.Object)
Confiança: 0.11999980063994577
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.reflect.TypeToken.collectTypes(java.util.Map) ************************
*Commit: commit f4cdd87a6103131b1faaa6531ee3650dd790d47e 1331936855 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.get(java.lang.Object)
com.google.common.reflect.TypeToken.getRawType()
java.lang.Class.isInterface()
com.google.common.reflect.TypeToken.getGenericInterfaces()
com.google.common.reflect.TypeToken.collectTypes(java.util.Map)
java.lang.Math.max(I, I)
com.google.common.reflect.TypeToken.getGenericSuperclass()
com.google.common.reflect.TypeToken.collectTypes(java.util.Map)
java.lang.Math.max(I, I)
java.util.Map.put(null, java.lang.Integer)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.reflect.TypeToken.getRawType()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.get(java.lang.Object)
Também chamam:
com.google.common.collect.Count.get()
Confiança: 0.10714222143111428
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: java.lang.Class.isInterface()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.reflect.TypeToken.getGenericInterfaces()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.reflect.TypeToken.collectTypes(java.util.Map)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Math.max(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.reflect.TypeToken.getGenericSuperclass()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.reflect.TypeToken.collectTypes(java.util.Map)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Math.max(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.put(null, java.lang.Integer)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.reflect.TypeToken.isAssignable(java.lang.reflect.Type, java.lang.reflect.Type) ************************
*Commit: commit f4cdd87a6103131b1faaa6531ee3650dd790d47e 1331936855 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.Object.equals(java.lang.Object)
com.google.common.reflect.TypeToken.isAssignableToWildcardType(java.lang.reflect.Type, java.lang.reflect.WildcardType)
java.lang.reflect.TypeVariable.getBounds()
com.google.common.reflect.TypeToken.isAssignableFromAny([Ljava.lang.reflect.Type;, java.lang.reflect.Type)
java.lang.reflect.WildcardType.getUpperBounds()
com.google.common.reflect.TypeToken.isAssignableFromAny([Ljava.lang.reflect.Type;, java.lang.reflect.Type)
com.google.common.reflect.TypeToken.isAssignableFromGenericArrayType(java.lang.reflect.GenericArrayType, java.lang.reflect.Type)
com.google.common.reflect.TypeToken.isAssignableToClass(java.lang.reflect.Type, java.lang.Class)
com.google.common.reflect.TypeToken.isAssignableToParameterizedType(java.lang.reflect.Type, java.lang.reflect.ParameterizedType)
com.google.common.reflect.TypeToken.isAssignableToGenericArrayType(java.lang.reflect.Type, java.lang.reflect.GenericArrayType)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.reflect.TypeToken.isAssignableToWildcardType(java.lang.reflect.Type, java.lang.reflect.WildcardType)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.equals(java.lang.Object)
Também chamam:
java.lang.Object.equals(java.lang.Object)
Confiança: 0.11999980063994577
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: java.lang.reflect.TypeVariable.getBounds()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.reflect.TypeToken.isAssignableFromAny([Ljava.lang.reflect.Type;, java.lang.reflect.Type)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.reflect.WildcardType.getUpperBounds()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.reflect.TypeToken.isAssignableFromAny([Ljava.lang.reflect.Type;, java.lang.reflect.Type)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.reflect.TypeToken.isAssignableFromGenericArrayType(java.lang.reflect.GenericArrayType, java.lang.reflect.Type)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.reflect.TypeToken.isAssignableToClass(java.lang.reflect.Type, java.lang.Class)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.reflect.TypeToken.isAssignableToParameterizedType(java.lang.reflect.Type, java.lang.reflect.ParameterizedType)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.reflect.TypeToken.isAssignableToGenericArrayType(java.lang.reflect.Type, java.lang.reflect.GenericArrayType)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.reflect.TypeToken.getSupertype(java.lang.Class) ************************
*Commit: commit f4cdd87a6103131b1faaa6531ee3650dd790d47e 1331936855 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.reflect.TypeToken.getRawType()
java.lang.Class.isAssignableFrom(java.lang.Class)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
java.lang.reflect.TypeVariable.getBounds()
com.google.common.reflect.TypeToken.getSupertypeFromUpperBounds(java.lang.Class, [Ljava.lang.reflect.Type;)
java.lang.reflect.WildcardType.getUpperBounds()
com.google.common.reflect.TypeToken.getSupertypeFromUpperBounds(java.lang.Class, [Ljava.lang.reflect.Type;)
java.lang.Class.isArray()
com.google.common.reflect.TypeToken.getArraySupertype(java.lang.Class)
com.google.common.reflect.TypeToken.toGenericType(java.lang.Class)
com.google.common.reflect.TypeToken.resolveSupertype(java.lang.reflect.Type)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.Class.isAssignableFrom(java.lang.Class)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.reflect.TypeVariable.getBounds()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2083336794451136
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Chamada: com.google.common.reflect.TypeToken.getSupertypeFromUpperBounds(java.lang.Class, [Ljava.lang.reflect.Type;)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.reflect.WildcardType.getUpperBounds()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.reflect.TypeToken.getSupertypeFromUpperBounds(java.lang.Class, [Ljava.lang.reflect.Type;)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Class.isArray()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.reflect.TypeToken.getArraySupertype(java.lang.Class)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.reflect.TypeToken.toGenericType(java.lang.Class)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.reflect.TypeToken.resolveSupertype(java.lang.reflect.Type)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.reflect.Types$ParameterizedTypeImpl.toString() ************************
*Commit: commit f4cdd87a6103131b1faaa6531ee3650dd790d47e 1331936855 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.reflect.Types.toString(java.lang.reflect.Type)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(C)
java.lang.Class.getName()
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(C)
com.google.common.collect.Iterables.transform(java.lang.Iterable, com.google.common.base.Function)
com.google.common.base.Joiner.join(java.lang.Iterable)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.toString()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.StringBuilder.append(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.8780487508387711
Suporte: 0.00722311
Posição da Sugestão: 1
**************************
Chamada: java.lang.Class.getName()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.9090896733897734
Suporte: 0.00401284
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.0024077
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Iterables.transform(java.lang.Iterable, com.google.common.base.Function)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00461477
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.Joiner.join(java.lang.Iterable)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.0024077
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00461477
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.reflect.Types.toArray(java.util.Collection) ************************
*Commit: commit f4cdd87a6103131b1faaa6531ee3650dd790d47e 1331936855 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Collection.size()
java.util.Collection.toArray([Ljava.lang.reflect.Type;)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Collection.toArray([Ljava.lang.reflect.Type;)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Collection.clear()
Confiança: 0.1694912104342831
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Iterator.next()
Confiança: 0.10169455731168535
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.reflect.Types.buildUnexpectedTypeException(java.lang.reflect.Type, [Ljava.lang.Class;) ************************
*Commit: commit f4cdd87a6103131b1faaa6531ee3650dd790d47e 1331936855 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.Class.getName()
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
java.lang.Object.getClass()
java.lang.Class.getName()
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
com.google.common.reflect.Types.toString(java.lang.reflect.Type)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.toString()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.StringBuilder.append(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.8780487508387711
Suporte: 0.00722311
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.0024077
Posição da Sugestão: 1
**************************
Chamada: java.lang.Object.getClass()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.0024077
Posição da Sugestão: 1
**************************
Chamada: java.lang.Class.getName()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.0024077
Posição da Sugestão: 1
**************************
Chamada: com.google.common.reflect.Types.toString(java.lang.reflect.Type)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.0024077
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.0024077
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.reflect.Types$ParameterizedTypeImpl.ParameterizedTypeImpl(java.lang.reflect.Type, java.lang.Class, [Ljava.lang.reflect.Type;) ************************
*Commit: commit f4cdd87a6103131b1faaa6531ee3650dd790d47e 1331936855 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.Class)
java.lang.Class.getTypeParameters()
com.google.common.base.Preconditions.checkArgument(Z)
com.google.common.reflect.Types.disallowPrimitiveType([Ljava.lang.reflect.Type;, java.lang.String)
com.google.common.reflect.Types$JavaVersion.usedInGenericType([Ljava.lang.reflect.Type;)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.Class.getTypeParameters()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.reflect.Types.disallowPrimitiveType([Ljava.lang.reflect.Type;, java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z)
Também chamam:
java.util.Iterator.next()
Confiança: 0.07608659143728567
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: com.google.common.reflect.Types$JavaVersion.usedInGenericType([Ljava.lang.reflect.Type;)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.reflect.Types$TypeVariableImpl.TypeVariableImpl(com.google.common.reflect.Types$TypeVariableImpl$D, java.lang.String, [Ljava.lang.reflect.Type;) ************************
*Commit: commit f4cdd87a6103131b1faaa6531ee3650dd790d47e 1331936855 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.reflect.Types.disallowPrimitiveType([Ljava.lang.reflect.Type;, java.lang.String)
com.google.common.base.Preconditions.checkNotNull(com.google.common.reflect.Types$TypeVariableImpl$D)
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
com.google.common.collect.ImmutableList.copyOf([Ljava.lang.reflect.Type;)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkNotNull(com.google.common.reflect.Types$TypeVariableImpl$D)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableList.copyOf([Ljava.lang.reflect.Type;)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
Confiança: 0.375
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.String.length()
Confiança: 0.27499975079993216
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.reflect.Types$TypeVariableImpl.hashCode() ************************
*Commit: commit f4cdd87a6103131b1faaa6531ee3650dd790d47e 1331936855 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.Object.hashCode()
java.lang.String.hashCode()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.String.hashCode()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.hashCode()
Também chamam:
java.lang.Object.hashCode()
Confiança: 0.21428579904758174
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.reflect.Types$WildcardTypeImpl.toString() ************************
*Commit: commit f4cdd87a6103131b1faaa6531ee3650dd790d47e 1331936855 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.StringBuilder.append(java.lang.String)
com.google.common.reflect.Types.toString(java.lang.reflect.Type)
java.lang.StringBuilder.append(java.lang.String)
com.google.common.reflect.Types.filterUpperBounds(java.lang.Iterable)
java.lang.StringBuilder.append(java.lang.String)
com.google.common.reflect.Types.toString(java.lang.reflect.Type)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.reflect.Types.toString(java.lang.reflect.Type)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.8780487508387711
Suporte: 0.00722311
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.reflect.Types.filterUpperBounds(java.lang.Iterable)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.0024077
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.reflect.Types.toString(java.lang.reflect.Type)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.0024077
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.0024077
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.reflect.Types$ParameterizedTypeImpl.hashCode() ************************
*Commit: commit f4cdd87a6103131b1faaa6531ee3650dd790d47e 1331936855 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.Object.hashCode()
com.google.common.collect.ImmutableList.hashCode()
java.lang.Object.hashCode()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableList.hashCode()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.hashCode()
Também chamam:
java.lang.Object.hashCode()
Confiança: 0.21428579904758174
Suporte: 0.00180578
Posição da Sugestão: 1
**************************
Chamada: java.lang.Object.hashCode()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.reflect.Types$ParameterizedTypeImpl.equals(java.lang.Object) ************************
*Commit: commit f4cdd87a6103131b1faaa6531ee3650dd790d47e 1331936855 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.reflect.Types$ParameterizedTypeImpl.getRawType()
java.lang.reflect.ParameterizedType.getRawType()
java.lang.Object.equals(java.lang.Object)
com.google.common.reflect.Types$ParameterizedTypeImpl.getOwnerType()
java.lang.reflect.ParameterizedType.getOwnerType()
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
com.google.common.reflect.Types$ParameterizedTypeImpl.getActualTypeArguments()
java.lang.reflect.ParameterizedType.getActualTypeArguments()
java.util.Arrays.equals([Ljava.lang.Object;, [Ljava.lang.Object;)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.reflect.ParameterizedType.getRawType()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Object.equals(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.reflect.Types$ParameterizedTypeImpl.getOwnerType()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.equals(java.lang.Object)
Também chamam:
java.lang.Object.equals(java.lang.Object)
Confiança: 0.11999980063994577
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: java.lang.reflect.ParameterizedType.getOwnerType()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.reflect.Types$ParameterizedTypeImpl.getActualTypeArguments()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Também chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Confiança: 0.2619043380954245
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1666660733335944
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: java.lang.reflect.ParameterizedType.getActualTypeArguments()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Arrays.equals([Ljava.lang.Object;, [Ljava.lang.Object;)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.ContiguousSet.subSet(com.google.common.collect.ContiguousSet$C, com.google.common.collect.ContiguousSet$C) ************************
*Commit: commit b9358ae952477b4b8ba9bd97428bc6ed46acc61e 1332174417 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.ContiguousSet$C)
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.ContiguousSet$C)
com.google.common.collect.ImmutableSortedSet.comparator()
java.util.Comparator.compare(null, null)
com.google.common.base.Preconditions.checkArgument(Z)
com.google.common.collect.ContiguousSet.subSetImpl(com.google.common.collect.ContiguousSet$C, Z, com.google.common.collect.ContiguousSet$C, Z)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.ContiguousSet$C)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableSortedSet.comparator()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Comparator.compare(null, null)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ContiguousSet.subSetImpl(com.google.common.collect.ContiguousSet$C, Z, com.google.common.collect.ContiguousSet$C, Z)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z)
Também chamam:
java.util.Iterator.next()
Confiança: 0.07608659143728567
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.EmptyContiguousSet.createDescendingSet() ************************
*Commit: commit b9358ae952477b4b8ba9bd97428bc6ed46acc61e 1332174417 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Ordering.natural()
com.google.common.collect.Ordering.reverse()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Ordering.reverse()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
java.util.Arrays.asList([Ljava.lang.Comparable;)
Confiança: 0.18867970660146702
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
com.google.common.collect.ImmutableSortedMultiset.copyOf(java.util.Comparator, java.lang.Iterable)
Confiança: 0.1320754184690615
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
com.google.common.collect.Ordering.natural()
Confiança: 0.1320754184690615
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
com.google.common.collect.ImmutableSortedSet.copyOf(java.util.Comparator, java.util.Collection)
Confiança: 0.1320754184690615
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.RegularContiguousSet$DescendingContiguousSet.DescendingContiguousSet() ************************
*Commit: commit b9358ae952477b4b8ba9bd97428bc6ed46acc61e 1332174417 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Ordering.natural()
com.google.common.collect.Ordering.reverse()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Ordering.reverse()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
java.util.Arrays.asList([Ljava.lang.Comparable;)
Confiança: 0.18867970660146702
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
com.google.common.collect.ImmutableSortedMultiset.copyOf(java.util.Comparator, java.lang.Iterable)
Confiança: 0.1320754184690615
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
com.google.common.collect.Ordering.natural()
Confiança: 0.1320754184690615
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
com.google.common.collect.ImmutableSortedSet.copyOf(java.util.Comparator, java.util.Collection)
Confiança: 0.1320754184690615
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.math.BigIntegerMath.binomial(I, I) ************************
*Commit: commit 8cd024fe646729e855468750cf2a20e8ab0f770f 1332558502 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.math.MathPreconditions.checkNonNegative(java.lang.String, I)
com.google.common.math.MathPreconditions.checkNonNegative(java.lang.String, I)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.math.LongMath.binomial(I, I)
java.math.BigInteger.valueOf(J)
java.math.BigInteger.valueOf(J)
java.math.BigInteger.multiply(java.math.BigInteger)
java.math.BigInteger.valueOf(J)
java.math.BigInteger.divide(java.math.BigInteger)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.math.MathPreconditions.checkNonNegative(java.lang.String, I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.math.LongMath.binomial(I, I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2083336794451136
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Chamada: java.math.BigInteger.valueOf(J)
Nenhuma sugestão fornecida.
**************************
Chamada: java.math.BigInteger.valueOf(J)
Nenhuma sugestão fornecida.
**************************
Chamada: java.math.BigInteger.multiply(java.math.BigInteger)
Nenhuma sugestão fornecida.
**************************
Chamada: java.math.BigInteger.valueOf(J)
Nenhuma sugestão fornecida.
**************************
Chamada: java.math.BigInteger.divide(java.math.BigInteger)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.math.BigIntegerMath.listProduct(java.util.List) ************************
*Commit: commit 8cd024fe646729e855468750cf2a20e8ab0f770f 1332558502 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.List.size()
com.google.common.math.BigIntegerMath.listProduct(java.util.List, I, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.math.BigIntegerMath.listProduct(java.util.List, I, I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.iterator()
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
java.util.List.get(I)
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
java.util.List.get(I)
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.math.BigIntegerMath.listProduct(java.util.List, I, I) ************************
*Commit: commit 8cd024fe646729e855468750cf2a20e8ab0f770f 1332558502 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.List.get(I)
java.util.List.get(I)
java.util.List.get(I)
java.math.BigInteger.multiply(java.math.BigInteger)
java.util.List.get(I)
java.util.List.get(I)
java.math.BigInteger.multiply(java.math.BigInteger)
java.util.List.get(I)
java.math.BigInteger.multiply(java.math.BigInteger)
com.google.common.math.BigIntegerMath.listProduct(java.util.List, I, I)
com.google.common.math.BigIntegerMath.listProduct(java.util.List, I, I)
java.math.BigInteger.multiply(java.math.BigInteger)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.List.get(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: java.util.List.get(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: java.math.BigInteger.multiply(java.math.BigInteger)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: java.math.BigInteger.multiply(java.math.BigInteger)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.math.BigInteger.multiply(java.math.BigInteger)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: com.google.common.math.BigIntegerMath.listProduct(java.util.List, I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.math.BigIntegerMath.listProduct(java.util.List, I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.math.BigInteger.multiply(java.math.BigInteger)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.math.LongMath.binomial(I, I) ************************
*Commit: commit 8cd024fe646729e855468750cf2a20e8ab0f770f 1332558502 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.math.MathPreconditions.checkNonNegative(java.lang.String, I)
com.google.common.math.MathPreconditions.checkNonNegative(java.lang.String, I)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.math.IntMath.gcd(I, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.math.MathPreconditions.checkNonNegative(java.lang.String, I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.math.IntMath.gcd(I, I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2083336794451136
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Iterators.unmodifiableListIterator(java.util.ListIterator) ************************
*Commit: commit d72c700e82a8aa728569ff7182aac5b63978f83f 1332876367 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.util.ListIterator)
java.util.ListIterator.hasNext()
java.util.ListIterator.hasPrevious()
java.util.ListIterator.next()
java.util.ListIterator.previous()
java.util.ListIterator.nextIndex()
java.util.ListIterator.previousIndex()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.ListIterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.ListIterator.hasPrevious()
** Sugestões fornecidas **
Usuários que chamam:
java.util.ListIterator.hasNext()
Também chamam:
java.util.ListIterator.next()
Confiança: 0.6363624006597012
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: java.util.ListIterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.ListIterator.hasPrevious()
Também chamam:
java.util.ListIterator.nextIndex()
Confiança: 0.5
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: java.util.ListIterator.previous()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.ListIterator.nextIndex()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.ListIterator.previousIndex()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Iterators.unmodifiableListIterator(java.util.ListIterator) ************************
*Commit: commit d72c700e82a8aa728569ff7182aac5b63978f83f 1332876367 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.util.ListIterator)
java.util.ListIterator.hasNext()
java.util.ListIterator.hasPrevious()
java.util.ListIterator.next()
java.util.ListIterator.previous()
java.util.ListIterator.nextIndex()
java.util.ListIterator.previousIndex()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.ListIterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.ListIterator.hasPrevious()
** Sugestões fornecidas **
Usuários que chamam:
java.util.ListIterator.hasNext()
Também chamam:
java.util.ListIterator.next()
Confiança: 0.6363624006597012
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: java.util.ListIterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.ListIterator.hasPrevious()
Também chamam:
java.util.ListIterator.nextIndex()
Confiança: 0.5
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: java.util.ListIterator.previous()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.ListIterator.nextIndex()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.ListIterator.previousIndex()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.DescendingImmutableSortedMultiset.createEntrySet() ************************
*Commit: commit 91c10473084d808b488b23d1fce21f72f8c3a928 1332876368 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableMultiset.entrySet()
java.util.Set.size()
com.google.common.collect.ImmutableCollection.asList()
com.google.common.collect.ImmutableList.iterator()
com.google.common.collect.ImmutableCollection.asList()
com.google.common.collect.ImmutableList.reverse()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Set.size()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableCollection.asList()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.size()
Também chamam:
java.util.Set.size()
Confiança: 0.1489356512813117
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.ImmutableList.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableCollection.asList()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableList.reverse()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.RegularImmutableMultiset.entryFromMapEntry(java.util.Map$Entry) ************************
*Commit: commit 91c10473084d808b488b23d1fce21f72f8c3a928 1332876368 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.collect.Multisets.immutableEntry(com.google.common.collect.RegularImmutableMultiset$(Ljava/util/Map$Entry;)Lcom/google/common/collect/Multiset$Entry;$E, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Multisets.immutableEntry(com.google.common.collect.RegularImmutableMultiset$(Ljava/util/Map$Entry;)Lcom/google/common/collect/Multiset$Entry;$E, I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.0891091942678931
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.RegularImmutableMultiset.createEntrySet() ************************
*Commit: commit 91c10473084d808b488b23d1fce21f72f8c3a928 1332876368 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.size()
com.google.common.collect.ImmutableCollection.asList()
com.google.common.collect.ImmutableList.iterator()
com.google.common.collect.ImmutableMap.entrySet()
com.google.common.collect.ImmutableCollection.asList()
com.google.common.collect.RegularImmutableMultiset.entryFromMapEntry(java.util.Map$Entry)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableCollection.asList()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.size()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.23333266879981923
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.size()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.23333266879981923
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.size()
Também chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Confiança: 0.23333266879981923
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.size()
Também chamam:
java.util.Map.entrySet()
Confiança: 0.19999966773324296
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.size()
Também chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getValue()
Confiança: 0.19999966773324296
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.ImmutableList.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableMap.entrySet()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableCollection.asList()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.RegularImmutableMultiset.entryFromMapEntry(java.util.Map$Entry)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.RegularImmutableSortedMultiset.createEntrySet() ************************
*Commit: commit 91c10473084d808b488b23d1fce21f72f8c3a928 1332876368 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.List.size()
com.google.common.collect.ImmutableCollection.asList()
com.google.common.collect.ImmutableList.iterator()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableCollection.asList()
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.iterator()
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
java.util.List.get(I)
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
java.util.List.get(I)
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.ImmutableList.iterator()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableSortedMap.lastEntry() ************************
*Commit: commit 4e23ecc8ae473ebe8aacd6fe5047c856ac4ebd02 1333043468 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableMap.isEmpty()
java.util.List.size()
java.util.List.get(I)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.primitives.UnsignedBytes.parseUnsignedByte(java.lang.String, I) ************************
*Commit: commit ee40820afb25d447acfce175d41246495d1e6db2 1333491397 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
java.lang.Integer.parseInt(java.lang.String, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.Integer.parseInt(java.lang.String, I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
Confiança: 0.375
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.String.length()
Confiança: 0.27499975079993216
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.primitives.UnsignedBytes.toString(B, I) ************************
*Commit: commit ee40820afb25d447acfce175d41246495d1e6db2 1333491397 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.primitives.UnsignedBytes.toInt(B)
java.lang.Integer.toString(I, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.primitives.UnsignedBytes.toInt(B)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2083336794451136
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Chamada: java.lang.Integer.toString(I, I)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.net.MediaType$Tokenizer.consumeTokenIfPresent(com.google.common.base.CharMatcher) ************************
*Commit: commit 1cac97e676f58cfb8a9e92d28aed9c080bd590d4 1333727312 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.net.MediaType$Tokenizer.hasMore()
com.google.common.base.Preconditions.checkState(Z)
com.google.common.base.CharMatcher.negate()
com.google.common.base.CharMatcher.indexIn(java.lang.CharSequence, I)
com.google.common.net.MediaType$Tokenizer.hasMore()
java.lang.String.substring(I, I)
java.lang.String.substring(I)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkState(Z)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.CharMatcher.negate()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: com.google.common.base.CharMatcher.indexIn(java.lang.CharSequence, I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.net.MediaType$Tokenizer.hasMore()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.substring(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.substring(I)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: java.nio.charset.Charset.forName(java.lang.String) ************************
*Commit: commit 98db310a151c40ca2b044d062a6d1ef230a8d6eb 1334083964 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.String.length()
java.lang.String.charAt(I)
java.lang.String.toUpperCase()
java.util.Map.get(java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.String.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.5121950033550847
Suporte: 0.00421348
Posição da Sugestão: 1
**************************
Chamada: java.lang.String.toUpperCase()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.get(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableMultimap$Keys$KeysEntrySet.createAsList() ************************
*Commit: commit 75225d640fa4d95f602a1b6060e37ec9ef4d8373 1334084075 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableMap.entrySet()
com.google.common.collect.ImmutableCollection.asList()
java.util.List.get(I)
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
java.util.Collection.size()
com.google.common.collect.Multisets.immutableEntry(com.google.common.collect.ImmutableMultimap$K, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableCollection.asList()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 1
**************************
Chamada: java.util.Collection.size()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.0891091942678931
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Multisets.immutableEntry(com.google.common.collect.ImmutableMultimap$K, I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Collection.clear()
Confiança: 0.1694912104342831
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Iterator.next()
Confiança: 0.10169455731168535
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableMultimap$Keys$KeysEntrySet.createAsList() ************************
*Commit: commit 75225d640fa4d95f602a1b6060e37ec9ef4d8373 1334084075 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableMap.entrySet()
com.google.common.collect.ImmutableCollection.asList()
java.util.List.get(I)
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
java.util.Collection.size()
com.google.common.collect.Multisets.immutableEntry(com.google.common.collect.ImmutableMultimap$K, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableCollection.asList()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 1
**************************
Chamada: java.util.Collection.size()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.0891091942678931
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Multisets.immutableEntry(com.google.common.collect.ImmutableMultimap$K, I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Collection.clear()
Confiança: 0.1694912104342831
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Iterator.next()
Confiança: 0.10169455731168535
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.RegularImmutableMultiset$EntrySet.createAsList() ************************
*Commit: commit 75225d640fa4d95f602a1b6060e37ec9ef4d8373 1334084075 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableMap.entrySet()
com.google.common.collect.ImmutableCollection.asList()
java.util.List.get(I)
com.google.common.collect.RegularImmutableMultiset.entryFromMapEntry(java.util.Map$Entry)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableCollection.asList()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.RegularImmutableMultiset.entryFromMapEntry(java.util.Map$Entry)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.cache.LongAdder.readObject(java.io.ObjectInputStream) ************************
*Commit: commit 06cbdb1ed84f235b51fec6acc740d8261357545d 1334084241 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.io.ObjectInputStream.defaultReadObject()
java.io.ObjectInputStream.readLong()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.io.ObjectInputStream.readLong()
** Sugestões fornecidas **
Usuários que chamam:
java.io.ObjectInputStream.defaultReadObject()
Também chamam:
java.io.ObjectInputStream.readObject()
Confiança: 0.5555549402474278
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.io.ObjectInputStream.defaultReadObject()
Também chamam:
java.io.ObjectInputStream.readObject()
java.io.ObjectInputStream.readObject()
Confiança: 0.37036996016495183
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.io.ObjectInputStream.defaultReadObject()
Também chamam:
com.google.common.collect.AbstractMultimap.setMap(java.util.Map)
Confiança: 0.29629670650171486
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.io.ObjectInputStream.defaultReadObject()
Também chamam:
java.io.ObjectInputStream.readInt()
Confiança: 0.25925823374571283
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.io.ObjectInputStream.defaultReadObject()
Também chamam:
com.google.common.collect.Serialization.readCount(java.io.ObjectInputStream)
Confiança: 0.2222216069140944
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.cache.LongAdder.writeObject(java.io.ObjectOutputStream) ************************
*Commit: commit 06cbdb1ed84f235b51fec6acc740d8261357545d 1334084241 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.io.ObjectOutputStream.defaultWriteObject()
com.google.common.cache.LongAdder.sum()
java.io.ObjectOutputStream.writeLong(J)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.cache.LongAdder.sum()
** Sugestões fornecidas **
Usuários que chamam:
java.io.ObjectOutputStream.defaultWriteObject()
Também chamam:
java.io.ObjectOutputStream.writeObject(java.lang.Object)
Confiança: 0.5200007974402169
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.io.ObjectOutputStream.defaultWriteObject()
Também chamam:
java.io.ObjectOutputStream.writeObject(java.lang.Object)
java.io.ObjectOutputStream.writeObject(java.lang.Object)
Confiança: 0.32000079744021687
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.io.ObjectOutputStream.defaultWriteObject()
Também chamam:
com.google.common.collect.Serialization.writeMultimap(com.google.common.collect.Multimap, java.io.ObjectOutputStream)
Confiança: 0.23999960127989153
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: java.io.ObjectOutputStream.writeLong(J)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.RangeMap.get(com.google.common.collect.RangeMap$K) ************************
*Commit: commit 97f00f81899c0faf6e63f45a92715f9797ab5b82 1334338965 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Cut.aboveValue(com.google.common.collect.RangeMap$K)
java.util.NavigableMap.lowerEntry(com.google.common.collect.Cut)
java.util.Map$Entry.getValue()
java.util.AbstractMap$SimpleEntry.getKey()
com.google.common.collect.Range.contains(com.google.common.collect.RangeMap$K)
java.util.Map$Entry.getValue()
java.util.AbstractMap$SimpleEntry.getValue()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.NavigableMap.lowerEntry(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.AbstractMap$SimpleEntry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.06818168946280408
Suporte: 0.0024077
Posição da Sugestão: 5
**************************
Chamada: com.google.common.collect.Range.contains(com.google.common.collect.RangeMap$K)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.AbstractMap$SimpleEntry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.06818168946280408
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.RangeMap.clear(com.google.common.collect.Range) ************************
*Commit: commit 97f00f81899c0faf6e63f45a92715f9797ab5b82 1334338965 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Range)
com.google.common.collect.Range.isEmpty()
java.util.NavigableMap.lowerEntry(com.google.common.collect.Cut)
java.util.Map$Entry.getValue()
com.google.common.collect.RangeMap$RangeValue.getUpperBound()
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
com.google.common.collect.RangeMap$RangeValue.withUpperBound(com.google.common.collect.Cut)
com.google.common.collect.RangeMap.removeRange(com.google.common.collect.RangeMap$RangeValue)
com.google.common.collect.RangeMap.putRange(com.google.common.collect.RangeMap$RangeValue)
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
com.google.common.collect.RangeMap$RangeValue.withLowerBound(com.google.common.collect.Cut)
com.google.common.collect.RangeMap.putRange(com.google.common.collect.RangeMap$RangeValue)
java.util.NavigableMap.lowerEntry(com.google.common.collect.Cut)
java.util.Map$Entry.getValue()
com.google.common.collect.RangeMap$RangeValue.getUpperBound()
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
com.google.common.collect.RangeMap.removeRange(com.google.common.collect.RangeMap$RangeValue)
com.google.common.collect.RangeMap$RangeValue.withLowerBound(com.google.common.collect.Cut)
com.google.common.collect.RangeMap.putRange(com.google.common.collect.RangeMap$RangeValue)
java.util.NavigableMap.subMap(com.google.common.collect.Cut, com.google.common.collect.Cut)
java.util.Map.clear()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Range.isEmpty()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.NavigableMap.lowerEntry(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.RangeMap$RangeValue.getUpperBound()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.06818168946280408
Suporte: 0.0024077
Posição da Sugestão: 5
**************************
Chamada: com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.RangeMap$RangeValue.withUpperBound(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.RangeMap.removeRange(com.google.common.collect.RangeMap$RangeValue)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.RangeMap.putRange(com.google.common.collect.RangeMap$RangeValue)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.RangeMap$RangeValue.withLowerBound(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.RangeMap.putRange(com.google.common.collect.RangeMap$RangeValue)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.NavigableMap.lowerEntry(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.RangeMap$RangeValue.getUpperBound()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.06818168946280408
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.RangeMap.removeRange(com.google.common.collect.RangeMap$RangeValue)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.RangeMap$RangeValue.withLowerBound(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.RangeMap.putRange(com.google.common.collect.RangeMap$RangeValue)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.NavigableMap.subMap(com.google.common.collect.Cut, com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.clear()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.RangeSet.toString() ************************
*Commit: commit 97f00f81899c0faf6e63f45a92715f9797ab5b82 1334338965 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.StringBuilder.append(C)
com.google.common.collect.RangeSet.asRanges()
java.lang.StringBuilder.append(java.lang.Object)
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.toString()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.RangeSet.asRanges()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.8139531110006131
Suporte: 0.00702247
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.Object)
Também chamam:
java.lang.StringBuilder.append(C)
Confiança: 0.6153852052063564
Suporte: 0.00160514
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00461477
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.RangeSet$StandardComplement.createAsRanges() ************************
*Commit: commit 97f00f81899c0faf6e63f45a92715f9797ab5b82 1334338965 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.RangeSet.asRanges()
java.util.Set.iterator()
com.google.common.collect.Cut.belowAll()
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
com.google.common.collect.Cut.aboveAll()
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
com.google.common.collect.AbstractIterator.endOfData()
com.google.common.collect.RangeSet$StandardComplement$1.iterator()
com.google.common.collect.Iterators.size(java.util.Iterator)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Set.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.belowAll()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.6374957947593357
Suporte: 0.0102327
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.9285710047620912
Suporte: 0.00782504
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.7179490456278818
Suporte: 0.00561798
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5490222521915037
Suporte: 0.00561798
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.4615388547534581
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.43835705288167764
Suporte: 0.0128411
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.41025604980933
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Cut.aboveAll()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.AbstractIterator.endOfData()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.RangeSet$StandardComplement$1.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Iterators.size(java.util.Iterator)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.TreeRangeSet.add(com.google.common.collect.Range) ************************
*Commit: commit 97f00f81899c0faf6e63f45a92715f9797ab5b82 1334338965 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Range)
com.google.common.collect.Range.isEmpty()
java.util.NavigableMap.lowerEntry(com.google.common.collect.Cut)
java.util.Map$Entry.getValue()
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
java.util.NavigableMap.floorEntry(com.google.common.collect.Cut)
java.util.Map$Entry.getValue()
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
java.util.NavigableMap.subMap(com.google.common.collect.Cut, com.google.common.collect.Cut)
java.util.Map.clear()
com.google.common.collect.TreeRangeSet.replaceRangeWithSameLowerBound(com.google.common.collect.Range)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Range.isEmpty()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.NavigableMap.lowerEntry(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.06818168946280408
Suporte: 0.0024077
Posição da Sugestão: 5
**************************
Chamada: com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.NavigableMap.floorEntry(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.06818168946280408
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Chamada: java.util.NavigableMap.subMap(com.google.common.collect.Cut, com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.clear()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.TreeRangeSet.replaceRangeWithSameLowerBound(com.google.common.collect.Range)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.TreeRangeSet.rangeContaining(com.google.common.collect.TreeRangeSet$C) ************************
*Commit: commit 97f00f81899c0faf6e63f45a92715f9797ab5b82 1334338965 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.TreeRangeSet$C)
com.google.common.collect.Cut.belowValue(com.google.common.collect.TreeRangeSet$C)
java.util.NavigableMap.floorEntry(com.google.common.collect.Cut)
java.util.Map$Entry.getValue()
com.google.common.collect.Range.contains(com.google.common.collect.TreeRangeSet$C)
java.util.Map$Entry.getValue()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Cut.belowValue(com.google.common.collect.TreeRangeSet$C)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.NavigableMap.floorEntry(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Range.contains(com.google.common.collect.TreeRangeSet$C)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.06818168946280408
Suporte: 0.0024077
Posição da Sugestão: 5
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.TreeRangeSet.encloses(com.google.common.collect.Range) ************************
*Commit: commit 97f00f81899c0faf6e63f45a92715f9797ab5b82 1334338965 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Range)
java.util.NavigableMap.floorEntry(com.google.common.collect.Cut)
java.util.Map$Entry.getValue()
com.google.common.collect.Range.encloses(com.google.common.collect.Range)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.NavigableMap.floorEntry(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Range.encloses(com.google.common.collect.Range)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.06818168946280408
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.TreeRangeSet.remove(com.google.common.collect.Range) ************************
*Commit: commit 97f00f81899c0faf6e63f45a92715f9797ab5b82 1334338965 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Range)
com.google.common.collect.Range.isEmpty()
java.util.NavigableMap.lowerEntry(com.google.common.collect.Cut)
java.util.Map$Entry.getValue()
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
com.google.common.collect.TreeRangeSet.replaceRangeWithSameLowerBound(com.google.common.collect.Range)
com.google.common.collect.TreeRangeSet.replaceRangeWithSameLowerBound(com.google.common.collect.Range)
java.util.NavigableMap.floorEntry(com.google.common.collect.Cut)
java.util.Map$Entry.getValue()
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
com.google.common.collect.TreeRangeSet.replaceRangeWithSameLowerBound(com.google.common.collect.Range)
java.util.NavigableMap.subMap(com.google.common.collect.Cut, com.google.common.collect.Cut)
java.util.Map.clear()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Range.isEmpty()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.NavigableMap.lowerEntry(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.06818168946280408
Suporte: 0.0024077
Posição da Sugestão: 5
**************************
Chamada: com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.TreeRangeSet.replaceRangeWithSameLowerBound(com.google.common.collect.Range)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.TreeRangeSet.replaceRangeWithSameLowerBound(com.google.common.collect.Range)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.NavigableMap.floorEntry(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.06818168946280408
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.TreeRangeSet.replaceRangeWithSameLowerBound(com.google.common.collect.Range)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.NavigableMap.subMap(com.google.common.collect.Cut, com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.clear()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.TreeMultiset$AvlNode.rotateLeft() ************************
*Commit: commit 24dbee52488621b0529ed0caa0b7128c050f32da 1335194121 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkState(Z)
com.google.common.collect.TreeMultiset$AvlNode.recompute()
com.google.common.collect.TreeMultiset$AvlNode.recomputeHeight()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.TreeMultiset$AvlNode.recompute()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.TreeMultiset$AvlNode.recomputeHeight()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.TreeMultiset$AvlNode.rotateRight() ************************
*Commit: commit 24dbee52488621b0529ed0caa0b7128c050f32da 1335194121 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkState(Z)
com.google.common.collect.TreeMultiset$AvlNode.recompute()
com.google.common.collect.TreeMultiset$AvlNode.recomputeHeight()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.TreeMultiset$AvlNode.recompute()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.TreeMultiset$AvlNode.recomputeHeight()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.TreeMultiset$AvlNode.rotateLeft() ************************
*Commit: commit 24dbee52488621b0529ed0caa0b7128c050f32da 1335194121 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkState(Z)
com.google.common.collect.TreeMultiset$AvlNode.recompute()
com.google.common.collect.TreeMultiset$AvlNode.recomputeHeight()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.TreeMultiset$AvlNode.recompute()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.TreeMultiset$AvlNode.recomputeHeight()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.TreeMultiset$AvlNode.rotateRight() ************************
*Commit: commit 24dbee52488621b0529ed0caa0b7128c050f32da 1335194121 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkState(Z)
com.google.common.collect.TreeMultiset$AvlNode.recompute()
com.google.common.collect.TreeMultiset$AvlNode.recomputeHeight()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.TreeMultiset$AvlNode.recompute()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.TreeMultiset$AvlNode.recomputeHeight()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.ArrayTable.index(java.util.List) ************************
*Commit: commit 548f8698683cb282d8a8d5f5a140af63562cc740 1335213226 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableMap.builder()
java.util.List.size()
java.util.List.get(I)
com.google.common.collect.ImmutableMap$Builder.put(com.google.common.collect.ArrayTable$(Ljava/util/List;)Lcom/google/common/collect/ImmutableMap;$E, java.lang.Integer)
com.google.common.collect.ImmutableMap$Builder.build()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.List.size()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableMap.builder()
Também chamam:
com.google.common.collect.ImmutableMap$Builder.build()
Confiança: 0.9333339978668473
Suporte: 0.00280899
Posição da Sugestão: 1
**************************
Chamada: java.util.List.get(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ImmutableMap$Builder.put(com.google.common.collect.ArrayTable$(Ljava/util/List;)Lcom/google/common/collect/ImmutableMap;$E, java.lang.Integer)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.ImmutableMap$Builder.build()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.ForwardingImmutableMap.createEntrySet() ************************
*Commit: commit a36dbdaa5863d986cba3f68ceee27e9715490ccc 1336489753 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
unsafeDelegate
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
com.google.common.collect.ForwardingCollection.size()
com.google.common.collect.ForwardingCollection.size()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map.entrySet()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.5999987540027661
Suporte: 0.00963082
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.5874989097524204
Suporte: 0.00943018
Posição da Sugestão: 2
**************************
Chamada: com.google.common.collect.ForwardingCollection.size()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7659567473791592
Suporte: 0.00722311
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.21276582207338568
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.1489356512813117
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.0848486221489221
Suporte: 0.00280899
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.ForwardingCollection.size()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.ForwardingImmutableMap.ForwardingImmutableMap([Ljava.util.Map$Entry;) ************************
*Commit: commit a36dbdaa5863d986cba3f68ceee27e9715490ccc 1336489753 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Maps.newLinkedHashMap()
java.util.Map$Entry.getKey()
com.google.common.base.Preconditions.checkNotNull(null)
java.util.Map$Entry.getValue()
com.google.common.base.Preconditions.checkNotNull(null)
java.util.Map.put(com.google.common.collect.ForwardingImmutableMap$K, com.google.common.collect.ForwardingImmutableMap$V)
java.util.Collections.unmodifiableMap(java.util.Map)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkNotNull(null)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkNotNull(null)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.0891091942678931
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Chamada: java.util.Map.put(com.google.common.collect.ForwardingImmutableMap$K, com.google.common.collect.ForwardingImmutableMap$V)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collections.unmodifiableMap(java.util.Map)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.ForwardingImmutableMap.createValues() ************************
*Commit: commit a36dbdaa5863d986cba3f68ceee27e9715490ccc 1336489753 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.values()
unsafeDelegate
---------------- Chamadas de método adicionadas ---------------
Chamada: unsafeDelegate
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.values()
Também chamam:
java.util.Iterator.next()
Confiança: 0.25925823374571283
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.values()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.2222216069140944
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.values()
Também chamam:
java.util.Collection.iterator()
Confiança: 0.2222216069140944
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.values()
Também chamam:
java.util.Collection.iterator()
java.util.Iterator.next()
Confiança: 0.2222216069140944
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.values()
Também chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Confiança: 0.2222216069140944
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ForwardingImmutableSet.iterator() ************************
*Commit: commit a36dbdaa5863d986cba3f68ceee27e9715490ccc 1336489753 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Set.iterator()
com.google.common.collect.Iterators.unmodifiableIterator(java.util.Iterator)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Iterators.unmodifiableIterator(java.util.Iterator)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.6374957947593357
Suporte: 0.0102327
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.5249990655020746
Suporte: 0.00842697
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Confiança: 0.48749890975242033
Suporte: 0.00782504
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.36249922125172884
Suporte: 0.00581862
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
java.util.Iterator.remove()
Confiança: 0.34999937700138306
Suporte: 0.00561798
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableMapEntrySet.contains(java.lang.Object) ************************
*Commit: commit a36dbdaa5863d986cba3f68ceee27e9715490ccc 1336489753 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableMapEntrySet.map()
java.util.Map$Entry.getKey()
com.google.common.collect.ImmutableMap.get(java.lang.Object)
java.util.Map$Entry.getValue()
java.lang.Object.equals(java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableMap.get(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Object.equals(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.0891091942678931
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableMapKeySet.createAsList() ************************
*Commit: commit a36dbdaa5863d986cba3f68ceee27e9715490ccc 1336489753 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableMapKeySet.map()
com.google.common.collect.ImmutableMap.entrySet()
com.google.common.collect.ImmutableCollection.asList()
java.util.List.get(I)
java.util.Map$Entry.getKey()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableMap.entrySet()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableCollection.asList()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableMapValues.createAsList() ************************
*Commit: commit a36dbdaa5863d986cba3f68ceee27e9715490ccc 1336489753 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableMapValues.map()
com.google.common.collect.ImmutableMap.entrySet()
com.google.common.collect.ImmutableCollection.asList()
java.util.List.get(I)
java.util.Map$Entry.getValue()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableMap.entrySet()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableCollection.asList()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.TransformedImmutableSet.iterator() ************************
*Commit: commit a36dbdaa5863d986cba3f68ceee27e9715490ccc 1336489753 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableCollection.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.collect.TransformedImmutableSet.transform(com.google.common.collect.TransformedImmutableSet$D)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7087362667937666
Suporte: 0.0292937
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.TransformedImmutableSet.transform(com.google.common.collect.TransformedImmutableSet$D)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.43835705288167764
Suporte: 0.0128411
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.2260277807173556
Suporte: 0.00662119
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.21621642251782006
Suporte: 0.00963082
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.1666668911713532
Suporte: 0.00742376
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableMapEntrySet.contains(java.lang.Object) ************************
*Commit: commit a36dbdaa5863d986cba3f68ceee27e9715490ccc 1336489753 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableMapEntrySet.map()
java.util.Map$Entry.getKey()
com.google.common.collect.ImmutableMap.get(java.lang.Object)
java.util.Map$Entry.getValue()
java.lang.Object.equals(java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableMap.get(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Object.equals(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.0891091942678931
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableMapKeySet.createAsList() ************************
*Commit: commit a36dbdaa5863d986cba3f68ceee27e9715490ccc 1336489753 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableMapKeySet.map()
com.google.common.collect.ImmutableMap.entrySet()
com.google.common.collect.ImmutableCollection.asList()
java.util.List.get(I)
java.util.Map$Entry.getKey()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableMap.entrySet()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableCollection.asList()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableMapValues.createAsList() ************************
*Commit: commit a36dbdaa5863d986cba3f68ceee27e9715490ccc 1336489753 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableMapValues.map()
com.google.common.collect.ImmutableMap.entrySet()
com.google.common.collect.ImmutableCollection.asList()
java.util.List.get(I)
java.util.Map$Entry.getValue()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableMap.entrySet()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableCollection.asList()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.RegularImmutableTable$ImmutableArrayMap.createEntrySet() ************************
*Commit: commit a36dbdaa5863d986cba3f68ceee27e9715490ccc 1336489753 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.RegularImmutableTable$ImmutableArrayMap.isFull()
com.google.common.collect.RegularImmutableTable$ImmutableArrayMap.size()
com.google.common.collect.RegularImmutableTable$ImmutableArrayMap.getKey(I)
com.google.common.collect.RegularImmutableTable$ImmutableArrayMap.getValue(I)
com.google.common.collect.Maps.immutableEntry(com.google.common.collect.RegularImmutableTable$ImmutableArrayMap$K, com.google.common.collect.RegularImmutableTable$ImmutableArrayMap$V)
com.google.common.collect.RegularImmutableTable$ImmutableArrayMap.keyToIndex()
java.util.Map.size()
com.google.common.collect.RegularImmutableTable$ImmutableArrayMap.getValue(I)
com.google.common.collect.RegularImmutableTable$ImmutableArrayMap.getKey(I)
com.google.common.collect.Maps.immutableEntry(com.google.common.collect.RegularImmutableTable$ImmutableArrayMap$K, com.google.common.collect.RegularImmutableTable$ImmutableArrayMap$V)
com.google.common.collect.AbstractIterator.endOfData()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.RegularImmutableTable$ImmutableArrayMap.size()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.RegularImmutableTable$ImmutableArrayMap.getKey(I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.RegularImmutableTable$ImmutableArrayMap.getValue(I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Maps.immutableEntry(com.google.common.collect.RegularImmutableTable$ImmutableArrayMap$K, com.google.common.collect.RegularImmutableTable$ImmutableArrayMap$V)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.RegularImmutableTable$ImmutableArrayMap.keyToIndex()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.size()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.RegularImmutableTable$ImmutableArrayMap.getValue(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.size()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.23333266879981923
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.size()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.23333266879981923
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.size()
Também chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Confiança: 0.23333266879981923
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.size()
Também chamam:
java.util.Map.entrySet()
Confiança: 0.19999966773324296
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.size()
Também chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getValue()
Confiança: 0.19999966773324296
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.RegularImmutableTable$ImmutableArrayMap.getKey(I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Maps.immutableEntry(com.google.common.collect.RegularImmutableTable$ImmutableArrayMap$K, com.google.common.collect.RegularImmutableTable$ImmutableArrayMap$V)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.AbstractIterator.endOfData()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.TransformedImmutableSet.iterator() ************************
*Commit: commit a36dbdaa5863d986cba3f68ceee27e9715490ccc 1336489753 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableCollection.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.collect.TransformedImmutableSet.transform(com.google.common.collect.TransformedImmutableSet$D)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7087362667937666
Suporte: 0.0292937
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.TransformedImmutableSet.transform(com.google.common.collect.TransformedImmutableSet$D)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.43835705288167764
Suporte: 0.0128411
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.2260277807173556
Suporte: 0.00662119
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.21621642251782006
Suporte: 0.00963082
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.1666668911713532
Suporte: 0.00742376
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.testing.google.SetGenerators$AbstractContiguousSetGenerator.checkedCreate(java.util.SortedSet) ************************
*Commit: commit c9547ca5b186ae058e75547a95899b33274b1483 1336743215 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Lists.newArrayList(java.lang.Iterable)
java.util.List.size()
java.util.List.get(I)
java.util.List.get(I)
junit.framework.Assert.assertEquals(I, I)
java.util.List.isEmpty()
com.google.common.collect.Ranges.closedOpen(java.lang.Integer, java.lang.Integer)
com.google.common.collect.Ranges.encloseAll(java.lang.Iterable)
com.google.common.collect.DiscreteDomains.integers()
com.google.common.collect.Range.asSet(com.google.common.collect.DiscreteDomain)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 1
**************************
Chamada: java.util.List.get(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: junit.framework.Assert.assertEquals(I, I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: java.util.List.isEmpty()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Ranges.closedOpen(java.lang.Integer, java.lang.Integer)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Ranges.encloseAll(java.lang.Iterable)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.DiscreteDomains.integers()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Range.asSet(com.google.common.collect.DiscreteDomain)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.util.concurrent.MoreExecutors.invokeAnyImpl(com.google.common.util.concurrent.ListeningExecutorService, java.util.Collection, Z, J) ************************
*Commit: commit 6de50d39a296a3d5f00779dbeaf3b520791b9cda 1337615706 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Collection.size()
com.google.common.base.Preconditions.checkArgument(Z)
com.google.common.collect.Lists.newArrayListWithCapacity(I)
com.google.common.collect.Queues.newLinkedBlockingQueue()
java.lang.System.nanoTime()
java.util.Collection.iterator()
java.util.Iterator.next()
com.google.common.util.concurrent.MoreExecutors.submitAndAddQueueListener(com.google.common.util.concurrent.ListeningExecutorService, java.util.concurrent.Callable, java.util.concurrent.BlockingQueue)
java.util.List.add(java.util.concurrent.Future)
java.util.Queue.poll()
java.util.Iterator.next()
com.google.common.util.concurrent.MoreExecutors.submitAndAddQueueListener(com.google.common.util.concurrent.ListeningExecutorService, java.util.concurrent.Callable, java.util.concurrent.BlockingQueue)
java.util.List.add(java.util.concurrent.Future)
java.util.concurrent.BlockingQueue.poll(J, java.util.concurrent.TimeUnit)
java.lang.System.nanoTime()
java.util.concurrent.BlockingQueue.take()
java.util.concurrent.Future.get()
java.util.concurrent.Future.cancel(Z)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkArgument(Z)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Collection.clear()
Confiança: 0.1694912104342831
Suporte: 0.00200642
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Iterator.next()
Confiança: 0.10169455731168535
Suporte: 0.00120385
Posição da Sugestão: 2
**************************
Chamada: com.google.common.collect.Lists.newArrayListWithCapacity(I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z)
Também chamam:
java.util.Iterator.next()
Confiança: 0.07608659143728567
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Queues.newLinkedBlockingQueue()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.System.nanoTime()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.iterator()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.System.nanoTime()
Também chamam:
java.lang.System.nanoTime()
Confiança: 0.9333339978668473
Suporte: 0.00280899
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.6551725323186598
Suporte: 0.0038122
Posição da Sugestão: 1
**************************
Chamada: com.google.common.util.concurrent.MoreExecutors.submitAndAddQueueListener(com.google.common.util.concurrent.ListeningExecutorService, java.util.concurrent.Callable, java.util.concurrent.BlockingQueue)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.6842112166203242
Suporte: 0.00260835
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.21621642251782006
Suporte: 0.00963082
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.1666668911713532
Suporte: 0.00742376
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.next()
Confiança: 0.12162182185553123
Suporte: 0.00541734
Posição da Sugestão: 5
**************************
Chamada: java.util.List.add(java.util.concurrent.Future)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Queue.poll()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.util.concurrent.MoreExecutors.submitAndAddQueueListener(com.google.common.util.concurrent.ListeningExecutorService, java.util.concurrent.Callable, java.util.concurrent.BlockingQueue)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.6842112166203242
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.2222216069140944
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.21621642251782006
Suporte: 0.00963082
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.1666668911713532
Suporte: 0.00742376
Posição da Sugestão: 0
**************************
Chamada: java.util.List.add(java.util.concurrent.Future)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.BlockingQueue.poll(J, java.util.concurrent.TimeUnit)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.System.nanoTime()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.BlockingQueue.take()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.System.nanoTime()
Também chamam:
java.lang.System.nanoTime()
Confiança: 0.9333339978668473
Suporte: 0.00280899
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.System.nanoTime()
java.lang.System.nanoTime()
Também chamam:
java.lang.Thread.interrupt()
Confiança: 0.571429588570981
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.System.nanoTime()
java.lang.System.nanoTime()
Também chamam:
java.lang.Thread.currentThread()
Confiança: 0.571429588570981
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.System.nanoTime()
java.lang.System.nanoTime()
Também chamam:
java.lang.Thread.currentThread()
java.lang.Thread.interrupt()
Confiança: 0.571429588570981
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.System.nanoTime()
Também chamam:
java.lang.Thread.interrupt()
Confiança: 0.5333346624003614
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Chamada: java.util.concurrent.Future.get()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.Future.cancel(Z)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableSortedMultiset.copyOfSortedEntries(java.util.Comparator, java.util.Collection) ************************
*Commit: commit 06e76c06ea93a4c39f4e823a6ba8e0c4b3f67c97 1337707508 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Collection.isEmpty()
com.google.common.collect.ImmutableSortedMultiset.emptyMultiset(java.util.Comparator)
java.util.Collection.size()
java.util.Collection.size()
java.util.Collection.size()
com.google.common.collect.Multiset$Entry.getElement()
com.google.common.collect.ImmutableList$Builder.add(com.google.common.collect.ImmutableSortedMultiset$(Ljava/util/Comparator;Ljava/util/Collection;)Lcom/google/common/collect/ImmutableSortedMultiset;$E)
com.google.common.collect.Multiset$Entry.getCount()
com.google.common.collect.ImmutableList$Builder.build()
java.util.Collection.size()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableSortedMultiset.emptyMultiset(java.util.Comparator)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.size()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Collection.clear()
Confiança: 0.1694912104342831
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Iterator.next()
Confiança: 0.10169455731168535
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: java.util.Collection.size()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Collection.clear()
Confiança: 0.1694912104342831
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Iterator.next()
Confiança: 0.10169455731168535
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Multiset$Entry.getElement()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Collection.clear()
Confiança: 0.1694912104342831
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Iterator.next()
Confiança: 0.10169455731168535
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.ImmutableList$Builder.add(com.google.common.collect.ImmutableSortedMultiset$(Ljava/util/Comparator;Ljava/util/Collection;)Lcom/google/common/collect/ImmutableSortedMultiset;$E)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multiset$Entry.getElement()
Também chamam:
com.google.common.collect.Multiset$Entry.getCount()
Confiança: 0.690475936190588
Suporte: 0.00581862
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Multiset$Entry.getCount()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableList$Builder.build()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multiset$Entry.getCount()
Também chamam:
com.google.common.collect.Multiset$Entry.getElement()
Confiança: 0.2058817062283874
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: java.util.Collection.size()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.RegularImmutableSortedMultiset.getSubMultiset(I, I) ************************
*Commit: commit 06e76c06ea93a4c39f4e823a6ba8e0c4b3f67c97 1337707508 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkPositionIndexes(I, I, I)
com.google.common.collect.ImmutableSortedMultiset.comparator()
com.google.common.collect.ImmutableSortedMultiset.emptyMultiset(java.util.Comparator)
getSubSet
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableSortedMultiset.comparator()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkPositionIndexes(I, I, I)
Também chamam:
java.util.Collections.emptyList()
Confiança: 0.5333346624003614
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.ImmutableSortedMultiset.emptyMultiset(java.util.Comparator)
Nenhuma sugestão fornecida.
**************************
Chamada: getSubSet
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.RegularImmutableSortedMultiset.getEntry(I) ************************
*Commit: commit 06e76c06ea93a4c39f4e823a6ba8e0c4b3f67c97 1337707508 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableCollection.asList()
java.util.List.get(I)
com.google.common.collect.Multisets.immutableEntry(com.google.common.collect.RegularImmutableSortedMultiset$E, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Multisets.immutableEntry(com.google.common.collect.RegularImmutableSortedMultiset$E, I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableSortedMap.newView(java.util.SortedMap, java.util.Comparator) ************************
*Commit: commit 54577caba118a72b35be0bf73f2d4453ee026523 1338331516 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.isEmpty()
forComparator
---------------- Chamadas de método adicionadas ---------------
Chamada: forComparator
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.isEmpty()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1842099050417082
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.isEmpty()
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z)
Confiança: 0.1578943916898379
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableSortedMap.fromSortedEntries(java.util.Comparator, java.util.Collection) ************************
*Commit: commit 54577caba118a72b35be0bf73f2d4453ee026523 1338331516 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Collection.isEmpty()
com.google.common.collect.ImmutableSortedMap.emptyMap(java.util.Comparator)
com.google.common.collect.ImmutableList.builder()
com.google.common.collect.ImmutableList.builder()
java.util.Map$Entry.getKey()
com.google.common.collect.ImmutableList$Builder.add(com.google.common.collect.ImmutableSortedMap$(Ljava/util/Comparator;Ljava/util/Collection;)Lcom/google/common/collect/ImmutableSortedMap;$K)
java.util.Map$Entry.getValue()
com.google.common.collect.ImmutableList$Builder.add(com.google.common.collect.ImmutableSortedMap$(Ljava/util/Comparator;Ljava/util/Collection;)Lcom/google/common/collect/ImmutableSortedMap;$V)
com.google.common.collect.ImmutableList$Builder.build()
com.google.common.collect.ImmutableList$Builder.build()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableSortedMap.emptyMap(java.util.Comparator)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableList.builder()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableList.builder()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableList$Builder.add(com.google.common.collect.ImmutableSortedMap$(Ljava/util/Comparator;Ljava/util/Collection;)Lcom/google/common/collect/ImmutableSortedMap;$K)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableList$Builder.add(com.google.common.collect.ImmutableSortedMap$(Ljava/util/Comparator;Ljava/util/Collection;)Lcom/google/common/collect/ImmutableSortedMap;$V)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.0891091942678931
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.ImmutableList$Builder.build()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableList$Builder.build()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.RegularImmutableSortedMap$EntrySet.createAsList() ************************
*Commit: commit 54577caba118a72b35be0bf73f2d4453ee026523 1338331516 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.RegularImmutableSortedMap.keySet()
com.google.common.collect.ImmutableCollection.asList()
com.google.common.collect.RegularImmutableSortedMap.values()
com.google.common.collect.ImmutableCollection.asList()
java.util.List.get(I)
java.util.List.get(I)
com.google.common.collect.Maps.immutableEntry(com.google.common.collect.RegularImmutableSortedMap$K, com.google.common.collect.RegularImmutableSortedMap$V)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableCollection.asList()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.RegularImmutableSortedMap.values()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableCollection.asList()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Maps.immutableEntry(com.google.common.collect.RegularImmutableSortedMap$K, com.google.common.collect.RegularImmutableSortedMap$V)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.primitives.UnsignedLongs.decode(java.lang.String) ************************
*Commit: commit 46fa75fb9486ccd18c4674d00a2e002224a98c74 1338332291 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.String.length()
java.lang.String.charAt(I)
java.lang.String.startsWith(java.lang.String)
java.lang.String.startsWith(java.lang.String)
java.lang.String.substring(I)
java.lang.String.substring(I)
java.lang.String.length()
java.lang.String.substring(I)
com.google.common.primitives.UnsignedLongs.parseUnsignedLong(java.lang.String, I)
java.lang.Throwable.initCause(java.lang.Throwable)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.String.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.5121950033550847
Suporte: 0.00421348
Posição da Sugestão: 1
**************************
Chamada: java.lang.String.startsWith(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.startsWith(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.substring(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.substring(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.length()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.substring(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.5121950033550847
Suporte: 0.00421348
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.2926825117427963
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.length()
Confiança: 0.26829250503262697
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.StringBuilder.append(C)
Confiança: 0.24390249832245767
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.toString()
Confiança: 0.24390249832245767
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Chamada: com.google.common.primitives.UnsignedLongs.parseUnsignedLong(java.lang.String, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Throwable.initCause(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableSet.construct(I, [Ljava.lang.Object;) ************************
*Commit: commit 03afbea918471a1b536c0754b10719adc0317135 1338586897 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableSet.of()
com.google.common.collect.ImmutableSet.of(com.google.common.collect.ImmutableSet$(I[Ljava/lang/Object;)Lcom/google/common/collect/ImmutableSet;$E)
com.google.common.collect.ImmutableSet.chooseTableSize(I)
checkElementNotNull
java.lang.Object.hashCode()
com.google.common.collect.Hashing.smear(I)
java.lang.Object.equals(java.lang.Object)
java.util.Arrays.fill([Ljava.lang.Object;, I, I, java.lang.Object)
com.google.common.collect.ImmutableSet.chooseTableSize(I)
com.google.common.collect.ImmutableSet.construct(I, [Ljava.lang.Object;)
com.google.common.collect.ObjectArrays.arraysCopyOf([Ljava.lang.Object;, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableSet.of(com.google.common.collect.ImmutableSet$(I[Ljava/lang/Object;)Lcom/google/common/collect/ImmutableSet;$E)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableSet.chooseTableSize(I)
Nenhuma sugestão fornecida.
**************************
Chamada: checkElementNotNull
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Object.hashCode()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Hashing.smear(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.hashCode()
Também chamam:
java.lang.Object.hashCode()
Confiança: 0.21428579904758174
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Chamada: java.lang.Object.equals(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Arrays.fill([Ljava.lang.Object;, I, I, java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.equals(java.lang.Object)
Também chamam:
java.lang.Object.equals(java.lang.Object)
Confiança: 0.11999980063994577
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.ImmutableSet.chooseTableSize(I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableSet.construct(I, [Ljava.lang.Object;)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ObjectArrays.arraysCopyOf([Ljava.lang.Object;, I)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.util.concurrent.Striped$PowerOfTwoStriped.indexFor(java.lang.Object) ************************
*Commit: commit 61e6a48a69ba09f65499d6e0394d448e9313777c 1339013996 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.Object.hashCode()
com.google.common.util.concurrent.Striped.smear(I)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.util.concurrent.Striped.smear(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.hashCode()
Também chamam:
java.lang.Object.hashCode()
Confiança: 0.21428579904758174
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.AbstractMultimap$WrappedSet.removeAll(java.util.Collection) ************************
*Commit: commit 50aa85dbbbea3e3826a9d7e4c9de0fd3669c625d 1339015700 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Collection.isEmpty()
com.google.common.collect.AbstractMultimap$WrappedCollection.size()
com.google.common.collect.Sets.removeAllImpl(java.util.Set, java.lang.Iterable)
java.util.Collection.size()
com.google.common.collect.AbstractMultimap$WrappedCollection.removeIfEmpty()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.AbstractMultimap$WrappedCollection.size()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Sets.removeAllImpl(java.util.Set, java.lang.Iterable)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.size()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.AbstractMultimap$WrappedCollection.removeIfEmpty()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Collection.clear()
Confiança: 0.1694912104342831
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Iterator.next()
Confiança: 0.10169455731168535
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.reflect.TypeToken$TypeCollector.sortKeysByValue(java.util.Map, java.util.Comparator) ************************
*Commit: commit 80fa49a2680e9e7331e959ad9ec8b85337584f7f 1339436962 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.get(java.lang.Object)
java.util.Map.get(java.lang.Object)
java.util.Comparator.compare(null, null)
java.util.Map.keySet()
com.google.common.collect.Ordering.immutableSortedCopy(java.lang.Iterable)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map.get(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.get(java.lang.Object)
Também chamam:
com.google.common.collect.Count.get()
Confiança: 0.10714222143111428
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: java.util.Comparator.compare(null, null)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.get(java.lang.Object)
Também chamam:
com.google.common.collect.Count.get()
Confiança: 0.10714222143111428
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: java.util.Map.keySet()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Ordering.immutableSortedCopy(java.lang.Iterable)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.reflect.TypeToken$TypeCollector.collectTypes(java.lang.Iterable) ************************
*Commit: commit 80fa49a2680e9e7331e959ad9ec8b85337584f7f 1339436962 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Maps.newHashMap()
com.google.common.reflect.TypeToken$TypeCollector.collectTypes(com.google.common.reflect.TypeToken$TypeCollector$K, java.util.Map)
com.google.common.collect.Ordering.natural()
com.google.common.collect.Ordering.reverse()
com.google.common.reflect.TypeToken$TypeCollector.sortKeysByValue(java.util.Map, java.util.Comparator)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.reflect.TypeToken$TypeCollector.collectTypes(com.google.common.reflect.TypeToken$TypeCollector$K, java.util.Map)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Ordering.natural()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Ordering.reverse()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
java.util.Arrays.asList([Ljava.lang.Comparable;)
Confiança: 0.18867970660146702
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
com.google.common.collect.ImmutableSortedMultiset.copyOf(java.util.Comparator, java.lang.Iterable)
Confiança: 0.1320754184690615
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
com.google.common.collect.Ordering.natural()
Confiança: 0.1320754184690615
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
com.google.common.collect.ImmutableSortedSet.copyOf(java.util.Comparator, java.util.Collection)
Confiança: 0.1320754184690615
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: com.google.common.reflect.TypeToken$TypeCollector.sortKeysByValue(java.util.Map, java.util.Comparator)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.reflect.TypeToken$TypeCollector.collectTypes(com.google.common.reflect.TypeToken$TypeCollector$K, java.util.Map) ************************
*Commit: commit 80fa49a2680e9e7331e959ad9ec8b85337584f7f 1339436962 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.get(java.lang.Object)
com.google.common.reflect.TypeToken$TypeCollector.getRawType(com.google.common.reflect.TypeToken$TypeCollector$K)
java.lang.Class.isInterface()
com.google.common.reflect.TypeToken$TypeCollector.getInterfaces(com.google.common.reflect.TypeToken$TypeCollector$K)
com.google.common.reflect.TypeToken$TypeCollector.collectTypes(com.google.common.reflect.TypeToken$TypeCollector$K, java.util.Map)
java.lang.Math.max(I, I)
com.google.common.reflect.TypeToken$TypeCollector.getSuperclass(com.google.common.reflect.TypeToken$TypeCollector$K)
com.google.common.reflect.TypeToken$TypeCollector.collectTypes(com.google.common.reflect.TypeToken$TypeCollector$K, java.util.Map)
java.lang.Math.max(I, I)
java.util.Map.put(null, java.lang.Integer)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.reflect.TypeToken$TypeCollector.getRawType(com.google.common.reflect.TypeToken$TypeCollector$K)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.get(java.lang.Object)
Também chamam:
com.google.common.collect.Count.get()
Confiança: 0.10714222143111428
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: java.lang.Class.isInterface()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.reflect.TypeToken$TypeCollector.getInterfaces(com.google.common.reflect.TypeToken$TypeCollector$K)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.reflect.TypeToken$TypeCollector.collectTypes(com.google.common.reflect.TypeToken$TypeCollector$K, java.util.Map)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Math.max(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.reflect.TypeToken$TypeCollector.getSuperclass(com.google.common.reflect.TypeToken$TypeCollector$K)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.reflect.TypeToken$TypeCollector.collectTypes(com.google.common.reflect.TypeToken$TypeCollector$K, java.util.Map)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Math.max(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.put(null, java.lang.Integer)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.LinkedHashMultimap$ValueSet.contains(java.lang.Object) ************************
*Commit: commit c888c6bbb226998980f3fe84587f1f0606578c88 1339437002 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.Object.hashCode()
com.google.common.collect.Hashing.smear(I)
com.google.common.collect.LinkedHashMultimap$ValueEntry.getValue()
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Hashing.smear(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.hashCode()
Também chamam:
java.lang.Object.hashCode()
Confiança: 0.21428579904758174
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.LinkedHashMultimap$ValueEntry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.LinkedHashMultimap$ValueSet.remove(java.lang.Object) ************************
*Commit: commit c888c6bbb226998980f3fe84587f1f0606578c88 1339437002 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.Object.hashCode()
com.google.common.collect.Hashing.smear(I)
com.google.common.collect.LinkedHashMultimap$ValueEntry.getValue()
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
com.google.common.collect.LinkedHashMultimap.deleteFromValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink)
com.google.common.collect.LinkedHashMultimap.deleteFromMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Hashing.smear(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.hashCode()
Também chamam:
java.lang.Object.hashCode()
Confiança: 0.21428579904758174
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.LinkedHashMultimap$ValueEntry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.LinkedHashMultimap.deleteFromValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Também chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Confiança: 0.2619043380954245
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1666660733335944
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.LinkedHashMultimap.deleteFromMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.LinkedHashMultimap.create(com.google.common.collect.Multimap) ************************
*Commit: commit c888c6bbb226998980f3fe84587f1f0606578c88 1339437002 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Multimap.keySet()
java.util.Set.size()
com.google.common.collect.LinkedHashMultimap.create(I, I)
com.google.common.collect.AbstractMultimap.putAll(com.google.common.collect.Multimap)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Set.size()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.LinkedHashMultimap.create(I, I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.size()
Também chamam:
java.util.Set.size()
Confiança: 0.1489356512813117
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.AbstractMultimap.putAll(com.google.common.collect.Multimap)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.LinkedHashMultimap$ValueSet.iterator() ************************
*Commit: commit c888c6bbb226998980f3fe84587f1f0606578c88 1339437002 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
null.checkForComodification()
null.hasNext()
com.google.common.collect.LinkedHashMultimap$ValueEntry.getValue()
com.google.common.collect.LinkedHashMultimap$ValueEntry.getSuccessorInValueSet()
null.checkForComodification()
checkRemove
com.google.common.collect.LinkedHashMultimap$ValueEntry.getValue()
java.lang.Object.hashCode()
com.google.common.collect.Hashing.smear(I)
com.google.common.collect.LinkedHashMultimap.deleteFromValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink)
com.google.common.collect.LinkedHashMultimap.deleteFromMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry)
---------------- Chamadas de método adicionadas ---------------
Chamada: null.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.LinkedHashMultimap$ValueEntry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.LinkedHashMultimap$ValueEntry.getSuccessorInValueSet()
Nenhuma sugestão fornecida.
**************************
Chamada: null.checkForComodification()
Nenhuma sugestão fornecida.
**************************
Chamada: checkRemove
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.LinkedHashMultimap$ValueEntry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Object.hashCode()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Hashing.smear(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.hashCode()
Também chamam:
java.lang.Object.hashCode()
Confiança: 0.21428579904758174
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.LinkedHashMultimap.deleteFromValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.LinkedHashMultimap.deleteFromMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.LinkedHashMultimap$ValueSet.add(com.google.common.collect.LinkedHashMultimap$V) ************************
*Commit: commit c888c6bbb226998980f3fe84587f1f0606578c88 1339437002 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.Object.hashCode()
com.google.common.collect.Hashing.smear(I)
com.google.common.collect.LinkedHashMultimap$ValueEntry.getValue()
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
com.google.common.collect.LinkedHashMultimap.succeedsInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink, com.google.common.collect.LinkedHashMultimap$ValueSetLink)
com.google.common.collect.LinkedHashMultimap.succeedsInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink, com.google.common.collect.LinkedHashMultimap$ValueSetLink)
com.google.common.collect.LinkedHashMultimap$ValueEntry.getPredecessorInMultimap()
com.google.common.collect.LinkedHashMultimap.succeedsInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry, com.google.common.collect.LinkedHashMultimap$ValueEntry)
com.google.common.collect.LinkedHashMultimap.succeedsInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry, com.google.common.collect.LinkedHashMultimap$ValueEntry)
com.google.common.collect.LinkedHashMultimap$ValueSet.rehashIfNecessary()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Hashing.smear(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.hashCode()
Também chamam:
java.lang.Object.hashCode()
Confiança: 0.21428579904758174
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.LinkedHashMultimap$ValueEntry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.LinkedHashMultimap.succeedsInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink, com.google.common.collect.LinkedHashMultimap$ValueSetLink)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Também chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Confiança: 0.2619043380954245
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1666660733335944
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.LinkedHashMultimap.succeedsInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink, com.google.common.collect.LinkedHashMultimap$ValueSetLink)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.LinkedHashMultimap$ValueEntry.getPredecessorInMultimap()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.LinkedHashMultimap.succeedsInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry, com.google.common.collect.LinkedHashMultimap$ValueEntry)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.LinkedHashMultimap.succeedsInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry, com.google.common.collect.LinkedHashMultimap$ValueEntry)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.LinkedHashMultimap$ValueSet.rehashIfNecessary()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.LinkedHashMultimap$ValueSet.contains(java.lang.Object) ************************
*Commit: commit c888c6bbb226998980f3fe84587f1f0606578c88 1339437002 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.Object.hashCode()
com.google.common.collect.Hashing.smear(I)
com.google.common.collect.LinkedHashMultimap$ValueEntry.getValue()
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Hashing.smear(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.hashCode()
Também chamam:
java.lang.Object.hashCode()
Confiança: 0.21428579904758174
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.LinkedHashMultimap$ValueEntry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.LinkedHashMultimap$ValueSet.remove(java.lang.Object) ************************
*Commit: commit c888c6bbb226998980f3fe84587f1f0606578c88 1339437002 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.Object.hashCode()
com.google.common.collect.Hashing.smear(I)
com.google.common.collect.LinkedHashMultimap$ValueEntry.getValue()
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
com.google.common.collect.LinkedHashMultimap.deleteFromValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink)
com.google.common.collect.LinkedHashMultimap.deleteFromMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Hashing.smear(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.hashCode()
Também chamam:
java.lang.Object.hashCode()
Confiança: 0.21428579904758174
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.LinkedHashMultimap$ValueEntry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.LinkedHashMultimap.deleteFromValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Também chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Confiança: 0.2619043380954245
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1666660733335944
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.LinkedHashMultimap.deleteFromMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.LinkedHashMultimap.create(com.google.common.collect.Multimap) ************************
*Commit: commit c888c6bbb226998980f3fe84587f1f0606578c88 1339437002 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Multimap.keySet()
java.util.Set.size()
com.google.common.collect.LinkedHashMultimap.create(I, I)
com.google.common.collect.AbstractMultimap.putAll(com.google.common.collect.Multimap)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Set.size()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.LinkedHashMultimap.create(I, I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.size()
Também chamam:
java.util.Set.size()
Confiança: 0.1489356512813117
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.AbstractMultimap.putAll(com.google.common.collect.Multimap)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.LinkedHashMultimap$ValueSet.iterator() ************************
*Commit: commit c888c6bbb226998980f3fe84587f1f0606578c88 1339437002 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
null.checkForComodification()
null.hasNext()
com.google.common.collect.LinkedHashMultimap$ValueEntry.getValue()
com.google.common.collect.LinkedHashMultimap$ValueEntry.getSuccessorInValueSet()
null.checkForComodification()
checkRemove
com.google.common.collect.LinkedHashMultimap$ValueEntry.getValue()
java.lang.Object.hashCode()
com.google.common.collect.Hashing.smear(I)
com.google.common.collect.LinkedHashMultimap.deleteFromValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink)
com.google.common.collect.LinkedHashMultimap.deleteFromMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry)
---------------- Chamadas de método adicionadas ---------------
Chamada: null.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.LinkedHashMultimap$ValueEntry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.LinkedHashMultimap$ValueEntry.getSuccessorInValueSet()
Nenhuma sugestão fornecida.
**************************
Chamada: null.checkForComodification()
Nenhuma sugestão fornecida.
**************************
Chamada: checkRemove
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.LinkedHashMultimap$ValueEntry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Object.hashCode()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Hashing.smear(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.hashCode()
Também chamam:
java.lang.Object.hashCode()
Confiança: 0.21428579904758174
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.LinkedHashMultimap.deleteFromValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.LinkedHashMultimap.deleteFromMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.LinkedHashMultimap$ValueSet.add(com.google.common.collect.LinkedHashMultimap$V) ************************
*Commit: commit c888c6bbb226998980f3fe84587f1f0606578c88 1339437002 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.Object.hashCode()
com.google.common.collect.Hashing.smear(I)
com.google.common.collect.LinkedHashMultimap$ValueEntry.getValue()
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
com.google.common.collect.LinkedHashMultimap.succeedsInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink, com.google.common.collect.LinkedHashMultimap$ValueSetLink)
com.google.common.collect.LinkedHashMultimap.succeedsInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink, com.google.common.collect.LinkedHashMultimap$ValueSetLink)
com.google.common.collect.LinkedHashMultimap$ValueEntry.getPredecessorInMultimap()
com.google.common.collect.LinkedHashMultimap.succeedsInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry, com.google.common.collect.LinkedHashMultimap$ValueEntry)
com.google.common.collect.LinkedHashMultimap.succeedsInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry, com.google.common.collect.LinkedHashMultimap$ValueEntry)
com.google.common.collect.LinkedHashMultimap$ValueSet.rehashIfNecessary()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Hashing.smear(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.hashCode()
Também chamam:
java.lang.Object.hashCode()
Confiança: 0.21428579904758174
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.LinkedHashMultimap$ValueEntry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.LinkedHashMultimap.succeedsInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink, com.google.common.collect.LinkedHashMultimap$ValueSetLink)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Também chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Confiança: 0.2619043380954245
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1666660733335944
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.LinkedHashMultimap.succeedsInValueSet(com.google.common.collect.LinkedHashMultimap$ValueSetLink, com.google.common.collect.LinkedHashMultimap$ValueSetLink)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.LinkedHashMultimap$ValueEntry.getPredecessorInMultimap()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.LinkedHashMultimap.succeedsInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry, com.google.common.collect.LinkedHashMultimap$ValueEntry)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.LinkedHashMultimap.succeedsInMultimap(com.google.common.collect.LinkedHashMultimap$ValueEntry, com.google.common.collect.LinkedHashMultimap$ValueEntry)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.LinkedHashMultimap$ValueSet.rehashIfNecessary()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.primitives.ParseRequest.fromString(java.lang.String) ************************
*Commit: commit 8aa1ffe7c36a9f19c052dde74f6368da998e822f 1339437044 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.String.length()
java.lang.String.charAt(I)
java.lang.String.startsWith(java.lang.String)
java.lang.String.startsWith(java.lang.String)
java.lang.String.substring(I)
java.lang.String.substring(I)
java.lang.String.length()
java.lang.String.substring(I)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.String.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.5121950033550847
Suporte: 0.00421348
Posição da Sugestão: 1
**************************
Chamada: java.lang.String.startsWith(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.startsWith(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.substring(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.substring(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.length()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.substring(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.5121950033550847
Suporte: 0.00421348
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.2926825117427963
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.length()
Confiança: 0.26829250503262697
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.StringBuilder.append(C)
Confiança: 0.24390249832245767
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.toString()
Confiança: 0.24390249832245767
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Iterators.advance(java.util.Iterator, I) ************************
*Commit: commit 2ab9e938a833221d2da456a5107c2ea27cb73cb4 1339617891 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.util.Iterator)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.Object)
java.util.Iterator.hasNext()
java.util.Iterator.next()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.util.Iterator)
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.7647079518368999
Suporte: 0.00260835
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.util.Iterator)
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 1.0
Suporte: 0.00260835
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.Iterators.advance(java.util.Iterator, I) ************************
*Commit: commit 2ab9e938a833221d2da456a5107c2ea27cb73cb4 1339617891 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.util.Iterator)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.Object)
java.util.Iterator.hasNext()
java.util.Iterator.next()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.util.Iterator)
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.7647079518368999
Suporte: 0.00260835
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.util.Iterator)
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 1.0
Suporte: 0.00260835
Posição da Sugestão: 1
**************************
************************ Método Avaliado: hashString ************************
*Commit: commit a9c5facd9a1f73763a3245f58d91c82e1a650e3b 1339617934 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
java.lang.CharSequence.charAt(I)
com.google.common.hash.Murmur3_32HashFunction.mixK1(I)
com.google.common.hash.Murmur3_32HashFunction.mixH1(I, I)
java.lang.CharSequence.length()
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
com.google.common.hash.Murmur3_32HashFunction.mixK1(I)
java.lang.CharSequence.length()
fmix
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.CharSequence.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.5897439501906699
Suporte: 0.00461477
Posição da Sugestão: 1
**************************
Chamada: java.lang.CharSequence.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
Também chamam:
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.3913044420415319
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
Também chamam:
java.lang.CharSequence.toString()
Confiança: 0.3478266522491912
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.charAt(I)
Também chamam:
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.33333333333333337
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.charAt(I)
Também chamam:
java.lang.CharSequence.toString()
Confiança: 0.29629670650171486
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
Também chamam:
java.lang.CharSequence.subSequence(I, I)
Confiança: 0.26086890570927695
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: com.google.common.hash.Murmur3_32HashFunction.mixK1(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
Também chamam:
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.3913044420415319
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
Também chamam:
java.lang.CharSequence.toString()
Confiança: 0.3478266522491912
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.charAt(I)
Também chamam:
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.33333333333333337
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.charAt(I)
Também chamam:
java.lang.CharSequence.toString()
Confiança: 0.29629670650171486
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
Também chamam:
java.lang.CharSequence.subSequence(I, I)
Confiança: 0.26086890570927695
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: com.google.common.hash.Murmur3_32HashFunction.mixH1(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.CharSequence.length()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.CharSequence.length()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.5897439501906699
Suporte: 0.00461477
Posição da Sugestão: 1
**************************
Chamada: java.lang.CharSequence.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.5897439501906699
Suporte: 0.00461477
Posição da Sugestão: 1
**************************
Chamada: com.google.common.hash.Murmur3_32HashFunction.mixK1(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
Também chamam:
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.3913044420415319
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
Também chamam:
java.lang.CharSequence.toString()
Confiança: 0.3478266522491912
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.charAt(I)
Também chamam:
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.33333333333333337
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.charAt(I)
Também chamam:
java.lang.CharSequence.toString()
Confiança: 0.29629670650171486
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
Também chamam:
java.lang.CharSequence.subSequence(I, I)
Confiança: 0.26086890570927695
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: java.lang.CharSequence.length()
Nenhuma sugestão fornecida.
**************************
Chamada: fmix
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.5897439501906699
Suporte: 0.00461477
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.23076942737672906
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.23076942737672906
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.toString()
Confiança: 0.20512866387903447
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
java.lang.CharSequence.toString()
Confiança: 0.20512866387903447
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Maps$AsMapView.get(java.lang.Object) ************************
*Commit: commit 1fff815a61e85ea84ab45b353a15058320c6ba9f 1340134010 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Set.contains(java.lang.Object)
com.google.common.base.Function.apply(null)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Function.apply(null)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.contains(java.lang.Object)
Também chamam:
java.util.Set.contains(java.lang.Object)
Confiança: 0.4374990265616288
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Maps$AsMapView.createEntrySet() ************************
*Commit: commit 1fff815a61e85ea84ab45b353a15058320c6ba9f 1340134010 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.base.Function.apply(null)
com.google.common.collect.Maps.immutableEntry(com.google.common.collect.Maps$AsMapView$K, com.google.common.collect.Maps$AsMapView$V)
java.util.Iterator.remove()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Iterator.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.6374957947593357
Suporte: 0.0102327
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.9285710047620912
Suporte: 0.00782504
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.Function.apply(null)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.7179490456278818
Suporte: 0.00561798
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Maps.immutableEntry(com.google.common.collect.Maps$AsMapView$K, com.google.common.collect.Maps$AsMapView$V)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.remove()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Maps$AsMapView.get(java.lang.Object) ************************
*Commit: commit 1fff815a61e85ea84ab45b353a15058320c6ba9f 1340134010 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Set.contains(java.lang.Object)
com.google.common.base.Function.apply(null)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Function.apply(null)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.contains(java.lang.Object)
Também chamam:
java.util.Set.contains(java.lang.Object)
Confiança: 0.4374990265616288
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Maps$AsMapView.createEntrySet() ************************
*Commit: commit 1fff815a61e85ea84ab45b353a15058320c6ba9f 1340134010 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.base.Function.apply(null)
com.google.common.collect.Maps.immutableEntry(com.google.common.collect.Maps$AsMapView$K, com.google.common.collect.Maps$AsMapView$V)
java.util.Iterator.remove()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Iterator.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.6374957947593357
Suporte: 0.0102327
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.9285710047620912
Suporte: 0.00782504
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.Function.apply(null)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.7179490456278818
Suporte: 0.00561798
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Maps.immutableEntry(com.google.common.collect.Maps$AsMapView$K, com.google.common.collect.Maps$AsMapView$V)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.remove()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.util.concurrent.RateLimiter.readSafeMicros() ************************
*Commit: commit cb140e39acac7da75a7f28bcf406c9ff9086c7cf 1340141464 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Ticker.read()
java.util.concurrent.TimeUnit.toMicros(J)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.concurrent.TimeUnit.toMicros(J)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
com.google.common.cache.LocalCache$ReferenceEntry.getValueReference()
Confiança: 0.4782600216262132
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
java.util.concurrent.atomic.AtomicReferenceArray.length()
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
com.google.common.base.Equivalence.equivalent(java.lang.Object, java.lang.Object)
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
java.util.concurrent.atomic.AtomicReferenceArray.get(I)
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
com.google.common.cache.LocalCache$ReferenceEntry.getKey()
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.util.concurrent.AbstractService.failureCause() ************************
*Commit: commit 3d812f0b4dd11b055b5b372e4947b1cab21caa7b 1340144529 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.locks.ReentrantLock.lock()
com.google.common.base.Preconditions.checkState(Z, java.lang.String, [Ljava.lang.Object;)
java.util.concurrent.locks.ReentrantLock.unlock()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkState(Z, java.lang.String, [Ljava.lang.Object;)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.locks.ReentrantLock.lock()
Também chamam:
java.util.concurrent.locks.ReentrantLock.unlock()
Confiança: 0.9756099932898307
Suporte: 0.00802568
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.locks.ReentrantLock.unlock()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: addListener ************************
*Commit: commit 3d812f0b4dd11b055b5b372e4947b1cab21caa7b 1340144529 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.Object, java.lang.Object)
com.google.common.base.Preconditions.checkNotNull(java.util.concurrent.Executor, java.lang.Object)
java.util.concurrent.locks.ReentrantLock.lock()
java.util.List.add(com.google.common.util.concurrent.AbstractService$ListenerExecutorPair)
java.util.concurrent.locks.ReentrantLock.unlock()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkNotNull(java.util.concurrent.Executor, java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.locks.ReentrantLock.lock()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.add(com.google.common.util.concurrent.AbstractService$ListenerExecutorPair)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.locks.ReentrantLock.lock()
Também chamam:
java.util.concurrent.locks.ReentrantLock.unlock()
Confiança: 0.9756099932898307
Suporte: 0.00802568
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.locks.ReentrantLock.unlock()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.NavigableMaps$TransformedEntriesNavigableMap.transformEntry(java.util.Map$Entry) ************************
*Commit: commit 179325f2eda54c77305bced834a2d87a9255dc85 1340209776 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.collect.Maps$EntryTransformer.transformEntry(null, null)
com.google.common.collect.Maps.immutableEntry(com.google.common.collect.NavigableMaps$TransformedEntriesNavigableMap$K, com.google.common.collect.NavigableMaps$TransformedEntriesNavigableMap$V2)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Maps$EntryTransformer.transformEntry(null, null)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.0891091942678931
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Maps.immutableEntry(com.google.common.collect.NavigableMaps$TransformedEntriesNavigableMap$K, com.google.common.collect.NavigableMaps$TransformedEntriesNavigableMap$V2)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.NavigableMaps.transformValues(java.util.NavigableMap, com.google.common.base.Function) ************************
*Commit: commit 179325f2eda54c77305bced834a2d87a9255dc85 1340209776 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Function)
com.google.common.base.Function.apply(null)
com.google.common.collect.NavigableMaps.transformEntries(java.util.NavigableMap, com.google.common.collect.Maps$EntryTransformer)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Function.apply(null)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Function)
Também chamam:
com.google.common.base.Function.apply(null)
Confiança: 0.4399996012798915
Suporte: 0.00220706
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.NavigableMaps.transformEntries(java.util.NavigableMap, com.google.common.collect.Maps$EntryTransformer)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode.checkAcquiredLock(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy, com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode) ************************
*Commit: commit 36d07cffd58bc09fe7caff77dd1ea7d3dc64bf45 1340232679 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode.getLockName()
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
java.util.Map.containsKey(java.lang.Object)
java.util.Map.get(java.lang.Object)
com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException.getConflictingStackTrace()
com.google.common.util.concurrent.CycleDetectingLockFactory$Policy.handlePotentialDeadlock(com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException)
com.google.common.collect.Sets.newIdentityHashSet()
com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode.findPathTo(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode, java.util.Set)
java.util.Map.put(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode, com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace)
java.util.Map.put(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode, com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException)
com.google.common.util.concurrent.CycleDetectingLockFactory$Policy.handlePotentialDeadlock(com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.containsKey(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5217378114185539
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.26086890570927695
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.26086890570927695
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: java.util.Map.get(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.containsKey(java.lang.Object)
Também chamam:
java.util.Map.remove(java.lang.Object)
Confiança: 0.1621617616948824
Suporte: 0.00120385
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.util.Map.containsKey(java.lang.Object)
Também chamam:
java.util.Map.get(java.lang.Object)
Confiança: 0.1621617616948824
Suporte: 0.00120385
Posição da Sugestão: 2
**************************
Chamada: com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException.getConflictingStackTrace()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.get(java.lang.Object)
Também chamam:
com.google.common.collect.Count.get()
Confiança: 0.10714222143111428
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: com.google.common.util.concurrent.CycleDetectingLockFactory$Policy.handlePotentialDeadlock(com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Sets.newIdentityHashSet()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode.findPathTo(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode, java.util.Set)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.put(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode, com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.put(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode, com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.util.concurrent.CycleDetectingLockFactory$Policy.handlePotentialDeadlock(com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.util.concurrent.CycleDetectingLockFactory$ExampleStackTrace.ExampleStackTrace(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode, com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode) ************************
*Commit: commit 36d07cffd58bc09fe7caff77dd1ea7d3dc64bf45 1340232679 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode.getLockName()
com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode.getLockName()
java.lang.Throwable.getStackTrace()
java.lang.Class.getName()
java.lang.StackTraceElement.getClassName()
java.lang.String.equals(java.lang.Object)
java.lang.Throwable.setStackTrace([Ljava.lang.StackTraceElement;)
java.lang.StackTraceElement.getClassName()
java.util.Set.contains(java.lang.Object)
java.util.Arrays.copyOfRange([Ljava.lang.StackTraceElement;, I, I)
java.lang.Throwable.setStackTrace([Ljava.lang.StackTraceElement;)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode.getLockName()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Throwable.getStackTrace()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Class.getName()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StackTraceElement.getClassName()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.equals(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Throwable.setStackTrace([Ljava.lang.StackTraceElement;)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StackTraceElement.getClassName()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Set.contains(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Arrays.copyOfRange([Ljava.lang.StackTraceElement;, I, I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.contains(java.lang.Object)
Também chamam:
java.util.Set.contains(java.lang.Object)
Confiança: 0.4374990265616288
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: java.lang.Throwable.setStackTrace([Ljava.lang.StackTraceElement;)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode.findPathTo(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode, java.util.Set) ************************
*Commit: commit 36d07cffd58bc09fe7caff77dd1ea7d3dc64bf45 1340232679 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Set.add(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode)
java.util.Map.get(java.lang.Object)
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode.findPathTo(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode, java.util.Set)
java.util.Map$Entry.getValue()
java.lang.Throwable.getStackTrace()
java.lang.Throwable.setStackTrace([Ljava.lang.StackTraceElement;)
java.lang.Throwable.initCause(java.lang.Throwable)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map.get(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.entrySet()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.get(java.lang.Object)
Também chamam:
com.google.common.collect.Count.get()
Confiança: 0.10714222143111428
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.5999987540027661
Suporte: 0.00963082
Posição da Sugestão: 1
**************************
Chamada: com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode.findPathTo(com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode, java.util.Set)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7659567473791592
Suporte: 0.00722311
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Throwable.getStackTrace()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.24999948083340776
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.19444394450589844
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.16666701277772816
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.12499974041670388
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: java.lang.Throwable.setStackTrace([Ljava.lang.StackTraceElement;)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Throwable.initCause(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException.getMessage() ************************
*Commit: commit 36d07cffd58bc09fe7caff77dd1ea7d3dc64bf45 1340232679 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.Throwable.getCause()
java.lang.StringBuilder.append(java.lang.String)
java.lang.Throwable.getMessage()
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.StringBuilder.append(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Throwable.getMessage()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.8780487508387711
Suporte: 0.00722311
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.0024077
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode.checkAcquiredLocks(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy, java.util.List) ************************
*Commit: commit 36d07cffd58bc09fe7caff77dd1ea7d3dc64bf45 1340232679 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.List.size()
java.util.List.get(I)
com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode.checkAcquiredLock(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy, com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.List.get(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 1
**************************
Chamada: com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode.checkAcquiredLock(com.google.common.util.concurrent.CycleDetectingLockFactory$Policy, com.google.common.util.concurrent.CycleDetectingLockFactory$LockGraphNode)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Maps.asEntryTransformer(com.google.common.base.Function) ************************
*Commit: commit cdc0a08dc8f4b65b1a0597ce7c3cd1b3ef96c969 1340375463 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Function)
com.google.common.base.Function.apply(null)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Function.apply(null)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Function)
Também chamam:
com.google.common.base.Function.apply(null)
Confiança: 0.4399996012798915
Suporte: 0.00220706
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.Maps$TransformedEntriesNavigableMap.transformEntry(java.util.Map$Entry) ************************
*Commit: commit cdc0a08dc8f4b65b1a0597ce7c3cd1b3ef96c969 1340375463 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.collect.Maps$EntryTransformer.transformEntry(null, null)
com.google.common.collect.Maps.immutableEntry(com.google.common.collect.Maps$TransformedEntriesNavigableMap$K, com.google.common.collect.Maps$TransformedEntriesNavigableMap$V2)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Maps$EntryTransformer.transformEntry(null, null)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.0891091942678931
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Maps.immutableEntry(com.google.common.collect.Maps$TransformedEntriesNavigableMap$K, com.google.common.collect.Maps$TransformedEntriesNavigableMap$V2)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Maps.asEntryTransformer(com.google.common.base.Function) ************************
*Commit: commit cdc0a08dc8f4b65b1a0597ce7c3cd1b3ef96c969 1340375463 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Function)
com.google.common.base.Function.apply(null)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Function.apply(null)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Function)
Também chamam:
com.google.common.base.Function.apply(null)
Confiança: 0.4399996012798915
Suporte: 0.00220706
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.util.concurrent.AbstractService$StateSnapshot.StateSnapshot(com.google.common.util.concurrent.Service$State, Z, java.lang.Throwable) ************************
*Commit: commit 7eec09ede5fa6ccdb1cb19558833c6857b037171 1341247071 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2083336794451136
Suporte: 0.00300963
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.testing.google.AbstractMultisetSetCountTester.testSetCountZeroToOneConcurrentWithIteration() ************************
*Commit: commit 84f2f1c4e6ffb73f97705ca6b22feecd178748e5 1343245113 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
iterator
com.google.common.collect.testing.google.AbstractMultisetSetCountTester.assertSetCount(com.google.common.collect.testing.google.AbstractMultisetSetCountTester$E, I)
java.util.Iterator.next()
fail
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.testing.google.AbstractMultisetSetCountTester.assertSetCount(com.google.common.collect.testing.google.AbstractMultisetSetCountTester$E, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
Nenhuma sugestão fornecida.
**************************
Chamada: fail
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.21621642251782006
Suporte: 0.00963082
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.1666668911713532
Suporte: 0.00742376
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.next()
Confiança: 0.12162182185553123
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Confiança: 0.10360374922826514
Suporte: 0.00461477
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.testing.google.AbstractMultisetSetCountTester.testSetCountOneToZeroConcurrentWithEntrySetIteration() ************************
*Commit: commit 84f2f1c4e6ffb73f97705ca6b22feecd178748e5 1343245113 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
getMultiset
entrySet
iterator
com.google.common.collect.testing.google.AbstractMultisetSetCountTester.assertSetCount(com.google.common.collect.testing.google.AbstractMultisetSetCountTester$E, I)
java.util.Iterator.next()
fail
---------------- Chamadas de método adicionadas ---------------
Chamada: entrySet
Nenhuma sugestão fornecida.
**************************
Chamada: iterator
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.testing.google.AbstractMultisetSetCountTester.assertSetCount(com.google.common.collect.testing.google.AbstractMultisetSetCountTester$E, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
Nenhuma sugestão fornecida.
**************************
Chamada: fail
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.21621642251782006
Suporte: 0.00963082
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.1666668911713532
Suporte: 0.00742376
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.next()
Confiança: 0.12162182185553123
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Confiança: 0.10360374922826514
Suporte: 0.00461477
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.testing.google.AbstractMultisetSetCountTester.assertSetCount(com.google.common.collect.testing.google.AbstractMultisetSetCountTester$E, I) ************************
*Commit: commit 84f2f1c4e6ffb73f97705ca6b22feecd178748e5 1343245113 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.testing.google.AbstractMultisetSetCountTester.setCountCheckReturnValue(com.google.common.collect.testing.google.AbstractMultisetSetCountTester$E, I)
getMultiset
count
assertEquals
getMultiset
entrySet
com.google.common.collect.Multiset$Entry.getCount()
getMultiset
size
assertEquals
---------------- Chamadas de método adicionadas ---------------
Chamada: getMultiset
Nenhuma sugestão fornecida.
**************************
Chamada: count
Nenhuma sugestão fornecida.
**************************
Chamada: assertEquals
Nenhuma sugestão fornecida.
**************************
Chamada: getMultiset
Nenhuma sugestão fornecida.
**************************
Chamada: entrySet
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Multiset$Entry.getCount()
Nenhuma sugestão fornecida.
**************************
Chamada: getMultiset
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multiset$Entry.getCount()
Também chamam:
com.google.common.collect.Multiset$Entry.getElement()
Confiança: 0.2058817062283874
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: size
Nenhuma sugestão fornecida.
**************************
Chamada: assertEquals
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.testing.google.AbstractMultisetSetCountTester.testSetCountZeroToOneConcurrentWithEntrySetIteration() ************************
*Commit: commit 84f2f1c4e6ffb73f97705ca6b22feecd178748e5 1343245113 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
getMultiset
entrySet
iterator
com.google.common.collect.testing.google.AbstractMultisetSetCountTester.assertSetCount(com.google.common.collect.testing.google.AbstractMultisetSetCountTester$E, I)
java.util.Iterator.next()
fail
---------------- Chamadas de método adicionadas ---------------
Chamada: entrySet
Nenhuma sugestão fornecida.
**************************
Chamada: iterator
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.testing.google.AbstractMultisetSetCountTester.assertSetCount(com.google.common.collect.testing.google.AbstractMultisetSetCountTester$E, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
Nenhuma sugestão fornecida.
**************************
Chamada: fail
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.21621642251782006
Suporte: 0.00963082
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.1666668911713532
Suporte: 0.00742376
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.next()
Confiança: 0.12162182185553123
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Confiança: 0.10360374922826514
Suporte: 0.00461477
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.testing.google.AbstractMultisetSetCountTester.testSetCountOneToZeroConcurrentWithIteration() ************************
*Commit: commit 84f2f1c4e6ffb73f97705ca6b22feecd178748e5 1343245113 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
iterator
com.google.common.collect.testing.google.AbstractMultisetSetCountTester.assertSetCount(com.google.common.collect.testing.google.AbstractMultisetSetCountTester$E, I)
java.util.Iterator.next()
fail
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.testing.google.AbstractMultisetSetCountTester.assertSetCount(com.google.common.collect.testing.google.AbstractMultisetSetCountTester$E, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
Nenhuma sugestão fornecida.
**************************
Chamada: fail
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.21621642251782006
Suporte: 0.00963082
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.1666668911713532
Suporte: 0.00742376
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.next()
Confiança: 0.12162182185553123
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Confiança: 0.10360374922826514
Suporte: 0.00461477
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.testing.google.MultisetWritesTester.testEntrySet_iterator() ************************
*Commit: commit 84f2f1c4e6ffb73f97705ca6b22feecd178748e5 1343245113 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
getMultiset
entrySet
iterator
java.util.Iterator.hasNext()
assertTrue
com.google.common.collect.Multisets.immutableEntry(java.lang.Object, I)
java.util.Iterator.next()
assertEquals
java.util.Iterator.hasNext()
assertFalse
java.util.Iterator.remove()
getMultiset
isEmpty
assertTrue
---------------- Chamadas de método adicionadas ---------------
Chamada: entrySet
Nenhuma sugestão fornecida.
**************************
Chamada: iterator
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: assertTrue
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7087362667937666
Suporte: 0.0292937
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Multisets.immutableEntry(java.lang.Object, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
Nenhuma sugestão fornecida.
**************************
Chamada: assertEquals
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.43835705288167764
Suporte: 0.0128411
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: assertFalse
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.8571426028572547
Suporte: 0.00481541
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Iterator.next()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.818181612231629
Suporte: 0.00361156
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7777774701237138
Suporte: 0.00280899
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7087362667937666
Suporte: 0.0292937
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.3106795411820779
Suporte: 0.0128411
Posição da Sugestão: 5
**************************
Chamada: java.util.Iterator.remove()
Nenhuma sugestão fornecida.
**************************
Chamada: getMultiset
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.remove()
Também chamam:
com.google.common.collect.AbstractBiMap.removeFromInverseMap(com.google.common.collect.AbstractBiMap$V)
Confiança: 0.06060583177268975
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: isEmpty
Nenhuma sugestão fornecida.
**************************
Chamada: assertTrue
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.testing.google.MultisetWritesTester.testEntrySet_iterator_remove_unsupported() ************************
*Commit: commit 84f2f1c4e6ffb73f97705ca6b22feecd178748e5 1343245113 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
getMultiset
entrySet
iterator
java.util.Iterator.hasNext()
assertTrue
java.util.Iterator.remove()
fail
---------------- Chamadas de método adicionadas ---------------
Chamada: entrySet
Nenhuma sugestão fornecida.
**************************
Chamada: iterator
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: assertTrue
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7087362667937666
Suporte: 0.0292937
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.3106795411820779
Suporte: 0.0128411
Posição da Sugestão: 2
**************************
Chamada: java.util.Iterator.remove()
Nenhuma sugestão fornecida.
**************************
Chamada: fail
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.remove()
Também chamam:
com.google.common.collect.AbstractBiMap.removeFromInverseMap(com.google.common.collect.AbstractBiMap$V)
Confiança: 0.06060583177268975
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.testing.Helpers.testCompareToAndEquals(java.util.List) ************************
*Commit: commit 84f2f1c4e6ffb73f97705ca6b22feecd178748e5 1343245113 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.List.size()
java.util.List.get(I)
java.util.List.get(I)
java.lang.Comparable.compareTo(null)
junit.framework.Assert.assertTrue(java.lang.String, Z)
java.lang.Object.equals(java.lang.Object)
junit.framework.Assert.assertFalse(Z)
java.lang.Comparable.compareTo(null)
junit.framework.Assert.assertEquals(java.lang.String, I, I)
java.lang.Object.equals(java.lang.Object)
junit.framework.Assert.assertTrue(Z)
java.util.List.size()
java.util.List.get(I)
java.lang.Comparable.compareTo(null)
junit.framework.Assert.assertTrue(java.lang.String, Z)
java.lang.Object.equals(java.lang.Object)
junit.framework.Assert.assertFalse(Z)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.List.get(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 1
**************************
Chamada: java.util.List.get(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: java.lang.Comparable.compareTo(null)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: junit.framework.Assert.assertTrue(java.lang.String, Z)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Object.equals(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: junit.framework.Assert.assertFalse(Z)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.equals(java.lang.Object)
Também chamam:
java.lang.Object.equals(java.lang.Object)
Confiança: 0.11999980063994577
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: java.lang.Comparable.compareTo(null)
Nenhuma sugestão fornecida.
**************************
Chamada: junit.framework.Assert.assertEquals(java.lang.String, I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Object.equals(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: junit.framework.Assert.assertTrue(Z)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.equals(java.lang.Object)
Também chamam:
java.lang.Object.equals(java.lang.Object)
Confiança: 0.11999980063994577
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: java.lang.Comparable.compareTo(null)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: junit.framework.Assert.assertTrue(java.lang.String, Z)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Object.equals(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: junit.framework.Assert.assertFalse(Z)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.equals(java.lang.Object)
Também chamam:
java.lang.Object.equals(java.lang.Object)
Confiança: 0.11999980063994577
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.testing.Helpers.get(java.util.Iterator, I) ************************
*Commit: commit 84f2f1c4e6ffb73f97705ca6b22feecd178748e5 1343245113 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Iterator.next()
java.util.Iterator.next()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.21621642251782006
Suporte: 0.00963082
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.1666668911713532
Suporte: 0.00742376
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.next()
Confiança: 0.12162182185553123
Suporte: 0.00541734
Posição da Sugestão: 4
**************************
************************ Método Avaliado: com.google.common.collect.testing.Helpers.mapEntry(com.google.common.collect.testing.Helpers$(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map$Entry;$K, com.google.common.collect.testing.Helpers$(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map$Entry;$V) ************************
*Commit: commit 84f2f1c4e6ffb73f97705ca6b22feecd178748e5 1343245113 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Collections.singletonMap(com.google.common.collect.testing.Helpers$(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map$Entry;$K, com.google.common.collect.testing.Helpers$(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map$Entry;$V)
java.util.Map.entrySet()
java.util.Set.iterator()
java.util.Iterator.next()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map.entrySet()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Set.iterator()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.5999987540027661
Suporte: 0.00963082
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.5874989097524204
Suporte: 0.00943018
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Confiança: 0.44999875400276607
Suporte: 0.00722311
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Set.iterator()
Confiança: 0.3249990655020746
Suporte: 0.00521669
Posição da Sugestão: 4
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7307698943199614
Suporte: 0.0038122
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.testing.Helpers.cycle(java.lang.Iterable) ************************
*Commit: commit 84f2f1c4e6ffb73f97705ca6b22feecd178748e5 1343245113 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Collections.emptySet()
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.lang.Iterable.iterator()
java.util.Iterator.next()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Set.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.6374957947593357
Suporte: 0.0102327
Posição da Sugestão: 1
**************************
Chamada: java.lang.Iterable.iterator()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.9285710047620912
Suporte: 0.00782504
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Iterable.iterator()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.29729786159286076
Suporte: 0.00441413
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.lang.Iterable.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.25675702980299714
Suporte: 0.0038122
Posição da Sugestão: 2
**************************
************************ Método Avaliado: com.google.common.collect.testing.Helpers.reverse(java.util.List) ************************
*Commit: commit 84f2f1c4e6ffb73f97705ca6b22feecd178748e5 1343245113 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.List.size()
java.util.List.listIterator(I)
java.util.ListIterator.hasPrevious()
java.util.ListIterator.previous()
java.util.ListIterator.remove()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.List.listIterator(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.iterator()
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
java.util.List.get(I)
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
java.util.List.get(I)
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: java.util.ListIterator.hasPrevious()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.ListIterator.previous()
** Sugestões fornecidas **
Usuários que chamam:
java.util.ListIterator.hasPrevious()
Também chamam:
java.util.ListIterator.nextIndex()
Confiança: 0.5
Suporte: 0.00120385
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.util.ListIterator.hasPrevious()
Também chamam:
java.util.ListIterator.previous()
Confiança: 0.5
Suporte: 0.00120385
Posição da Sugestão: 2
**************************
Chamada: java.util.ListIterator.remove()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.testing.Helpers.nefariousMapEntry(com.google.common.collect.testing.Helpers$(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map$Entry;$K, com.google.common.collect.testing.Helpers$(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map$Entry;$V) ************************
*Commit: commit 84f2f1c4e6ffb73f97705ca6b22feecd178748e5 1343245113 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map$Entry.setValue(com.google.common.collect.testing.Helpers$(Ljava/lang/Object;Ljava/lang/Object;)Ljava/util/Map$Entry;$V)
null.getKey()
java.util.Map$Entry.getKey()
com.google.common.collect.testing.Helpers.equal(java.lang.Object, java.lang.Object)
null.getValue()
java.util.Map$Entry.getValue()
com.google.common.collect.testing.Helpers.equal(java.lang.Object, java.lang.Object)
null.getKey()
null.getValue()
java.lang.Object.hashCode()
java.lang.Object.hashCode()
null.getKey()
null.getValue()
---------------- Chamadas de método adicionadas ---------------
Chamada: null.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.testing.Helpers.equal(java.lang.Object, java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 1
**************************
Chamada: null.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.testing.Helpers.equal(java.lang.Object, java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.0891091942678931
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Chamada: null.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: null.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Object.hashCode()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Object.hashCode()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.hashCode()
Também chamam:
java.lang.Object.hashCode()
Confiança: 0.21428579904758174
Suporte: 0.00180578
Posição da Sugestão: 1
**************************
Chamada: null.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.hashCode()
Também chamam:
java.lang.Object.hashCode()
Confiança: 0.21428579904758174
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Chamada: null.getValue()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.testing.Helpers.entryComparator(java.util.Comparator) ************************
*Commit: commit 84f2f1c4e6ffb73f97705ca6b22feecd178748e5 1343245113 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map$Entry.getKey()
java.util.Map$Entry.getKey()
java.util.Comparator.compare(null, null)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.0848486221489221
Suporte: 0.00280899
Posição da Sugestão: 2
**************************
Chamada: java.util.Comparator.compare(null, null)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7142852057145095
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.0848486221489221
Suporte: 0.00280899
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.07272721780709783
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.06060611552623551
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.testing.Helpers.testComparator(java.util.Comparator, java.util.List) ************************
*Commit: commit 84f2f1c4e6ffb73f97705ca6b22feecd178748e5 1343245113 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.List.size()
java.util.List.get(I)
java.util.List.get(I)
java.util.Comparator.compare(null, null)
junit.framework.Assert.assertTrue(java.lang.String, Z)
java.util.Comparator.compare(null, null)
junit.framework.Assert.assertEquals(java.lang.String, I, I)
java.util.List.size()
java.util.List.get(I)
java.util.Comparator.compare(null, null)
junit.framework.Assert.assertTrue(java.lang.String, Z)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.List.get(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 1
**************************
Chamada: java.util.List.get(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: java.util.Comparator.compare(null, null)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: junit.framework.Assert.assertTrue(java.lang.String, Z)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Comparator.compare(null, null)
Nenhuma sugestão fornecida.
**************************
Chamada: junit.framework.Assert.assertEquals(java.lang.String, I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: java.util.Comparator.compare(null, null)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: junit.framework.Assert.assertTrue(java.lang.String, Z)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.testing.testers.CollectionAddAllTester.testAddAllConcurrentWithIteration() ************************
*Commit: commit 84f2f1c4e6ffb73f97705ca6b22feecd178748e5 1343245113 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
iterator
of
addAll
assertTrue
java.util.Iterator.next()
fail
---------------- Chamadas de método adicionadas ---------------
Chamada: of
Nenhuma sugestão fornecida.
**************************
Chamada: addAll
Nenhuma sugestão fornecida.
**************************
Chamada: assertTrue
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
Nenhuma sugestão fornecida.
**************************
Chamada: fail
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.21621642251782006
Suporte: 0.00963082
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.1666668911713532
Suporte: 0.00742376
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.next()
Confiança: 0.12162182185553123
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Confiança: 0.10360374922826514
Suporte: 0.00461477
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.testing.testers.CollectionAddTester.testAddConcurrentWithIteration() ************************
*Commit: commit 84f2f1c4e6ffb73f97705ca6b22feecd178748e5 1343245113 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
iterator
add
assertTrue
java.util.Iterator.next()
fail
---------------- Chamadas de método adicionadas ---------------
Chamada: add
Nenhuma sugestão fornecida.
**************************
Chamada: assertTrue
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
Nenhuma sugestão fornecida.
**************************
Chamada: fail
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.21621642251782006
Suporte: 0.00963082
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.1666668911713532
Suporte: 0.00742376
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.next()
Confiança: 0.12162182185553123
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Confiança: 0.10360374922826514
Suporte: 0.00461477
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.testing.testers.CollectionIteratorTester.testIteratorNoSuchElementException() ************************
*Commit: commit 84f2f1c4e6ffb73f97705ca6b22feecd178748e5 1343245113 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
iterator
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Iterator.next()
fail
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7087362667937666
Suporte: 0.0292937
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.43835705288167764
Suporte: 0.0128411
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.2260277807173556
Suporte: 0.00662119
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.21621642251782006
Suporte: 0.00963082
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.1666668911713532
Suporte: 0.00742376
Posição da Sugestão: 0
**************************
Chamada: fail
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.43835705288167764
Suporte: 0.0128411
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.2260277807173556
Suporte: 0.00662119
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.2222216069140944
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.21621642251782006
Suporte: 0.00963082
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.testing.testers.CollectionToArrayTester.testToArray_oversizedArray_ordered() ************************
*Commit: commit 84f2f1c4e6ffb73f97705ca6b22feecd178748e5 1343245113 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
getSubjectGenerator
getNumElements
createArray
getNumElements
getNumElements
toArray
assertSame
getOrderedElements
getNumElements
java.util.List.get(I)
assertEquals
getNumElements
assertNull
---------------- Chamadas de método adicionadas ---------------
Chamada: getNumElements
Nenhuma sugestão fornecida.
**************************
Chamada: createArray
Nenhuma sugestão fornecida.
**************************
Chamada: getNumElements
Nenhuma sugestão fornecida.
**************************
Chamada: getNumElements
Nenhuma sugestão fornecida.
**************************
Chamada: toArray
Nenhuma sugestão fornecida.
**************************
Chamada: assertSame
Nenhuma sugestão fornecida.
**************************
Chamada: getOrderedElements
Nenhuma sugestão fornecida.
**************************
Chamada: getNumElements
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: assertEquals
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: getNumElements
Nenhuma sugestão fornecida.
**************************
Chamada: assertNull
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.testing.testers.ListAddAtIndexTester.testAddAtIndexConcurrentWithIteration() ************************
*Commit: commit 84f2f1c4e6ffb73f97705ca6b22feecd178748e5 1343245113 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
iterator
getList
add
java.util.Iterator.next()
fail
---------------- Chamadas de método adicionadas ---------------
Chamada: getList
Nenhuma sugestão fornecida.
**************************
Chamada: add
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
Nenhuma sugestão fornecida.
**************************
Chamada: fail
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.21621642251782006
Suporte: 0.00963082
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.1666668911713532
Suporte: 0.00742376
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.next()
Confiança: 0.12162182185553123
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Confiança: 0.10360374922826514
Suporte: 0.00461477
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.testing.testers.ListHashCodeTester.testHashCode() ************************
*Commit: commit 84f2f1c4e6ffb73f97705ca6b22feecd178748e5 1343245113 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
getSampleElements
java.lang.Object.hashCode()
getList
hashCode
assertEquals
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.Object.hashCode()
Nenhuma sugestão fornecida.
**************************
Chamada: getList
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.hashCode()
Também chamam:
java.lang.Object.hashCode()
Confiança: 0.21428579904758174
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Chamada: hashCode
Nenhuma sugestão fornecida.
**************************
Chamada: assertEquals
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.testing.testers.ListSubListTester.testSubList_isEmpty() ************************
*Commit: commit 84f2f1c4e6ffb73f97705ca6b22feecd178748e5 1343245113 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
getList
getNumElements
java.util.List.subList(I, I)
java.util.List.subList(I, I)
java.util.List.subList(I, I)
java.util.List.subList(I, I)
java.util.List.subList(I, I)
java.util.Arrays.asList([Ljava.util.List;)
java.util.List.isEmpty()
java.util.List.size()
assertEquals
---------------- Chamadas de método adicionadas ---------------
Chamada: getNumElements
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.subList(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.subList(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.subList(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.subList(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.subList(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Arrays.asList([Ljava.util.List;)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.isEmpty()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: assertEquals
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.iterator()
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
java.util.List.get(I)
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
java.util.List.get(I)
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.testing.testers.ListSubListTester.testSubList_size() ************************
*Commit: commit 84f2f1c4e6ffb73f97705ca6b22feecd178748e5 1343245113 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
getList
getNumElements
java.util.List.subList(I, I)
java.util.List.size()
assertEquals
java.util.List.subList(I, I)
java.util.List.size()
assertEquals
java.util.List.subList(I, I)
java.util.List.size()
assertEquals
java.util.List.subList(I, I)
java.util.List.size()
assertEquals
java.util.List.subList(I, I)
java.util.List.size()
assertEquals
---------------- Chamadas de método adicionadas ---------------
Chamada: getNumElements
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.subList(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: assertEquals
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 2
**************************
Chamada: java.util.List.subList(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: assertEquals
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 3
**************************
Chamada: java.util.List.subList(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: assertEquals
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 3
**************************
Chamada: java.util.List.subList(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: assertEquals
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 3
**************************
Chamada: java.util.List.subList(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: assertEquals
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.iterator()
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
java.util.List.get(I)
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.testing.testers.ListSubListTester.testSubList_get() ************************
*Commit: commit 84f2f1c4e6ffb73f97705ca6b22feecd178748e5 1343245113 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
getList
getNumElements
java.util.List.subList(I, I)
java.util.List.subList(I, I)
java.util.List.subList(I, I)
java.util.List.get(I)
java.util.List.get(I)
assertEquals
java.util.List.get(I)
java.util.List.get(I)
assertEquals
java.util.List.get(I)
java.util.List.get(I)
assertEquals
java.util.List.get(I)
java.util.List.get(I)
assertEquals
java.util.List.get(I)
java.util.List.get(I)
assertEquals
java.util.List.get(I)
java.util.List.get(I)
assertEquals
java.util.Arrays.asList([Ljava.util.List;)
java.util.List.size()
java.util.Arrays.asList([Ljava.lang.Integer;)
java.util.List.get(I)
fail
---------------- Chamadas de método adicionadas ---------------
Chamada: getNumElements
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.subList(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.subList(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.subList(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: assertEquals
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: assertEquals
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: assertEquals
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: assertEquals
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: assertEquals
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: assertEquals
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: java.util.Arrays.asList([Ljava.util.List;)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Arrays.asList([Ljava.lang.Integer;)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 1
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: fail
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.testing.testers.ListSubListTester.testSubList_indexOf() ************************
*Commit: commit 84f2f1c4e6ffb73f97705ca6b22feecd178748e5 1343245113 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
getList
getNumElements
java.util.List.subList(I, I)
java.util.List.subList(I, I)
java.util.List.subList(I, I)
java.util.List.get(I)
java.util.List.indexOf(java.lang.Object)
assertEquals
java.util.List.get(I)
java.util.List.indexOf(java.lang.Object)
assertEquals
java.util.List.get(I)
java.util.List.indexOf(java.lang.Object)
assertEquals
java.util.List.get(I)
java.util.List.indexOf(java.lang.Object)
assertEquals
java.util.List.get(I)
java.util.List.indexOf(java.lang.Object)
assertEquals
java.util.List.get(I)
java.util.List.indexOf(java.lang.Object)
assertEquals
java.util.List.get(I)
java.util.List.indexOf(java.lang.Object)
assertEquals
java.util.List.get(I)
java.util.List.indexOf(java.lang.Object)
assertEquals
---------------- Chamadas de método adicionadas ---------------
Chamada: getNumElements
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.subList(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.subList(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.subList(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.indexOf(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: assertEquals
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.indexOf(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: assertEquals
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.indexOf(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: assertEquals
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.indexOf(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: assertEquals
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.indexOf(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: assertEquals
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.indexOf(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: assertEquals
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.indexOf(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: assertEquals
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.indexOf(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: assertEquals
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.testing.testers.ListSubListTester.testSubList_contains() ************************
*Commit: commit 84f2f1c4e6ffb73f97705ca6b22feecd178748e5 1343245113 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
getList
getNumElements
java.util.List.subList(I, I)
java.util.List.subList(I, I)
java.util.List.subList(I, I)
java.util.List.get(I)
java.util.List.contains(java.lang.Object)
assertTrue
java.util.List.get(I)
java.util.List.contains(java.lang.Object)
assertTrue
java.util.List.get(I)
java.util.List.contains(java.lang.Object)
assertTrue
java.util.List.get(I)
java.util.List.contains(java.lang.Object)
assertTrue
java.util.List.get(I)
java.util.List.contains(java.lang.Object)
assertTrue
java.util.List.get(I)
java.util.List.contains(java.lang.Object)
assertTrue
java.util.List.get(I)
java.util.List.contains(java.lang.Object)
assertFalse
java.util.List.get(I)
java.util.List.contains(java.lang.Object)
assertFalse
---------------- Chamadas de método adicionadas ---------------
Chamada: getNumElements
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.subList(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.subList(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.subList(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.contains(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: assertTrue
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.contains(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: assertTrue
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.contains(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: assertTrue
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.contains(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: assertTrue
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.contains(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: assertTrue
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.contains(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: assertTrue
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.contains(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: assertFalse
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.contains(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: assertFalse
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.testing.testers.ListSubListTester.testSubList_lastIndexOf() ************************
*Commit: commit 84f2f1c4e6ffb73f97705ca6b22feecd178748e5 1343245113 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
getList
java.util.List.size()
java.util.List.subList(I, I)
java.util.List.subList(I, I)
java.util.List.subList(I, I)
java.util.List.get(I)
java.util.List.lastIndexOf(java.lang.Object)
assertEquals
java.util.List.get(I)
java.util.List.lastIndexOf(java.lang.Object)
assertEquals
java.util.List.get(I)
java.util.List.lastIndexOf(java.lang.Object)
assertEquals
java.util.List.get(I)
java.util.List.lastIndexOf(java.lang.Object)
assertEquals
java.util.List.get(I)
java.util.List.lastIndexOf(java.lang.Object)
assertEquals
java.util.List.get(I)
java.util.List.lastIndexOf(java.lang.Object)
assertEquals
java.util.List.get(I)
java.util.List.lastIndexOf(java.lang.Object)
assertEquals
java.util.List.get(I)
java.util.List.lastIndexOf(java.lang.Object)
assertEquals
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.subList(I, I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 1
**************************
Chamada: java.util.List.subList(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.subList(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.lastIndexOf(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: assertEquals
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.lastIndexOf(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: assertEquals
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.lastIndexOf(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: assertEquals
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.lastIndexOf(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: assertEquals
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.lastIndexOf(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: assertEquals
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.lastIndexOf(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: assertEquals
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.lastIndexOf(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: assertEquals
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.lastIndexOf(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: assertEquals
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.testing.testers.SetHashCodeTester.testHashCode_containingNull() ************************
*Commit: commit 84f2f1c4e6ffb73f97705ca6b22feecd178748e5 1343245113 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
getNumElements
getSampleElements
java.lang.Object.hashCode()
java.util.Collection.add(com.google.common.collect.testing.testers.SetHashCodeTester$E)
getSubjectGenerator
java.util.Collection.toArray()
create
getSet
hashCode
assertEquals
---------------- Chamadas de método adicionadas ---------------
Chamada: getSampleElements
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Object.hashCode()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.add(com.google.common.collect.testing.testers.SetHashCodeTester$E)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.hashCode()
Também chamam:
java.lang.Object.hashCode()
Confiança: 0.21428579904758174
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Chamada: getSubjectGenerator
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.toArray()
Nenhuma sugestão fornecida.
**************************
Chamada: create
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.toArray()
Também chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.Object)
Confiança: 0.6153852052063564
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Chamada: getSet
Nenhuma sugestão fornecida.
**************************
Chamada: hashCode
Nenhuma sugestão fornecida.
**************************
Chamada: assertEquals
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.testing.testers.SetHashCodeTester.testHashCode() ************************
*Commit: commit 84f2f1c4e6ffb73f97705ca6b22feecd178748e5 1343245113 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
getSampleElements
java.lang.Object.hashCode()
getSet
hashCode
assertEquals
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.Object.hashCode()
Nenhuma sugestão fornecida.
**************************
Chamada: getSet
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.hashCode()
Também chamam:
java.lang.Object.hashCode()
Confiança: 0.21428579904758174
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Chamada: hashCode
Nenhuma sugestão fornecida.
**************************
Chamada: assertEquals
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Maps.toMap(java.lang.Iterable, com.google.common.base.Function) ************************
*Commit: commit 525b9e540acdef1dbccc7f51aa16a6592e57d5e0 1343330473 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Function)
com.google.common.collect.Maps.newLinkedHashMap()
com.google.common.base.Function.apply(null)
java.util.Map.put(com.google.common.collect.Maps$(Ljava/lang/Iterable;Lcom/google/common/base/Function;)Lcom/google/common/collect/ImmutableMap;$K, com.google.common.collect.Maps$(Ljava/lang/Iterable;Lcom/google/common/base/Function;)Lcom/google/common/collect/ImmutableMap;$V)
com.google.common.collect.ImmutableMap.copyOf(java.util.Map)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Maps.newLinkedHashMap()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Function)
Também chamam:
com.google.common.base.Function.apply(null)
Confiança: 0.4399996012798915
Suporte: 0.00220706
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.Function.apply(null)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.put(com.google.common.collect.Maps$(Ljava/lang/Iterable;Lcom/google/common/base/Function;)Lcom/google/common/collect/ImmutableMap;$K, com.google.common.collect.Maps$(Ljava/lang/Iterable;Lcom/google/common/base/Function;)Lcom/google/common/collect/ImmutableMap;$V)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableMap.copyOf(java.util.Map)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Maps.toMap(java.lang.Iterable, com.google.common.base.Function) ************************
*Commit: commit 525b9e540acdef1dbccc7f51aa16a6592e57d5e0 1343330473 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Function)
com.google.common.collect.Maps.newLinkedHashMap()
com.google.common.base.Function.apply(null)
java.util.Map.put(com.google.common.collect.Maps$(Ljava/lang/Iterable;Lcom/google/common/base/Function;)Lcom/google/common/collect/ImmutableMap;$K, com.google.common.collect.Maps$(Ljava/lang/Iterable;Lcom/google/common/base/Function;)Lcom/google/common/collect/ImmutableMap;$V)
com.google.common.collect.ImmutableMap.copyOf(java.util.Map)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Maps.newLinkedHashMap()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Function)
Também chamam:
com.google.common.base.Function.apply(null)
Confiança: 0.4399996012798915
Suporte: 0.00220706
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.Function.apply(null)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.put(com.google.common.collect.Maps$(Ljava/lang/Iterable;Lcom/google/common/base/Function;)Lcom/google/common/collect/ImmutableMap;$K, com.google.common.collect.Maps$(Ljava/lang/Iterable;Lcom/google/common/base/Function;)Lcom/google/common/collect/ImmutableMap;$V)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableMap.copyOf(java.util.Map)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.cache.CacheBuilder.removalListener(com.google.common.cache.RemovalListener) ************************
*Commit: commit dfc51048f5493eb483f323bb427eef3d76e4685f 1343418286 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkState(Z)
com.google.common.base.Preconditions.checkNotNull(com.google.common.cache.RemovalListener)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkNotNull(com.google.common.cache.RemovalListener)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.cache.CacheBuilder.checkWeightWithWeigher() ************************
*Commit: commit dfc51048f5493eb483f323bb427eef3d76e4685f 1343418286 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
java.util.logging.Logger.log(java.util.logging.Level, java.lang.String)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5217378114185539
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.26086890570927695
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.26086890570927695
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: java.util.logging.Logger.log(java.util.logging.Level, java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5217378114185539
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.26086890570927695
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.26086890570927695
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.cache.CacheBuilder.expireAfterAccess(J, java.util.concurrent.TimeUnit) ************************
*Commit: commit dfc51048f5493eb483f323bb427eef3d76e4685f 1343418286 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkState(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
java.util.concurrent.TimeUnit.toNanos(J)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.TimeUnit.toNanos(J)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2083336794451136
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.cache.CacheBuilder.ticker(com.google.common.base.Ticker) ************************
*Commit: commit dfc51048f5493eb483f323bb427eef3d76e4685f 1343418286 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkState(Z)
com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Ticker)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Ticker)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.cache.CacheBuilder.maximumSize(J) ************************
*Commit: commit dfc51048f5493eb483f323bb427eef3d76e4685f 1343418286 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkState(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.base.Preconditions.checkState(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkState(Z, java.lang.String, [Ljava.lang.Object;)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5217378114185539
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.26086890570927695
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.26086890570927695
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.cache.LocalCache.containsValue(java.lang.Object) ************************
*Commit: commit dfc51048f5493eb483f323bb427eef3d76e4685f 1343418286 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.HashMap.entrySet()
java.util.Map$Entry.getValue()
com.google.common.cache.LocalCache$Timestamped.equals(java.lang.Object)
java.util.Map$Entry.getKey()
com.google.common.cache.LocalCache.getIfPresent(java.lang.Object)
java.lang.Object.equals(java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.cache.LocalCache$Timestamped.equals(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 2
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.cache.LocalCache.getIfPresent(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.0848486221489221
Suporte: 0.00280899
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.07272721780709783
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.06060611552623551
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Confiança: 0.06060611552623551
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Chamada: java.lang.Object.equals(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.cache.LocalCache.remove(java.lang.Object, java.lang.Object) ************************
*Commit: commit dfc51048f5493eb483f323bb427eef3d76e4685f 1343418286 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.cache.LocalCache.get(java.lang.Object)
java.lang.Object.equals(java.lang.Object)
com.google.common.cache.LocalCache.alertListenerIfPresent(java.lang.Object, java.lang.Object, com.google.common.cache.RemovalCause)
com.google.common.cache.LocalCache.remove(java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.Object.equals(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.cache.LocalCache.alertListenerIfPresent(java.lang.Object, java.lang.Object, com.google.common.cache.RemovalCause)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.equals(java.lang.Object)
Também chamam:
java.lang.Object.equals(java.lang.Object)
Confiança: 0.11999980063994577
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: com.google.common.cache.LocalCache.remove(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.cache.LocalCache$CapacityEnforcingLinkedHashMap.removeEldestEntry(java.util.Map$Entry) ************************
*Commit: commit dfc51048f5493eb483f323bb427eef3d76e4685f 1343418286 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.HashMap.size()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.cache.LocalCache$Timestamped.getValue()
com.google.common.cache.RemovalListener.onRemoval(com.google.common.cache.RemovalNotification)
com.google.common.cache.AbstractCache$StatsCounter.recordEviction()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 1
**************************
Chamada: com.google.common.cache.LocalCache$Timestamped.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.0891091942678931
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Chamada: com.google.common.cache.RemovalListener.onRemoval(com.google.common.cache.RemovalNotification)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.cache.AbstractCache$StatsCounter.recordEviction()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.cache.LocalCache.putAll(java.util.Map) ************************
*Commit: commit dfc51048f5493eb483f323bb427eef3d76e4685f 1343418286 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.cache.LocalCache.put(com.google.common.cache.LocalCache$K, com.google.common.cache.LocalCache$V)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.5999987540027661
Suporte: 0.00963082
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7659567473791592
Suporte: 0.00722311
Posição da Sugestão: 1
**************************
Chamada: com.google.common.cache.LocalCache.put(com.google.common.cache.LocalCache$K, com.google.common.cache.LocalCache$V)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.24999948083340776
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.19444394450589844
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.16666701277772816
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.12499974041670388
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.cache.LocalCache.load(java.lang.Object) ************************
*Commit: commit dfc51048f5493eb483f323bb427eef3d76e4685f 1343418286 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Ticker.read()
com.google.common.cache.CacheLoader.load(null)
com.google.common.cache.LocalCache.put(com.google.common.cache.LocalCache$K, com.google.common.cache.LocalCache$V)
com.google.common.base.Ticker.read()
com.google.common.cache.AbstractCache$StatsCounter.recordLoadException(J)
com.google.common.base.Ticker.read()
com.google.common.cache.AbstractCache$StatsCounter.recordLoadException(J)
com.google.common.base.Ticker.read()
com.google.common.cache.AbstractCache$StatsCounter.recordLoadException(J)
com.google.common.base.Ticker.read()
com.google.common.cache.AbstractCache$StatsCounter.recordLoadSuccess(J)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.cache.CacheLoader.load(null)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
com.google.common.cache.LocalCache$ReferenceEntry.getValueReference()
Confiança: 0.4782600216262132
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
java.util.concurrent.atomic.AtomicReferenceArray.length()
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
com.google.common.base.Equivalence.equivalent(java.lang.Object, java.lang.Object)
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
java.util.concurrent.atomic.AtomicReferenceArray.get(I)
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
com.google.common.cache.LocalCache$ReferenceEntry.getKey()
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Chamada: com.google.common.cache.LocalCache.put(com.google.common.cache.LocalCache$K, com.google.common.cache.LocalCache$V)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Ticker.read()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.cache.AbstractCache$StatsCounter.recordLoadException(J)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
com.google.common.cache.LocalCache$ReferenceEntry.getValueReference()
Confiança: 0.4782600216262132
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
java.util.concurrent.atomic.AtomicReferenceArray.length()
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
com.google.common.base.Equivalence.equivalent(java.lang.Object, java.lang.Object)
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
java.util.concurrent.atomic.AtomicReferenceArray.get(I)
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
com.google.common.cache.LocalCache$ReferenceEntry.getKey()
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Chamada: com.google.common.base.Ticker.read()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.cache.AbstractCache$StatsCounter.recordLoadException(J)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
com.google.common.cache.LocalCache$ReferenceEntry.getValueReference()
Confiança: 0.4782600216262132
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
java.util.concurrent.atomic.AtomicReferenceArray.length()
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
com.google.common.base.Equivalence.equivalent(java.lang.Object, java.lang.Object)
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
java.util.concurrent.atomic.AtomicReferenceArray.get(I)
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
com.google.common.cache.LocalCache$ReferenceEntry.getKey()
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Chamada: com.google.common.base.Ticker.read()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.cache.AbstractCache$StatsCounter.recordLoadException(J)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
com.google.common.cache.LocalCache$ReferenceEntry.getValueReference()
Confiança: 0.4782600216262132
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
java.util.concurrent.atomic.AtomicReferenceArray.length()
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
com.google.common.base.Equivalence.equivalent(java.lang.Object, java.lang.Object)
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
java.util.concurrent.atomic.AtomicReferenceArray.get(I)
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
com.google.common.cache.LocalCache$ReferenceEntry.getKey()
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Chamada: com.google.common.base.Ticker.read()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.cache.AbstractCache$StatsCounter.recordLoadSuccess(J)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
com.google.common.cache.LocalCache$ReferenceEntry.getValueReference()
Confiança: 0.4782600216262132
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
java.util.concurrent.atomic.AtomicReferenceArray.length()
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
com.google.common.base.Equivalence.equivalent(java.lang.Object, java.lang.Object)
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
java.util.concurrent.atomic.AtomicReferenceArray.get(I)
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
com.google.common.cache.LocalCache$ReferenceEntry.getKey()
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.cache.LocalCache.clear() ************************
*Commit: commit dfc51048f5493eb483f323bb427eef3d76e4685f 1343418286 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.HashMap.entrySet()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.cache.LocalCache$Timestamped.getValue()
com.google.common.cache.LocalCache.alertListenerIfPresent(java.lang.Object, java.lang.Object, com.google.common.cache.RemovalCause)
java.util.LinkedHashMap.clear()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 1
**************************
Chamada: com.google.common.cache.LocalCache$Timestamped.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.0891091942678931
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Chamada: com.google.common.cache.LocalCache.alertListenerIfPresent(java.lang.Object, java.lang.Object, com.google.common.cache.RemovalCause)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.LinkedHashMap.clear()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.cache.LocalCache.put(com.google.common.cache.LocalCache$K, com.google.common.cache.LocalCache$V) ************************
*Commit: commit dfc51048f5493eb483f323bb427eef3d76e4685f 1343418286 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.cache.LocalCache$K)
com.google.common.base.Preconditions.checkNotNull(com.google.common.cache.LocalCache$V)
java.util.HashMap.put(com.google.common.cache.LocalCache$K, com.google.common.cache.LocalCache$Timestamped)
com.google.common.cache.LocalCache$Timestamped.getValue()
com.google.common.cache.LocalCache.alertListenerIfPresent(java.lang.Object, java.lang.Object, com.google.common.cache.RemovalCause)
com.google.common.cache.LocalCache$Timestamped.getValue()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkNotNull(com.google.common.cache.LocalCache$V)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.cache.LocalCache$K)
Também chamam:
com.google.common.cache.LocalCache.hash(java.lang.Object)
Confiança: 1.0
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.cache.LocalCache$K)
Também chamam:
com.google.common.cache.LocalCache.segmentFor(I)
Confiança: 1.0
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.cache.LocalCache$K)
Também chamam:
com.google.common.cache.LocalCache.hash(java.lang.Object)
com.google.common.cache.LocalCache.segmentFor(I)
Confiança: 1.0
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: java.util.HashMap.put(com.google.common.cache.LocalCache$K, com.google.common.cache.LocalCache$Timestamped)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.cache.LocalCache$Timestamped.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.cache.LocalCache.alertListenerIfPresent(java.lang.Object, java.lang.Object, com.google.common.cache.RemovalCause)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.cache.LocalCache$Timestamped.getValue()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.cache.LocalCache.replace(com.google.common.cache.LocalCache$K, com.google.common.cache.LocalCache$V, com.google.common.cache.LocalCache$V) ************************
*Commit: commit dfc51048f5493eb483f323bb427eef3d76e4685f 1343418286 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.cache.LocalCache.get(java.lang.Object)
java.lang.Object.equals(java.lang.Object)
com.google.common.cache.LocalCache.alertListenerIfPresent(java.lang.Object, java.lang.Object, com.google.common.cache.RemovalCause)
com.google.common.cache.LocalCache.put(com.google.common.cache.LocalCache$K, com.google.common.cache.LocalCache$V)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.Object.equals(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.cache.LocalCache.alertListenerIfPresent(java.lang.Object, java.lang.Object, com.google.common.cache.RemovalCause)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.equals(java.lang.Object)
Também chamam:
java.lang.Object.equals(java.lang.Object)
Confiança: 0.11999980063994577
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: com.google.common.cache.LocalCache.put(com.google.common.cache.LocalCache$K, com.google.common.cache.LocalCache$V)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.cache.CacheBuilder$LocalCache.replace(com.google.common.cache.CacheBuilder$LocalCache$K, com.google.common.cache.CacheBuilder$LocalCache$V, com.google.common.cache.CacheBuilder$LocalCache$V) ************************
*Commit: commit 107f0ade32cf19661befb9359159227464ab4065 1343423238 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.HashMap.containsKey(java.lang.Object)
java.util.LinkedHashMap.get(java.lang.Object)
java.lang.Object.equals(java.lang.Object)
com.google.common.cache.CacheBuilder$LocalCache.put(com.google.common.cache.CacheBuilder$LocalCache$K, com.google.common.cache.CacheBuilder$LocalCache$V)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.LinkedHashMap.get(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Object.equals(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.cache.CacheBuilder$LocalCache.put(com.google.common.cache.CacheBuilder$LocalCache$K, com.google.common.cache.CacheBuilder$LocalCache$V)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.equals(java.lang.Object)
Também chamam:
java.lang.Object.equals(java.lang.Object)
Confiança: 0.11999980063994577
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.cache.CacheBuilder$LocalCache.remove(java.lang.Object, java.lang.Object) ************************
*Commit: commit 107f0ade32cf19661befb9359159227464ab4065 1343423238 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.HashMap.containsKey(java.lang.Object)
java.util.LinkedHashMap.get(java.lang.Object)
java.lang.Object.equals(java.lang.Object)
java.util.HashMap.remove(java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.LinkedHashMap.get(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Object.equals(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.HashMap.remove(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.equals(java.lang.Object)
Também chamam:
java.lang.Object.equals(java.lang.Object)
Confiança: 0.11999980063994577
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.base.CharMatcher.lastIndexIn(java.lang.CharSequence) ************************
*Commit: commit 464b0cfab7c3b6713c35e6f3ae7426542668c77b 1343423719 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
com.google.common.base.CharMatcher.matches(C)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.CharSequence.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.5897439501906699
Suporte: 0.00461477
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.CharMatcher.matches(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
Também chamam:
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.3913044420415319
Suporte: 0.00180578
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.base.CharMatcher.replaceFrom(java.lang.CharSequence, java.lang.CharSequence) ************************
*Commit: commit 464b0cfab7c3b6713c35e6f3ae7426542668c77b 1343423719 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.CharSequence.length()
com.google.common.base.CharMatcher.removeFrom(java.lang.CharSequence)
java.lang.CharSequence.charAt(I)
com.google.common.base.CharMatcher.replaceFrom(java.lang.CharSequence, C)
java.lang.CharSequence.toString()
com.google.common.base.CharMatcher.indexIn(java.lang.CharSequence)
java.lang.String.length()
java.lang.StringBuilder.append(java.lang.CharSequence, I, I)
java.lang.StringBuilder.append(java.lang.CharSequence)
com.google.common.base.CharMatcher.indexIn(java.lang.CharSequence, I)
java.lang.StringBuilder.append(java.lang.CharSequence, I, I)
java.lang.StringBuilder.toString()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.CharMatcher.removeFrom(java.lang.CharSequence)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.5897439501906699
Suporte: 0.00461477
Posição da Sugestão: 1
**************************
Chamada: java.lang.CharSequence.charAt(I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.CharMatcher.replaceFrom(java.lang.CharSequence, C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
Também chamam:
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.3913044420415319
Suporte: 0.00180578
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
Também chamam:
java.lang.CharSequence.toString()
Confiança: 0.3478266522491912
Suporte: 0.00160514
Posição da Sugestão: 2
**************************
Chamada: java.lang.CharSequence.toString()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.CharMatcher.indexIn(java.lang.CharSequence)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.length()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(java.lang.CharSequence, I, I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.5121950033550847
Suporte: 0.00421348
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.2926825117427963
Suporte: 0.0024077
Posição da Sugestão: 2
**************************
Chamada: java.lang.StringBuilder.append(java.lang.CharSequence)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.CharMatcher.indexIn(java.lang.CharSequence, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(java.lang.CharSequence, I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.toString()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.base.CharMatcher.collapseFrom(java.lang.CharSequence, C) ************************
*Commit: commit 464b0cfab7c3b6713c35e6f3ae7426542668c77b 1343423719 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.CharMatcher.indexIn(java.lang.CharSequence)
java.lang.CharSequence.toString()
java.lang.CharSequence.length()
java.lang.CharSequence.subSequence(I, I)
java.lang.StringBuilder.append(java.lang.CharSequence)
java.lang.StringBuilder.append(C)
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
com.google.common.base.CharMatcher.matches(C)
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.toString()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.CharSequence.toString()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.CharSequence.length()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.CharSequence.subSequence(I, I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.5897439501906699
Suporte: 0.00461477
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.CharSequence)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.subSequence(I, I)
Também chamam:
java.lang.CharSequence.toString()
Confiança: 0.8571438742888878
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.subSequence(I, I)
Também chamam:
java.lang.CharSequence.toString()
Confiança: 0.7499968850069153
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: java.lang.StringBuilder.append(C)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.CharSequence.length()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.8139531110006131
Suporte: 0.00702247
Posição da Sugestão: 1
**************************
Chamada: java.lang.CharSequence.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.5897439501906699
Suporte: 0.00461477
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.CharMatcher.matches(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
Também chamam:
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.3913044420415319
Suporte: 0.00180578
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(C)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00461477
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00461477
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.base.CharMatcher.inRange(C, C) ************************
*Commit: commit 464b0cfab7c3b6713c35e6f3ae7426542668c77b 1343423719 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkArgument(Z)
java.lang.Integer.toHexString(I)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
java.lang.Integer.toHexString(I)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
com.google.common.base.CharMatcher.inRange(C, C, java.lang.String)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.Integer.toHexString(I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z)
Também chamam:
java.util.Iterator.next()
Confiança: 0.07608659143728567
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.8780487508387711
Suporte: 0.00722311
Posição da Sugestão: 1
**************************
Chamada: java.lang.Integer.toHexString(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.0024077
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.0024077
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.0024077
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.CharMatcher.inRange(C, C, java.lang.String)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.base.CharMatcher.countIn(java.lang.CharSequence) ************************
*Commit: commit 464b0cfab7c3b6713c35e6f3ae7426542668c77b 1343423719 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
com.google.common.base.CharMatcher.matches(C)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.CharSequence.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.5897439501906699
Suporte: 0.00461477
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.CharMatcher.matches(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
Também chamam:
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.3913044420415319
Suporte: 0.00180578
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.base.CharMatcher.trimLeadingFrom(java.lang.CharSequence) ************************
*Commit: commit 464b0cfab7c3b6713c35e6f3ae7426542668c77b 1343423719 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
com.google.common.base.CharMatcher.matches(C)
java.lang.CharSequence.subSequence(I, I)
java.lang.CharSequence.toString()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.CharSequence.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.5897439501906699
Suporte: 0.00461477
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.CharMatcher.matches(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
Também chamam:
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.3913044420415319
Suporte: 0.00180578
Posição da Sugestão: 1
**************************
Chamada: java.lang.CharSequence.subSequence(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.CharSequence.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.charAt(I)
java.lang.CharSequence.subSequence(I, I)
Também chamam:
java.lang.CharSequence.toString()
Confiança: 1.0
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
************************ Método Avaliado: null.indexIn(java.lang.CharSequence, I) ************************
*Commit: commit 464b0cfab7c3b6713c35e6f3ae7426542668c77b 1343423719 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.CharSequence.length()
com.google.common.base.Preconditions.checkPositionIndex(I, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkPositionIndex(I, I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.5897439501906699
Suporte: 0.00461477
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.23076942737672906
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.23076942737672906
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.toString()
Confiança: 0.20512866387903447
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
java.lang.CharSequence.toString()
Confiança: 0.20512866387903447
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.base.CharMatcher.trimTrailingFrom(java.lang.CharSequence) ************************
*Commit: commit 464b0cfab7c3b6713c35e6f3ae7426542668c77b 1343423719 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
com.google.common.base.CharMatcher.matches(C)
java.lang.CharSequence.subSequence(I, I)
java.lang.CharSequence.toString()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.CharSequence.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.5897439501906699
Suporte: 0.00461477
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.CharMatcher.matches(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
Também chamam:
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.3913044420415319
Suporte: 0.00180578
Posição da Sugestão: 1
**************************
Chamada: java.lang.CharSequence.subSequence(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.CharSequence.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.charAt(I)
java.lang.CharSequence.subSequence(I, I)
Também chamam:
java.lang.CharSequence.toString()
Confiança: 1.0
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.base.CharMatcher.matchesAllOf(java.lang.CharSequence) ************************
*Commit: commit 464b0cfab7c3b6713c35e6f3ae7426542668c77b 1343423719 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
com.google.common.base.CharMatcher.matches(C)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.CharSequence.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.5897439501906699
Suporte: 0.00461477
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.CharMatcher.matches(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
Também chamam:
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.3913044420415319
Suporte: 0.00180578
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.base.CharMatcher.anyOf(java.lang.CharSequence) ************************
*Commit: commit 464b0cfab7c3b6713c35e6f3ae7426542668c77b 1343423719 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
com.google.common.base.CharMatcher.is(C)
java.lang.CharSequence.charAt(I)
java.lang.CharSequence.charAt(I)
java.lang.StringBuilder.append(java.lang.CharSequence)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
java.lang.CharSequence.toString()
java.lang.String.toCharArray()
java.util.Arrays.sort([C)
java.lang.StringBuilder.append([C)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
java.util.Arrays.binarySearch([C, C)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.CharSequence.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.5897439501906699
Suporte: 0.00461477
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.CharMatcher.is(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
Também chamam:
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.3913044420415319
Suporte: 0.00180578
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
Também chamam:
java.lang.CharSequence.toString()
Confiança: 0.3478266522491912
Suporte: 0.00160514
Posição da Sugestão: 2
**************************
Chamada: java.lang.CharSequence.charAt(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.CharSequence.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
Também chamam:
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.3913044420415319
Suporte: 0.00180578
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
Também chamam:
java.lang.CharSequence.toString()
Confiança: 0.3478266522491912
Suporte: 0.00160514
Posição da Sugestão: 2
**************************
Chamada: java.lang.StringBuilder.append(java.lang.CharSequence)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
Também chamam:
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.3913044420415319
Suporte: 0.00180578
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
Também chamam:
java.lang.CharSequence.toString()
Confiança: 0.3478266522491912
Suporte: 0.00160514
Posição da Sugestão: 2
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.8780487508387711
Suporte: 0.00722311
Posição da Sugestão: 1
**************************
Chamada: java.lang.CharSequence.toString()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.toCharArray()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Arrays.sort([C)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append([C)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.0024077
Posição da Sugestão: 1
**************************
Chamada: java.util.Arrays.binarySearch([C, C)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.base.CharMatcher.indexIn(java.lang.CharSequence) ************************
*Commit: commit 464b0cfab7c3b6713c35e6f3ae7426542668c77b 1343423719 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
com.google.common.base.CharMatcher.matches(C)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.CharSequence.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.5897439501906699
Suporte: 0.00461477
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.CharMatcher.matches(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
Também chamam:
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.3913044420415319
Suporte: 0.00180578
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.base.CharMatcher.negate() ************************
*Commit: commit 464b0cfab7c3b6713c35e6f3ae7426542668c77b 1343423719 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.CharMatcher.matches(C)
com.google.common.base.CharMatcher.matchesNoneOf(java.lang.CharSequence)
com.google.common.base.CharMatcher.matchesAllOf(java.lang.CharSequence)
java.lang.CharSequence.length()
com.google.common.base.CharMatcher.countIn(java.lang.CharSequence)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.CharMatcher.matchesNoneOf(java.lang.CharSequence)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.CharMatcher.matchesAllOf(java.lang.CharSequence)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.CharSequence.length()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.CharMatcher.countIn(java.lang.CharSequence)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.5897439501906699
Suporte: 0.00461477
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.23076942737672906
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.23076942737672906
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.toString()
Confiança: 0.20512866387903447
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
java.lang.CharSequence.toString()
Confiança: 0.20512866387903447
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.base.CharMatcher.forPredicate(com.google.common.base.Predicate) ************************
*Commit: commit 464b0cfab7c3b6713c35e6f3ae7426542668c77b 1343423719 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Predicate)
java.lang.StringBuilder.append(java.lang.Object)
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.toString()
com.google.common.base.Predicate.apply(null)
com.google.common.base.Preconditions.checkNotNull(java.lang.Character)
com.google.common.base.Predicate.apply(null)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.StringBuilder.append(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Predicate)
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.4814816865841908
Suporte: 0.00260835
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.Object)
Também chamam:
java.lang.StringBuilder.append(C)
Confiança: 0.6153852052063564
Suporte: 0.00160514
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.8139531110006131
Suporte: 0.00702247
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.Predicate.apply(null)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkNotNull(java.lang.Character)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Predicate.apply(null)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.18367363545190643
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Chamada: com.google.common.base.Predicate.apply(null)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.base.CharMatcher.indexIn(java.lang.CharSequence, I) ************************
*Commit: commit 464b0cfab7c3b6713c35e6f3ae7426542668c77b 1343423719 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.CharSequence.length()
com.google.common.base.Preconditions.checkPositionIndex(I, I)
java.lang.CharSequence.charAt(I)
com.google.common.base.CharMatcher.matches(C)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkPositionIndex(I, I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.5897439501906699
Suporte: 0.00461477
Posição da Sugestão: 1
**************************
Chamada: java.lang.CharSequence.charAt(I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.CharMatcher.matches(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
Também chamam:
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.3913044420415319
Suporte: 0.00180578
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.base.CharMatcher.isNot(C) ************************
*Commit: commit 464b0cfab7c3b6713c35e6f3ae7426542668c77b 1343423719 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.Integer.toHexString(I)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
com.google.common.base.CharMatcher.matches(C)
com.google.common.base.CharMatcher.matches(C)
com.google.common.base.CharMatcher.is(C)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.StringBuilder.append(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.8780487508387711
Suporte: 0.00722311
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.0024077
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.CharMatcher.matches(C)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.CharMatcher.matches(C)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.CharMatcher.is(C)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.base.CharMatcher.is(C) ************************
*Commit: commit 464b0cfab7c3b6713c35e6f3ae7426542668c77b 1343423719 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.Integer.toHexString(I)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
java.lang.CharSequence.toString()
java.lang.String.replace(C, C)
com.google.common.base.CharMatcher.matches(C)
com.google.common.base.CharMatcher.matches(C)
com.google.common.base.CharMatcher.isNot(C)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.StringBuilder.append(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.8780487508387711
Suporte: 0.00722311
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.0024077
Posição da Sugestão: 1
**************************
Chamada: java.lang.CharSequence.toString()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.replace(C, C)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.CharMatcher.matches(C)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.CharMatcher.matches(C)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.CharMatcher.isNot(C)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.base.CharMatcher.trimAndCollapseFrom(java.lang.CharSequence, C) ************************
*Commit: commit 464b0cfab7c3b6713c35e6f3ae7426542668c77b 1343423719 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.CharMatcher.negate()
com.google.common.base.CharMatcher.indexIn(java.lang.CharSequence)
java.lang.CharSequence.length()
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
com.google.common.base.CharMatcher.matches(C)
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.toString()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.CharMatcher.indexIn(java.lang.CharSequence)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.CharSequence.length()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.CharSequence.length()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.5897439501906699
Suporte: 0.00461477
Posição da Sugestão: 1
**************************
Chamada: java.lang.CharSequence.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.5897439501906699
Suporte: 0.00461477
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.CharMatcher.matches(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
Também chamam:
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.3913044420415319
Suporte: 0.00180578
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(C)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.8139531110006131
Suporte: 0.00702247
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00461477
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.base.CharMatcher.trimFrom(java.lang.CharSequence) ************************
*Commit: commit 464b0cfab7c3b6713c35e6f3ae7426542668c77b 1343423719 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
com.google.common.base.CharMatcher.matches(C)
java.lang.CharSequence.charAt(I)
com.google.common.base.CharMatcher.matches(C)
java.lang.CharSequence.subSequence(I, I)
java.lang.CharSequence.toString()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.CharSequence.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.5897439501906699
Suporte: 0.00461477
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.CharMatcher.matches(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
Também chamam:
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.3913044420415319
Suporte: 0.00180578
Posição da Sugestão: 1
**************************
Chamada: java.lang.CharSequence.charAt(I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.CharMatcher.matches(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
Também chamam:
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.3913044420415319
Suporte: 0.00180578
Posição da Sugestão: 1
**************************
Chamada: java.lang.CharSequence.subSequence(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.CharSequence.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.charAt(I)
java.lang.CharSequence.subSequence(I, I)
Também chamam:
java.lang.CharSequence.toString()
Confiança: 1.0
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.cache.CacheBuilder.removalListener(com.google.common.cache.RemovalListener) ************************
*Commit: commit 60b819dc1291788a3dce17cd95d8f4a7d0a8b9bf 1343784614 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkState(Z)
com.google.common.base.Preconditions.checkNotNull(com.google.common.cache.RemovalListener)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkNotNull(com.google.common.cache.RemovalListener)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.cache.CacheBuilder.checkWeightWithWeigher() ************************
*Commit: commit 60b819dc1291788a3dce17cd95d8f4a7d0a8b9bf 1343784614 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
java.util.logging.Logger.log(java.util.logging.Level, java.lang.String)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5217378114185539
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.26086890570927695
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.26086890570927695
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: java.util.logging.Logger.log(java.util.logging.Level, java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5217378114185539
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.26086890570927695
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.26086890570927695
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.cache.CacheBuilder.expireAfterAccess(J, java.util.concurrent.TimeUnit) ************************
*Commit: commit 60b819dc1291788a3dce17cd95d8f4a7d0a8b9bf 1343784614 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkState(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
java.util.concurrent.TimeUnit.toNanos(J)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.TimeUnit.toNanos(J)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2083336794451136
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.cache.CacheBuilder.ticker(com.google.common.base.Ticker) ************************
*Commit: commit 60b819dc1291788a3dce17cd95d8f4a7d0a8b9bf 1343784614 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkState(Z)
com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Ticker)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Ticker)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.cache.CacheBuilder.maximumSize(J) ************************
*Commit: commit 60b819dc1291788a3dce17cd95d8f4a7d0a8b9bf 1343784614 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkState(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.base.Preconditions.checkState(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkState(Z, java.lang.String, [Ljava.lang.Object;)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5217378114185539
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.26086890570927695
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.26086890570927695
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.cache.LocalCache$EntrySet.contains(java.lang.Object) ************************
*Commit: commit 60b819dc1291788a3dce17cd95d8f4a7d0a8b9bf 1343784614 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map$Entry.getKey()
com.google.common.cache.LocalCache.get(java.lang.Object)
java.util.Map$Entry.getValue()
java.lang.Object.equals(java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.cache.LocalCache.get(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Object.equals(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.0891091942678931
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.cache.LocalCache$WriteThroughEntry.hashCode() ************************
*Commit: commit 60b819dc1291788a3dce17cd95d8f4a7d0a8b9bf 1343784614 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.Object.hashCode()
java.lang.Object.hashCode()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.Object.hashCode()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.hashCode()
Também chamam:
java.lang.Object.hashCode()
Confiança: 0.21428579904758174
Suporte: 0.00180578
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.cache.LocalCache.containsValue(java.lang.Object) ************************
*Commit: commit 60b819dc1291788a3dce17cd95d8f4a7d0a8b9bf 1343784614 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.HashMap.values()
com.google.common.cache.LocalCache$Timestamped.getValue()
java.lang.Object.equals(java.lang.Object)
com.google.common.cache.LocalCache.isExpired(com.google.common.cache.LocalCache$Timestamped)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.cache.LocalCache$Timestamped.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Object.equals(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.cache.LocalCache.isExpired(com.google.common.cache.LocalCache$Timestamped)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.equals(java.lang.Object)
Também chamam:
java.lang.Object.equals(java.lang.Object)
Confiança: 0.11999980063994577
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.cache.LocalCache.remove(java.lang.Object, java.lang.Object) ************************
*Commit: commit 60b819dc1291788a3dce17cd95d8f4a7d0a8b9bf 1343784614 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.cache.LocalCache.get(java.lang.Object)
java.lang.Object.equals(java.lang.Object)
com.google.common.cache.LocalCache.alertListenerIfPresent(java.lang.Object, java.lang.Object, com.google.common.cache.RemovalCause)
com.google.common.cache.LocalCache.remove(java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.Object.equals(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.cache.LocalCache.alertListenerIfPresent(java.lang.Object, java.lang.Object, com.google.common.cache.RemovalCause)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.equals(java.lang.Object)
Também chamam:
java.lang.Object.equals(java.lang.Object)
Confiança: 0.11999980063994577
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: com.google.common.cache.LocalCache.remove(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.cache.LocalCache$EntryIterator.next() ************************
*Commit: commit 60b819dc1291788a3dce17cd95d8f4a7d0a8b9bf 1343784614 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.cache.LocalCache$EntryIterator.hasNext()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.cache.LocalCache$Timestamped.getValue()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 1
**************************
Chamada: com.google.common.cache.LocalCache$Timestamped.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.0891091942678931
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.cache.LocalCache$CapacityEnforcingLinkedHashMap.removeEldestEntry(java.util.Map$Entry) ************************
*Commit: commit 60b819dc1291788a3dce17cd95d8f4a7d0a8b9bf 1343784614 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.HashMap.size()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.cache.LocalCache$Timestamped.getValue()
com.google.common.cache.RemovalListener.onRemoval(com.google.common.cache.RemovalNotification)
com.google.common.cache.AbstractCache$StatsCounter.recordEviction()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 1
**************************
Chamada: com.google.common.cache.LocalCache$Timestamped.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.0891091942678931
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Chamada: com.google.common.cache.RemovalListener.onRemoval(com.google.common.cache.RemovalNotification)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.cache.AbstractCache$StatsCounter.recordEviction()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.cache.LocalCache.putAll(java.util.Map) ************************
*Commit: commit 60b819dc1291788a3dce17cd95d8f4a7d0a8b9bf 1343784614 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.cache.LocalCache.put(com.google.common.cache.LocalCache$K, com.google.common.cache.LocalCache$V)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.5999987540027661
Suporte: 0.00963082
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7659567473791592
Suporte: 0.00722311
Posição da Sugestão: 1
**************************
Chamada: com.google.common.cache.LocalCache.put(com.google.common.cache.LocalCache$K, com.google.common.cache.LocalCache$V)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.24999948083340776
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.19444394450589844
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.16666701277772816
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.12499974041670388
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.cache.LocalCache.load(java.lang.Object) ************************
*Commit: commit 60b819dc1291788a3dce17cd95d8f4a7d0a8b9bf 1343784614 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Ticker.read()
com.google.common.cache.CacheLoader.load(null)
com.google.common.cache.LocalCache.put(com.google.common.cache.LocalCache$K, com.google.common.cache.LocalCache$V)
com.google.common.base.Ticker.read()
com.google.common.cache.AbstractCache$StatsCounter.recordLoadException(J)
com.google.common.base.Ticker.read()
com.google.common.cache.AbstractCache$StatsCounter.recordLoadException(J)
com.google.common.base.Ticker.read()
com.google.common.cache.AbstractCache$StatsCounter.recordLoadException(J)
com.google.common.base.Ticker.read()
com.google.common.cache.AbstractCache$StatsCounter.recordLoadSuccess(J)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.cache.CacheLoader.load(null)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
com.google.common.cache.LocalCache$ReferenceEntry.getValueReference()
Confiança: 0.4782600216262132
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
java.util.concurrent.atomic.AtomicReferenceArray.length()
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
com.google.common.base.Equivalence.equivalent(java.lang.Object, java.lang.Object)
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
java.util.concurrent.atomic.AtomicReferenceArray.get(I)
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
com.google.common.cache.LocalCache$ReferenceEntry.getKey()
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Chamada: com.google.common.cache.LocalCache.put(com.google.common.cache.LocalCache$K, com.google.common.cache.LocalCache$V)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Ticker.read()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.cache.AbstractCache$StatsCounter.recordLoadException(J)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
com.google.common.cache.LocalCache$ReferenceEntry.getValueReference()
Confiança: 0.4782600216262132
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
java.util.concurrent.atomic.AtomicReferenceArray.length()
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
com.google.common.base.Equivalence.equivalent(java.lang.Object, java.lang.Object)
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
java.util.concurrent.atomic.AtomicReferenceArray.get(I)
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
com.google.common.cache.LocalCache$ReferenceEntry.getKey()
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Chamada: com.google.common.base.Ticker.read()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.cache.AbstractCache$StatsCounter.recordLoadException(J)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
com.google.common.cache.LocalCache$ReferenceEntry.getValueReference()
Confiança: 0.4782600216262132
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
java.util.concurrent.atomic.AtomicReferenceArray.length()
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
com.google.common.base.Equivalence.equivalent(java.lang.Object, java.lang.Object)
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
java.util.concurrent.atomic.AtomicReferenceArray.get(I)
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
com.google.common.cache.LocalCache$ReferenceEntry.getKey()
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Chamada: com.google.common.base.Ticker.read()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.cache.AbstractCache$StatsCounter.recordLoadException(J)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
com.google.common.cache.LocalCache$ReferenceEntry.getValueReference()
Confiança: 0.4782600216262132
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
java.util.concurrent.atomic.AtomicReferenceArray.length()
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
com.google.common.base.Equivalence.equivalent(java.lang.Object, java.lang.Object)
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
java.util.concurrent.atomic.AtomicReferenceArray.get(I)
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
com.google.common.cache.LocalCache$ReferenceEntry.getKey()
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Chamada: com.google.common.base.Ticker.read()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.cache.AbstractCache$StatsCounter.recordLoadSuccess(J)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
com.google.common.cache.LocalCache$ReferenceEntry.getValueReference()
Confiança: 0.4782600216262132
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
java.util.concurrent.atomic.AtomicReferenceArray.length()
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
com.google.common.base.Equivalence.equivalent(java.lang.Object, java.lang.Object)
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
java.util.concurrent.atomic.AtomicReferenceArray.get(I)
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Ticker.read()
Também chamam:
com.google.common.cache.LocalCache$ReferenceEntry.getKey()
Confiança: 0.4347822318338726
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.cache.LocalCache.clear() ************************
*Commit: commit 60b819dc1291788a3dce17cd95d8f4a7d0a8b9bf 1343784614 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.HashMap.entrySet()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.cache.LocalCache$Timestamped.getValue()
com.google.common.cache.LocalCache.alertListenerIfPresent(java.lang.Object, java.lang.Object, com.google.common.cache.RemovalCause)
java.util.LinkedHashMap.clear()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 1
**************************
Chamada: com.google.common.cache.LocalCache$Timestamped.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.0891091942678931
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Chamada: com.google.common.cache.LocalCache.alertListenerIfPresent(java.lang.Object, java.lang.Object, com.google.common.cache.RemovalCause)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.LinkedHashMap.clear()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.cache.LocalCache.put(com.google.common.cache.LocalCache$K, com.google.common.cache.LocalCache$V) ************************
*Commit: commit 60b819dc1291788a3dce17cd95d8f4a7d0a8b9bf 1343784614 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.cache.LocalCache$K)
com.google.common.base.Preconditions.checkNotNull(com.google.common.cache.LocalCache$V)
java.util.HashMap.put(com.google.common.cache.LocalCache$K, com.google.common.cache.LocalCache$Timestamped)
com.google.common.cache.LocalCache$Timestamped.getValue()
com.google.common.cache.LocalCache.alertListenerIfPresent(java.lang.Object, java.lang.Object, com.google.common.cache.RemovalCause)
com.google.common.cache.LocalCache$Timestamped.getValue()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkNotNull(com.google.common.cache.LocalCache$V)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.cache.LocalCache$K)
Também chamam:
com.google.common.cache.LocalCache.hash(java.lang.Object)
Confiança: 1.0
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.cache.LocalCache$K)
Também chamam:
com.google.common.cache.LocalCache.segmentFor(I)
Confiança: 1.0
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.cache.LocalCache$K)
Também chamam:
com.google.common.cache.LocalCache.hash(java.lang.Object)
com.google.common.cache.LocalCache.segmentFor(I)
Confiança: 1.0
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: java.util.HashMap.put(com.google.common.cache.LocalCache$K, com.google.common.cache.LocalCache$Timestamped)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.cache.LocalCache$Timestamped.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.cache.LocalCache.alertListenerIfPresent(java.lang.Object, java.lang.Object, com.google.common.cache.RemovalCause)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.cache.LocalCache$Timestamped.getValue()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.cache.LocalCache.replace(com.google.common.cache.LocalCache$K, com.google.common.cache.LocalCache$V, com.google.common.cache.LocalCache$V) ************************
*Commit: commit 60b819dc1291788a3dce17cd95d8f4a7d0a8b9bf 1343784614 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.cache.LocalCache.get(java.lang.Object)
java.lang.Object.equals(java.lang.Object)
com.google.common.cache.LocalCache.alertListenerIfPresent(java.lang.Object, java.lang.Object, com.google.common.cache.RemovalCause)
com.google.common.cache.LocalCache.put(com.google.common.cache.LocalCache$K, com.google.common.cache.LocalCache$V)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.Object.equals(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.cache.LocalCache.alertListenerIfPresent(java.lang.Object, java.lang.Object, com.google.common.cache.RemovalCause)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.equals(java.lang.Object)
Também chamam:
java.lang.Object.equals(java.lang.Object)
Confiança: 0.11999980063994577
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: com.google.common.cache.LocalCache.put(com.google.common.cache.LocalCache$K, com.google.common.cache.LocalCache$V)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.cache.LocalCache$WriteThroughEntry.equals(java.lang.Object) ************************
*Commit: commit 60b819dc1291788a3dce17cd95d8f4a7d0a8b9bf 1343784614 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map$Entry.getKey()
java.lang.Object.equals(java.lang.Object)
java.util.Map$Entry.getValue()
java.lang.Object.equals(java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.Object.equals(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.equals(java.lang.Object)
Também chamam:
java.lang.Object.equals(java.lang.Object)
Confiança: 0.11999980063994577
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: java.lang.Object.equals(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.0891091942678931
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.cache.LocalCache$WriteThroughEntry.WriteThroughEntry(com.google.common.cache.LocalCache$K, com.google.common.cache.LocalCache$V) ************************
*Commit: commit 60b819dc1291788a3dce17cd95d8f4a7d0a8b9bf 1343784614 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.cache.LocalCache$K)
com.google.common.base.Preconditions.checkNotNull(com.google.common.cache.LocalCache$V)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkNotNull(com.google.common.cache.LocalCache$V)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.cache.LocalCache$K)
Também chamam:
com.google.common.cache.LocalCache.hash(java.lang.Object)
Confiança: 1.0
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.cache.LocalCache$K)
Também chamam:
com.google.common.cache.LocalCache.segmentFor(I)
Confiança: 1.0
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.cache.LocalCache$K)
Também chamam:
com.google.common.cache.LocalCache.hash(java.lang.Object)
com.google.common.cache.LocalCache.segmentFor(I)
Confiança: 1.0
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.cache.LocalCache$EntryIterator.remove() ************************
*Commit: commit 60b819dc1291788a3dce17cd95d8f4a7d0a8b9bf 1343784614 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkState(Z)
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.cache.LocalCache.remove(java.lang.Object, java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.1538458589349064
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 1
**************************
Chamada: com.google.common.cache.LocalCache.remove(java.lang.Object, java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z)
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 1.0
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.0891091942678931
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.cache.LocalCache$EntryIterator.hasNext() ************************
*Commit: commit 60b819dc1291788a3dce17cd95d8f4a7d0a8b9bf 1343784614 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getValue()
com.google.common.cache.LocalCache.isExpired(com.google.common.cache.LocalCache$Timestamped)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7087362667937666
Suporte: 0.0292937
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.43835705288167764
Suporte: 0.0128411
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.2260277807173556
Suporte: 0.00662119
Posição da Sugestão: 3
**************************
Chamada: com.google.common.cache.LocalCache.isExpired(com.google.common.cache.LocalCache$Timestamped)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.6060602399266597
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.6060602399266597
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.41666649361113595
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.24242470009167535
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.24242470009167535
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.cache.LocalCache$EntrySet.remove(java.lang.Object) ************************
*Commit: commit 60b819dc1291788a3dce17cd95d8f4a7d0a8b9bf 1343784614 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.cache.LocalCache.remove(java.lang.Object, java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 1
**************************
Chamada: com.google.common.cache.LocalCache.remove(java.lang.Object, java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.0891091942678931
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Maps.toMap(java.util.Iterator, com.google.common.base.Function) ************************
*Commit: commit 6510d48005dd21d67f7655eae0689a6104117642 1343948005 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Function)
com.google.common.collect.Maps.newLinkedHashMap()
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.base.Function.apply(null)
java.util.Map.put(com.google.common.collect.Maps$(Ljava/util/Iterator;Lcom/google/common/base/Function;)Lcom/google/common/collect/ImmutableMap;$K, com.google.common.collect.Maps$(Ljava/util/Iterator;Lcom/google/common/base/Function;)Lcom/google/common/collect/ImmutableMap;$V)
com.google.common.collect.ImmutableMap.copyOf(java.util.Map)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Maps.newLinkedHashMap()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Function)
Também chamam:
com.google.common.base.Function.apply(null)
Confiança: 0.4399996012798915
Suporte: 0.00220706
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7087362667937666
Suporte: 0.0292937
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.Function.apply(null)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.43835705288167764
Suporte: 0.0128411
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.2260277807173556
Suporte: 0.00662119
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.21621642251782006
Suporte: 0.00963082
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.1666668911713532
Suporte: 0.00742376
Posição da Sugestão: 0
**************************
Chamada: java.util.Map.put(com.google.common.collect.Maps$(Ljava/util/Iterator;Lcom/google/common/base/Function;)Lcom/google/common/collect/ImmutableMap;$K, com.google.common.collect.Maps$(Ljava/util/Iterator;Lcom/google/common/base/Function;)Lcom/google/common/collect/ImmutableMap;$V)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableMap.copyOf(java.util.Map)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Maps.toMap(java.util.Iterator, com.google.common.base.Function) ************************
*Commit: commit 6510d48005dd21d67f7655eae0689a6104117642 1343948005 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Function)
com.google.common.collect.Maps.newLinkedHashMap()
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.base.Function.apply(null)
java.util.Map.put(com.google.common.collect.Maps$(Ljava/util/Iterator;Lcom/google/common/base/Function;)Lcom/google/common/collect/ImmutableMap;$K, com.google.common.collect.Maps$(Ljava/util/Iterator;Lcom/google/common/base/Function;)Lcom/google/common/collect/ImmutableMap;$V)
com.google.common.collect.ImmutableMap.copyOf(java.util.Map)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Maps.newLinkedHashMap()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Function)
Também chamam:
com.google.common.base.Function.apply(null)
Confiança: 0.4399996012798915
Suporte: 0.00220706
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7087362667937666
Suporte: 0.0292937
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.Function.apply(null)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.43835705288167764
Suporte: 0.0128411
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.2260277807173556
Suporte: 0.00662119
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.21621642251782006
Suporte: 0.00963082
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.1666668911713532
Suporte: 0.00742376
Posição da Sugestão: 0
**************************
Chamada: java.util.Map.put(com.google.common.collect.Maps$(Ljava/util/Iterator;Lcom/google/common/base/Function;)Lcom/google/common/collect/ImmutableMap;$K, com.google.common.collect.Maps$(Ljava/util/Iterator;Lcom/google/common/base/Function;)Lcom/google/common/collect/ImmutableMap;$V)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableMap.copyOf(java.util.Map)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Range.encloseAll(java.lang.Iterable) ************************
*Commit: commit ecfa6f67f323c23f10a1ceed7596e095618fa044 1344278490 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.Iterable)
com.google.common.collect.ContiguousSet.range()
java.lang.Iterable.iterator()
java.util.Iterator.next()
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Range$(Ljava/lang/Iterable;)Lcom/google/common/collect/Range;$C)
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Range$(Ljava/lang/Iterable;)Lcom/google/common/collect/Range;$C)
com.google.common.collect.Ordering.natural()
com.google.common.collect.Ordering.min(com.google.common.collect.Range$(Ljava/lang/Iterable;)Lcom/google/common/collect/Range;$C, com.google.common.collect.Range$(Ljava/lang/Iterable;)Lcom/google/common/collect/Range;$C)
com.google.common.collect.Ordering.natural()
com.google.common.collect.Ordering.max(com.google.common.collect.Range$(Ljava/lang/Iterable;)Lcom/google/common/collect/Range;$C, com.google.common.collect.Range$(Ljava/lang/Iterable;)Lcom/google/common/collect/Range;$C)
com.google.common.collect.Range.closed(com.google.common.collect.Range$(Ljava/lang/Iterable;)Lcom/google/common/collect/Range;$C, com.google.common.collect.Range$(Ljava/lang/Iterable;)Lcom/google/common/collect/Range;$C)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ContiguousSet.range()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.Iterable)
Também chamam:
java.lang.Iterable.iterator()
Confiança: 0.6086955579584682
Suporte: 0.00280899
Posição da Sugestão: 1
**************************
Chamada: java.lang.Iterable.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Iterable.iterator()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.29729786159286076
Suporte: 0.00441413
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Range$(Ljava/lang/Iterable;)Lcom/google/common/collect/Range;$C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Iterable.iterator()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.5789465400556109
Suporte: 0.00220706
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Iterable.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.8636356428107012
Suporte: 0.0038122
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Range$(Ljava/lang/Iterable;)Lcom/google/common/collect/Range;$C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Iterable.iterator()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.5789465400556109
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.Iterable.iterator()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.next()
Confiança: 0.5789465400556109
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.Iterable.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.5263155133518703
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.Iterable.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.next()
Confiança: 0.5263155133518703
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.Iterable.iterator()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Confiança: 0.47368448664812973
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Ordering.natural()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Ordering.min(com.google.common.collect.Range$(Ljava/lang/Iterable;)Lcom/google/common/collect/Range;$C, com.google.common.collect.Range$(Ljava/lang/Iterable;)Lcom/google/common/collect/Range;$C)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
java.util.Arrays.asList([Ljava.lang.Comparable;)
Confiança: 0.18867970660146702
Suporte: 0.00200642
Posição da Sugestão: 3
**************************
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
com.google.common.collect.ImmutableSortedMultiset.copyOf(java.util.Comparator, java.lang.Iterable)
Confiança: 0.1320754184690615
Suporte: 0.00140449
Posição da Sugestão: 3
**************************
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
com.google.common.collect.Ordering.natural()
Confiança: 0.1320754184690615
Suporte: 0.00140449
Posição da Sugestão: 3
**************************
Chamada: com.google.common.collect.Ordering.natural()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Ordering.max(com.google.common.collect.Range$(Ljava/lang/Iterable;)Lcom/google/common/collect/Range;$C, com.google.common.collect.Range$(Ljava/lang/Iterable;)Lcom/google/common/collect/Range;$C)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
java.util.Arrays.asList([Ljava.lang.Comparable;)
Confiança: 0.18867970660146702
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
com.google.common.collect.ImmutableSortedMultiset.copyOf(java.util.Comparator, java.lang.Iterable)
Confiança: 0.1320754184690615
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
com.google.common.collect.Ordering.natural()
Confiança: 0.1320754184690615
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
com.google.common.collect.ImmutableSortedSet.copyOf(java.util.Comparator, java.util.Collection)
Confiança: 0.1320754184690615
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Range.closed(com.google.common.collect.Range$(Ljava/lang/Iterable;)Lcom/google/common/collect/Range;$C, com.google.common.collect.Range$(Ljava/lang/Iterable;)Lcom/google/common/collect/Range;$C)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.testing.Platform.format(java.lang.String, [Ljava.lang.Object;) ************************
*Commit: commit cc58fac6cd000bcf73f5544d9eb3e23d00573863 1344548757 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.String.length()
java.lang.String.indexOf(java.lang.String, I)
java.lang.String.substring(I, I)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.Object)
java.lang.String.substring(I)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.Object)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.Object)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.String.indexOf(java.lang.String, I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.5121950033550847
Suporte: 0.00421348
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.2926825117427963
Suporte: 0.0024077
Posição da Sugestão: 2
**************************
Chamada: java.lang.String.substring(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00180578
Posição da Sugestão: 1
**************************
Chamada: java.lang.String.substring(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.Object)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.0024077
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.0024077
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.Object)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.0024077
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.Object)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.0024077
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.testing.testers.Platform.format(java.lang.String, [Ljava.lang.Object;) ************************
*Commit: commit cc58fac6cd000bcf73f5544d9eb3e23d00573863 1344548757 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.String.length()
java.lang.String.indexOf(java.lang.String, I)
java.lang.String.substring(I, I)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.Object)
java.lang.String.substring(I)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.Object)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.Object)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.String.indexOf(java.lang.String, I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.5121950033550847
Suporte: 0.00421348
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.2926825117427963
Suporte: 0.0024077
Posição da Sugestão: 2
**************************
Chamada: java.lang.String.substring(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00180578
Posição da Sugestão: 1
**************************
Chamada: java.lang.String.substring(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.Object)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.0024077
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.0024077
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.Object)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.0024077
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.Object)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.0024077
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.base.CharMatcher$NegatedMatcher.countIn(java.lang.CharSequence) ************************
*Commit: commit 4c88a393a8ea0ca9c96ff7b441211326b9379424 1344549017 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.CharSequence.length()
com.google.common.base.CharMatcher.countIn(java.lang.CharSequence)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.CharMatcher.countIn(java.lang.CharSequence)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.5897439501906699
Suporte: 0.00461477
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.23076942737672906
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.23076942737672906
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.toString()
Confiança: 0.20512866387903447
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
java.lang.CharSequence.toString()
Confiança: 0.20512866387903447
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.base.CharMatcher.isEither(C, C) ************************
*Commit: commit 4c88a393a8ea0ca9c96ff7b441211326b9379424 1344549017 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.StringBuilder.append(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.8139531110006131
Suporte: 0.00702247
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00461477
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00401284
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.base.CharMatcher$NegatedMatcher.countIn(java.lang.CharSequence) ************************
*Commit: commit 4c88a393a8ea0ca9c96ff7b441211326b9379424 1344549017 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.CharSequence.length()
com.google.common.base.CharMatcher.countIn(java.lang.CharSequence)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.CharMatcher.countIn(java.lang.CharSequence)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.5897439501906699
Suporte: 0.00461477
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.23076942737672906
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.23076942737672906
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.toString()
Confiança: 0.20512866387903447
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
java.lang.CharSequence.toString()
Confiança: 0.20512866387903447
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.base.CharMatcher.isEither(C, C) ************************
*Commit: commit 4c88a393a8ea0ca9c96ff7b441211326b9379424 1344549017 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
java.util.BitSet.set(I)
java.util.BitSet.set(I)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.StringBuilder.append(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.8139531110006131
Suporte: 0.00702247
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00461477
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00401284
Posição da Sugestão: 1
**************************
Chamada: java.util.BitSet.set(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.BitSet.set(I)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.io.Files.getNameWithoutExtension(java.lang.String) ************************
*Commit: commit f7382c77eed0cb9231b73cbe0378987bee18bc5e 1344552071 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
java.io.File.getName()
java.lang.String.lastIndexOf(I)
java.lang.String.substring(I, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.io.File.getName()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
Confiança: 0.375
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.String.length()
Confiança: 0.27499975079993216
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Chamada: java.lang.String.lastIndexOf(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.substring(I, I)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.primitives.Doubles.copyOf([D, I) ************************
*Commit: commit 963e8a39ace0e027d2544a5c19c8ca75ee3334c6 1344891566 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.Math.min(I, I)
java.lang.System.arraycopy(java.lang.Object, I, java.lang.Object, I, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.System.arraycopy(java.lang.Object, I, java.lang.Object, I, I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Math.min(I, I)
Também chamam:
java.lang.System.arraycopy(java.lang.Object, I, java.lang.Object, I, I)
Confiança: 0.25714314194293464
Suporte: 0.00180578
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.primitives.Doubles.min([D) ************************
*Commit: commit 963e8a39ace0e027d2544a5c19c8ca75ee3334c6 1344891566 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkArgument(Z)
java.lang.Math.min(D, D)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.Math.min(D, D)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z)
Também chamam:
java.util.Iterator.next()
Confiança: 0.07608659143728567
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.primitives.Doubles.max([D) ************************
*Commit: commit 963e8a39ace0e027d2544a5c19c8ca75ee3334c6 1344891566 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkArgument(Z)
java.lang.Math.max(D, D)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.Math.max(D, D)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z)
Também chamam:
java.util.Iterator.next()
Confiança: 0.07608659143728567
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.primitives.Doubles.ensureCapacity([D, I, I) ************************
*Commit: commit 963e8a39ace0e027d2544a5c19c8ca75ee3334c6 1344891566 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.primitives.Doubles.copyOf([D, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2083336794451136
Suporte: 0.00300963
Posição da Sugestão: 1
**************************
Chamada: com.google.common.primitives.Doubles.copyOf([D, I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2083336794451136
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.primitives.Doubles$LexicographicalComparator.compare([D, [D) ************************
*Commit: commit 963e8a39ace0e027d2544a5c19c8ca75ee3334c6 1344891566 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.Math.min(I, I)
com.google.common.primitives.Doubles.compare(D, D)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.primitives.Doubles.compare(D, D)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Math.min(I, I)
Também chamam:
java.lang.System.arraycopy(java.lang.Object, I, java.lang.Object, I, I)
Confiança: 0.25714314194293464
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.primitives.Doubles.toArray(java.util.Collection) ************************
*Commit: commit 963e8a39ace0e027d2544a5c19c8ca75ee3334c6 1344891566 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.primitives.Doubles$DoubleArrayAsList.toDoubleArray()
java.util.Collection.toArray()
com.google.common.base.Preconditions.checkNotNull(java.lang.Object)
java.lang.Number.doubleValue()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Collection.toArray()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkNotNull(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.toArray()
Também chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.Object)
Confiança: 0.6153852052063564
Suporte: 0.00160514
Posição da Sugestão: 1
**************************
Chamada: java.lang.Number.doubleValue()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.primitives.Doubles.join(java.lang.String, [D) ************************
*Commit: commit 963e8a39ace0e027d2544a5c19c8ca75ee3334c6 1344891566 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
java.lang.StringBuilder.append(D)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(D)
java.lang.StringBuilder.toString()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.StringBuilder.append(D)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
Confiança: 0.375
Suporte: 0.00300963
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(D)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.8780487508387711
Suporte: 0.00722311
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.toString()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.primitives.Doubles$DoubleArrayAsList.toString() ************************
*Commit: commit 963e8a39ace0e027d2544a5c19c8ca75ee3334c6 1344891566 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.primitives.Doubles$DoubleArrayAsList.size()
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(D)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(D)
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.toString()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.StringBuilder.append(C)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(D)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.8139531110006131
Suporte: 0.00702247
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(D)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00401284
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(C)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00461477
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.primitives.Doubles$DoubleArrayAsList.subList(I, I) ************************
*Commit: commit 963e8a39ace0e027d2544a5c19c8ca75ee3334c6 1344891566 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.primitives.Doubles$DoubleArrayAsList.size()
com.google.common.base.Preconditions.checkPositionIndexes(I, I, I)
java.util.Collections.emptyList()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkPositionIndexes(I, I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collections.emptyList()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkPositionIndexes(I, I, I)
Também chamam:
java.util.Collections.emptyList()
Confiança: 0.5333346624003614
Suporte: 0.00160514
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.primitives.Floats.min([F) ************************
*Commit: commit 963e8a39ace0e027d2544a5c19c8ca75ee3334c6 1344891566 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkArgument(Z)
java.lang.Math.min(F, F)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.Math.min(F, F)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z)
Também chamam:
java.util.Iterator.next()
Confiança: 0.07608659143728567
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.primitives.Floats.toArray(java.util.Collection) ************************
*Commit: commit 963e8a39ace0e027d2544a5c19c8ca75ee3334c6 1344891566 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.primitives.Floats$FloatArrayAsList.toFloatArray()
java.util.Collection.toArray()
com.google.common.base.Preconditions.checkNotNull(java.lang.Object)
java.lang.Number.floatValue()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Collection.toArray()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkNotNull(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.toArray()
Também chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.Object)
Confiança: 0.6153852052063564
Suporte: 0.00160514
Posição da Sugestão: 1
**************************
Chamada: java.lang.Number.floatValue()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.primitives.Floats.join(java.lang.String, [F) ************************
*Commit: commit 963e8a39ace0e027d2544a5c19c8ca75ee3334c6 1344891566 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
java.lang.StringBuilder.append(F)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(F)
java.lang.StringBuilder.toString()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.StringBuilder.append(F)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
Confiança: 0.375
Suporte: 0.00300963
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(F)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.8780487508387711
Suporte: 0.00722311
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.toString()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.primitives.Floats.max([F) ************************
*Commit: commit 963e8a39ace0e027d2544a5c19c8ca75ee3334c6 1344891566 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkArgument(Z)
java.lang.Math.max(F, F)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.Math.max(F, F)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z)
Também chamam:
java.util.Iterator.next()
Confiança: 0.07608659143728567
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.primitives.Floats.ensureCapacity([F, I, I) ************************
*Commit: commit 963e8a39ace0e027d2544a5c19c8ca75ee3334c6 1344891566 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.primitives.Floats.copyOf([F, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2083336794451136
Suporte: 0.00300963
Posição da Sugestão: 1
**************************
Chamada: com.google.common.primitives.Floats.copyOf([F, I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2083336794451136
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.primitives.Floats$LexicographicalComparator.compare([F, [F) ************************
*Commit: commit 963e8a39ace0e027d2544a5c19c8ca75ee3334c6 1344891566 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.Math.min(I, I)
com.google.common.primitives.Floats.compare(F, F)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.primitives.Floats.compare(F, F)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Math.min(I, I)
Também chamam:
java.lang.System.arraycopy(java.lang.Object, I, java.lang.Object, I, I)
Confiança: 0.25714314194293464
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.primitives.Floats.copyOf([F, I) ************************
*Commit: commit 963e8a39ace0e027d2544a5c19c8ca75ee3334c6 1344891566 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.Math.min(I, I)
java.lang.System.arraycopy(java.lang.Object, I, java.lang.Object, I, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.System.arraycopy(java.lang.Object, I, java.lang.Object, I, I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Math.min(I, I)
Também chamam:
java.lang.System.arraycopy(java.lang.Object, I, java.lang.Object, I, I)
Confiança: 0.25714314194293464
Suporte: 0.00180578
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.primitives.Floats$FloatArrayAsList.subList(I, I) ************************
*Commit: commit 963e8a39ace0e027d2544a5c19c8ca75ee3334c6 1344891566 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.primitives.Floats$FloatArrayAsList.size()
com.google.common.base.Preconditions.checkPositionIndexes(I, I, I)
java.util.Collections.emptyList()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkPositionIndexes(I, I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collections.emptyList()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkPositionIndexes(I, I, I)
Também chamam:
java.util.Collections.emptyList()
Confiança: 0.5333346624003614
Suporte: 0.00160514
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.primitives.Floats$FloatArrayAsList.toString() ************************
*Commit: commit 963e8a39ace0e027d2544a5c19c8ca75ee3334c6 1344891566 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.primitives.Floats$FloatArrayAsList.size()
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(F)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(F)
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.toString()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.StringBuilder.append(C)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(F)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.8139531110006131
Suporte: 0.00702247
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(F)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00401284
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(C)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00461477
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.base.CaseFormat.convert(com.google.common.base.CaseFormat, java.lang.String) ************************
*Commit: commit fa58649127265dd91f3b2b947b4fc27a7fd89c59 1345523458 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.CharMatcher.indexIn(java.lang.CharSequence, I)
java.lang.String.length()
java.lang.String.length()
java.lang.String.substring(I, I)
com.google.common.base.CaseFormat.normalizeFirstWord(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
java.lang.String.substring(I, I)
com.google.common.base.CaseFormat.normalizeWord(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
java.lang.String.length()
com.google.common.base.CaseFormat.normalizeFirstWord(java.lang.String)
java.lang.String.substring(I)
com.google.common.base.CaseFormat.normalizeWord(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.String.length()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.length()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.5121950033550847
Suporte: 0.00421348
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.2926825117427963
Suporte: 0.0024077
Posição da Sugestão: 2
**************************
Chamada: java.lang.String.substring(I, I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.5121950033550847
Suporte: 0.00421348
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.2926825117427963
Suporte: 0.0024077
Posição da Sugestão: 2
**************************
Chamada: com.google.common.base.CaseFormat.normalizeFirstWord(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.substring(I, I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00180578
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.CaseFormat.normalizeWord(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.0024077
Posição da Sugestão: 1
**************************
Chamada: java.lang.String.length()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.0024077
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.CaseFormat.normalizeFirstWord(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.5121950033550847
Suporte: 0.00421348
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.2926825117427963
Suporte: 0.0024077
Posição da Sugestão: 2
**************************
Chamada: java.lang.String.substring(I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.CaseFormat.normalizeWord(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.0024077
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.util.concurrent.Futures$CombinedFuture.setOneValue(I, java.util.concurrent.Future) ************************
*Commit: commit 595d06ebec81b7b695e557f57f5f754e06d390db 1345765406 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.util.concurrent.AbstractFuture.isDone()
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
java.util.concurrent.Future.isDone()
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
com.google.common.util.concurrent.Uninterruptibles.getUninterruptibly(java.util.concurrent.Future)
com.google.common.base.Optional.fromNullable(null)
java.util.List.set(I, com.google.common.base.Optional)
com.google.common.util.concurrent.AbstractFuture.cancel(Z)
java.lang.Throwable.getCause()
com.google.common.util.concurrent.AbstractFuture.setException(java.lang.Throwable)
com.google.common.util.concurrent.AbstractFuture.setException(java.lang.Throwable)
com.google.common.util.concurrent.AbstractFuture.setException(java.lang.Throwable)
java.util.concurrent.atomic.AtomicInteger.decrementAndGet()
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
com.google.common.util.concurrent.Futures$FutureCombiner.combine(java.util.List)
com.google.common.util.concurrent.AbstractFuture.set(com.google.common.util.concurrent.Futures$CombinedFuture$C)
com.google.common.util.concurrent.AbstractFuture.isDone()
com.google.common.base.Preconditions.checkState(Z)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.Future.isDone()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5217378114185539
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.26086890570927695
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.26086890570927695
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.util.concurrent.Uninterruptibles.getUninterruptibly(java.util.concurrent.Future)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5217378114185539
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.26086890570927695
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.26086890570927695
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: com.google.common.base.Optional.fromNullable(null)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.util.concurrent.Uninterruptibles.getUninterruptibly(java.util.concurrent.Future)
Também chamam:
java.lang.Throwable.getCause()
Confiança: 0.7499968850069153
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: java.util.List.set(I, com.google.common.base.Optional)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.util.concurrent.AbstractFuture.cancel(Z)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Throwable.getCause()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.util.concurrent.AbstractFuture.setException(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.util.concurrent.AbstractFuture.setException(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.util.concurrent.AbstractFuture.setException(java.lang.Throwable)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicInteger.decrementAndGet()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.util.concurrent.Futures$FutureCombiner.combine(java.util.List)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5217378114185539
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.26086890570927695
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.26086890570927695
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: com.google.common.util.concurrent.AbstractFuture.set(com.google.common.util.concurrent.Futures$CombinedFuture$C)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.util.concurrent.AbstractFuture.isDone()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkState(Z)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.util.concurrent.Futures$CombinedFuture.CombinedFuture(com.google.common.collect.ImmutableCollection, Z, java.util.concurrent.Executor, com.google.common.util.concurrent.Futures$FutureCombiner) ************************
*Commit: commit 595d06ebec81b7b695e557f57f5f754e06d390db 1345765406 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Collection.size()
java.util.Collection.size()
com.google.common.collect.Lists.newArrayListWithCapacity(I)
com.google.common.util.concurrent.Futures$CombinedFuture.init(java.util.concurrent.Executor)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Collection.size()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Collection.clear()
Confiança: 0.1694912104342831
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Iterator.next()
Confiança: 0.10169455731168535
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Lists.newArrayListWithCapacity(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Collection.clear()
Confiança: 0.1694912104342831
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Iterator.next()
Confiança: 0.10169455731168535
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: com.google.common.util.concurrent.Futures$CombinedFuture.init(java.util.concurrent.Executor)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.util.concurrent.Futures$CombinedFuture.init(java.util.concurrent.Executor) ************************
*Commit: commit 595d06ebec81b7b695e557f57f5f754e06d390db 1345765406 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.util.concurrent.MoreExecutors.sameThreadExecutor()
com.google.common.util.concurrent.AbstractFuture.addListener(java.lang.Runnable, java.util.concurrent.Executor)
com.google.common.collect.ImmutableCollection.isEmpty()
com.google.common.collect.ImmutableList.of()
com.google.common.util.concurrent.Futures$FutureCombiner.combine(java.util.List)
com.google.common.util.concurrent.AbstractFuture.set(com.google.common.util.concurrent.Futures$CombinedFuture$C)
java.util.Collection.size()
java.util.List.add(com.google.common.base.Optional)
com.google.common.util.concurrent.ListenableFuture.addListener(java.lang.Runnable, java.util.concurrent.Executor)
com.google.common.util.concurrent.Futures$CombinedFuture.setOneValue(I, java.util.concurrent.Future)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.util.concurrent.AbstractFuture.addListener(java.lang.Runnable, java.util.concurrent.Executor)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableCollection.isEmpty()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableList.of()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.util.concurrent.Futures$FutureCombiner.combine(java.util.List)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.util.concurrent.AbstractFuture.set(com.google.common.util.concurrent.Futures$CombinedFuture$C)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.add(com.google.common.base.Optional)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Collection.clear()
Confiança: 0.1694912104342831
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Iterator.next()
Confiança: 0.10169455731168535
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: com.google.common.util.concurrent.ListenableFuture.addListener(java.lang.Runnable, java.util.concurrent.Executor)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.util.concurrent.Futures$CombinedFuture.setOneValue(I, java.util.concurrent.Future)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.reflect.ClassPath.getClasses() ************************
*Commit: commit e0dfd519ba1f707f517e5423634371f2f15fcb2b 1346179194 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableSet.builder()
com.google.common.reflect.ClassPath.getClassPathEntries(java.lang.ClassLoader)
com.google.common.collect.ImmutableMap.entrySet()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.reflect.ClassPath.readClassesFrom(java.net.URI, java.lang.ClassLoader)
com.google.common.collect.ImmutableSet$Builder.addAll(java.lang.Iterable)
com.google.common.collect.ImmutableSet$Builder.build()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.reflect.ClassPath.getClassPathEntries(java.lang.ClassLoader)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableMap.entrySet()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 1
**************************
Chamada: com.google.common.reflect.ClassPath.readClassesFrom(java.net.URI, java.lang.ClassLoader)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.0891091942678931
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.ImmutableSet$Builder.addAll(java.lang.Iterable)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableSet$Builder.build()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.reflect.ClassPath.getClassName(java.lang.String) ************************
*Commit: commit e0dfd519ba1f707f517e5423634371f2f15fcb2b 1346179194 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.String.length()
java.lang.String.length()
java.lang.String.substring(I, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.String.length()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.5121950033550847
Suporte: 0.00421348
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.2926825117427963
Suporte: 0.0024077
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.length()
Confiança: 0.26829250503262697
Suporte: 0.00220706
Posição da Sugestão: 3
**************************
Chamada: java.lang.String.substring(I, I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.5121950033550847
Suporte: 0.00421348
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.2926825117427963
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.length()
Confiança: 0.26829250503262697
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.StringBuilder.append(C)
Confiança: 0.24390249832245767
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.toString()
Confiança: 0.24390249832245767
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.reflect.ClassPath$ClassInfo.ClassInfo(java.lang.String, java.lang.ClassLoader) ************************
*Commit: commit e0dfd519ba1f707f517e5423634371f2f15fcb2b 1346179194 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
com.google.common.base.Preconditions.checkNotNull(java.lang.ClassLoader)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkNotNull(java.lang.ClassLoader)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
Confiança: 0.375
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.String.length()
Confiança: 0.27499975079993216
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.reflect.ClassPath.from(java.lang.ClassLoader) ************************
*Commit: commit 7eefee3cd54fa686e617f1446e1b329c5a23cf24 1346262604 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableSet.builder()
com.google.common.reflect.ClassPath.getClassPathEntries(java.lang.ClassLoader)
com.google.common.collect.ImmutableMap.entrySet()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.reflect.ClassPath.readClassesFrom(java.net.URI, java.lang.ClassLoader)
com.google.common.collect.ImmutableSet$Builder.addAll(java.lang.Iterable)
com.google.common.collect.ImmutableSet$Builder.build()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.reflect.ClassPath.getClassPathEntries(java.lang.ClassLoader)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableMap.entrySet()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 1
**************************
Chamada: com.google.common.reflect.ClassPath.readClassesFrom(java.net.URI, java.lang.ClassLoader)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.0891091942678931
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.ImmutableSet$Builder.addAll(java.lang.Iterable)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableSet$Builder.build()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.reflect.ClassPath.getClasses(java.lang.String) ************************
*Commit: commit 7eefee3cd54fa686e617f1446e1b329c5a23cf24 1346262604 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
com.google.common.collect.ImmutableSet.builder()
com.google.common.reflect.ClassPath$ClassInfo.getPackageName()
java.lang.String.equals(java.lang.Object)
com.google.common.collect.ImmutableSet$Builder.add(com.google.common.reflect.ClassPath$ClassInfo)
com.google.common.collect.ImmutableSet$Builder.build()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableSet.builder()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
Confiança: 0.375
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.String.length()
Confiança: 0.27499975079993216
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Chamada: com.google.common.reflect.ClassPath$ClassInfo.getPackageName()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.equals(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableSet$Builder.add(com.google.common.reflect.ClassPath$ClassInfo)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableSet$Builder.build()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.reflect.Parameter.getDeclaredAnnotations() ************************
*Commit: commit b84265625c1f685c855cca2458ee99f418f2845d 1346278351 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.List.size()
com.google.common.collect.ImmutableCollection.toArray([Ljava.lang.annotation.Annotation;)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableCollection.toArray([Ljava.lang.annotation.Annotation;)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.iterator()
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
java.util.List.get(I)
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
java.util.List.get(I)
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.reflect.ClassPath.getClassesRecursive(java.lang.String) ************************
*Commit: commit 7603bab156d498339a2468d24c2917e7ee58f72e 1346344970 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
com.google.common.collect.ImmutableSet.builder()
com.google.common.reflect.ClassPath$ClassInfo.getName()
java.lang.String.startsWith(java.lang.String)
com.google.common.collect.ImmutableSet$Builder.add(com.google.common.reflect.ClassPath$ClassInfo)
com.google.common.collect.ImmutableSet$Builder.build()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableSet.builder()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
Confiança: 0.375
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.String.length()
Confiança: 0.27499975079993216
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Chamada: com.google.common.reflect.ClassPath$ClassInfo.getName()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.startsWith(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableSet$Builder.add(com.google.common.reflect.ClassPath$ClassInfo)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableSet$Builder.build()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: constructor ************************
*Commit: commit d024c5066fb410169350f8a62668d9fbf075a3e4 1346425874 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.reflect.Constructor.getDeclaringClass()
com.google.common.reflect.TypeToken.getRawType()
com.google.common.reflect.TypeToken.getRawType()
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
resolveType
getType
resolveInPlace
resolveInPlace
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.reflect.TypeToken.getRawType()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.reflect.TypeToken.getRawType()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Nenhuma sugestão fornecida.
**************************
Chamada: resolveType
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2083336794451136
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Chamada: getType
Nenhuma sugestão fornecida.
**************************
Chamada: resolveInPlace
Nenhuma sugestão fornecida.
**************************
Chamada: resolveInPlace
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: method ************************
*Commit: commit d024c5066fb410169350f8a62668d9fbf075a3e4 1346425874 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.reflect.Method.getDeclaringClass()
com.google.common.reflect.TypeToken.of(java.lang.Class)
com.google.common.reflect.TypeToken.isAssignableFrom(com.google.common.reflect.TypeToken)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
resolveType
getType
resolveInPlace
resolveInPlace
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.reflect.TypeToken.of(java.lang.Class)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.reflect.TypeToken.isAssignableFrom(com.google.common.reflect.TypeToken)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Nenhuma sugestão fornecida.
**************************
Chamada: resolveType
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2083336794451136
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Chamada: getType
Nenhuma sugestão fornecida.
**************************
Chamada: resolveInPlace
Nenhuma sugestão fornecida.
**************************
Chamada: resolveInPlace
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.testing.testers.MapCreationTester.getEntriesMultipleNullKeys() ************************
*Commit: commit ae758e0347c5ca9cee84c5738411852c4960bd2f 1346443410 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
createArrayWithNullKey
java.util.Map$Entry.getValue()
entry
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: entry
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.06818168946280408
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.testing.testers.MapPutAllTester.testPutAll_nullKeySupported() ************************
*Commit: commit ae758e0347c5ca9cee84c5738411852c4960bd2f 1346443410 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.testing.testers.MapPutAllTester.putAll(java.lang.Iterable)
java.util.List.get(I)
expectAdded
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: expectAdded
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.testing.testers.MapPutAllTester.testPutAll_nullValueSupported() ************************
*Commit: commit ae758e0347c5ca9cee84c5738411852c4960bd2f 1346443410 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.testing.testers.MapPutAllTester.putAll(java.lang.Iterable)
java.util.List.get(I)
expectAdded
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: expectAdded
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.testing.testers.MapPutAllTester.putAll(java.lang.Iterable) ************************
*Commit: commit ae758e0347c5ca9cee84c5738411852c4960bd2f 1346443410 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
java.util.Map.put(com.google.common.collect.testing.testers.MapPutAllTester$K, com.google.common.collect.testing.testers.MapPutAllTester$V)
getMap
putAll
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 1
**************************
Chamada: java.util.Map.put(com.google.common.collect.testing.testers.MapPutAllTester$K, com.google.common.collect.testing.testers.MapPutAllTester$V)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.0891091942678931
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Chamada: getMap
Nenhuma sugestão fornecida.
**************************
Chamada: putAll
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.testing.testers.MapPutAllTester.testPutAllSomePresentConcurrentWithEntrySetIteration() ************************
*Commit: commit ae758e0347c5ca9cee84c5738411852c4960bd2f 1346443410 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
getMap
entrySet
iterator
of
com.google.common.collect.testing.testers.MapPutAllTester.putAll(java.lang.Iterable)
java.util.Iterator.next()
fail
---------------- Chamadas de método adicionadas ---------------
Chamada: entrySet
Nenhuma sugestão fornecida.
**************************
Chamada: iterator
Nenhuma sugestão fornecida.
**************************
Chamada: of
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.testing.testers.MapPutAllTester.putAll(java.lang.Iterable)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
Nenhuma sugestão fornecida.
**************************
Chamada: fail
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.21621642251782006
Suporte: 0.00963082
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.1666668911713532
Suporte: 0.00742376
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.next()
Confiança: 0.12162182185553123
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Confiança: 0.10360374922826514
Suporte: 0.00461477
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.testing.testers.MapPutTester.testPutAbsentConcurrentWithEntrySetIteration() ************************
*Commit: commit ae758e0347c5ca9cee84c5738411852c4960bd2f 1346443410 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
getMap
entrySet
iterator
com.google.common.collect.testing.testers.MapPutTester.put(java.util.Map$Entry)
java.util.Iterator.next()
fail
---------------- Chamadas de método adicionadas ---------------
Chamada: entrySet
Nenhuma sugestão fornecida.
**************************
Chamada: iterator
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.testing.testers.MapPutTester.put(java.util.Map$Entry)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
Nenhuma sugestão fornecida.
**************************
Chamada: fail
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.21621642251782006
Suporte: 0.00963082
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.1666668911713532
Suporte: 0.00742376
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.next()
Confiança: 0.12162182185553123
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Confiança: 0.10360374922826514
Suporte: 0.00461477
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.testing.testers.MapPutTester.testPutAbsentConcurrentWithKeySetIteration() ************************
*Commit: commit ae758e0347c5ca9cee84c5738411852c4960bd2f 1346443410 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
getMap
keySet
iterator
com.google.common.collect.testing.testers.MapPutTester.put(java.util.Map$Entry)
java.util.Iterator.next()
fail
---------------- Chamadas de método adicionadas ---------------
Chamada: keySet
Nenhuma sugestão fornecida.
**************************
Chamada: iterator
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.testing.testers.MapPutTester.put(java.util.Map$Entry)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
Nenhuma sugestão fornecida.
**************************
Chamada: fail
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.21621642251782006
Suporte: 0.00963082
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.1666668911713532
Suporte: 0.00742376
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.next()
Confiança: 0.12162182185553123
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Confiança: 0.10360374922826514
Suporte: 0.00461477
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.testing.testers.MapPutTester.testPutAbsentConcurrentWithValueIteration() ************************
*Commit: commit ae758e0347c5ca9cee84c5738411852c4960bd2f 1346443410 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
getMap
values
iterator
com.google.common.collect.testing.testers.MapPutTester.put(java.util.Map$Entry)
java.util.Iterator.next()
fail
---------------- Chamadas de método adicionadas ---------------
Chamada: values
Nenhuma sugestão fornecida.
**************************
Chamada: iterator
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.testing.testers.MapPutTester.put(java.util.Map$Entry)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
Nenhuma sugestão fornecida.
**************************
Chamada: fail
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.21621642251782006
Suporte: 0.00963082
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.1666668911713532
Suporte: 0.00742376
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.next()
Confiança: 0.12162182185553123
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Confiança: 0.10360374922826514
Suporte: 0.00461477
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.testing.testers.MapPutTester.put(java.util.Map$Entry) ************************
*Commit: commit ae758e0347c5ca9cee84c5738411852c4960bd2f 1346443410 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
getMap
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
put
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 1
**************************
Chamada: put
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.0891091942678931
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.reflect.ClassPath.getTopLevelClasses(java.lang.String) ************************
*Commit: commit fe2df24495ad435f4ae0012e0f0aca8a5f09346f 1347582648 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
com.google.common.collect.ImmutableSet.builder()
com.google.common.reflect.ClassPath$ClassInfo.getPackageName()
java.lang.String.equals(java.lang.Object)
com.google.common.collect.ImmutableSet$Builder.add(com.google.common.reflect.ClassPath$ClassInfo)
com.google.common.collect.ImmutableSet$Builder.build()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableSet.builder()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
Confiança: 0.375
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.String.length()
Confiança: 0.27499975079993216
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Chamada: com.google.common.reflect.ClassPath$ClassInfo.getPackageName()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.equals(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableSet$Builder.add(com.google.common.reflect.ClassPath$ClassInfo)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableSet$Builder.build()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.reflect.ClassPath.getTopLevelClassesRecursive(java.lang.String) ************************
*Commit: commit fe2df24495ad435f4ae0012e0f0aca8a5f09346f 1347582648 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
com.google.common.collect.ImmutableSet.builder()
com.google.common.reflect.ClassPath$ClassInfo.getName()
java.lang.String.startsWith(java.lang.String)
com.google.common.collect.ImmutableSet$Builder.add(com.google.common.reflect.ClassPath$ClassInfo)
com.google.common.collect.ImmutableSet$Builder.build()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableSet.builder()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
Confiança: 0.375
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.String.length()
Confiança: 0.27499975079993216
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Chamada: com.google.common.reflect.ClassPath$ClassInfo.getName()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.startsWith(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableSet$Builder.add(com.google.common.reflect.ClassPath$ClassInfo)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableSet$Builder.build()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.AbstractRangeSet.toString() ************************
*Commit: commit b59f363f5a3d8ce18637f4ad1b53a559ad2c5643 1348013274 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.StringBuilder.append(C)
asRanges
java.lang.StringBuilder.append(java.lang.Object)
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.toString()
---------------- Chamadas de método adicionadas ---------------
Chamada: asRanges
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.8139531110006131
Suporte: 0.00702247
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.Object)
Também chamam:
java.lang.StringBuilder.append(C)
Confiança: 0.6153852052063564
Suporte: 0.00160514
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00461477
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.AbstractRangeSet$StandardComplement.createAsRanges() ************************
*Commit: commit b59f363f5a3d8ce18637f4ad1b53a559ad2c5643 1348013274 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
asRanges
iterator
com.google.common.collect.Cut.belowAll()
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
com.google.common.collect.Cut.aboveAll()
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
com.google.common.collect.AbstractIterator.endOfData()
null.iterator()
com.google.common.collect.Iterators.size(java.util.Iterator)
---------------- Chamadas de método adicionadas ---------------
Chamada: iterator
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.belowAll()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7087362667937666
Suporte: 0.0292937
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.43835705288167764
Suporte: 0.0128411
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.2260277807173556
Suporte: 0.00662119
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.21621642251782006
Suporte: 0.00963082
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.1666668911713532
Suporte: 0.00742376
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Cut.aboveAll()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.AbstractIterator.endOfData()
Nenhuma sugestão fornecida.
**************************
Chamada: null.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Iterators.size(java.util.Iterator)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Ordering.leastOf(java.util.Iterator, I) ************************
*Commit: commit c49086946f6bc82689d6b1d273de4e7e02091d7f 1348505989 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.util.Iterator)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
java.util.Iterator.hasNext()
com.google.common.collect.ImmutableList.of()
java.util.Iterator.next()
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.collect.Ordering.max(com.google.common.collect.Ordering$(Ljava/util/Iterator;I)Ljava/util/List;$E, com.google.common.collect.Ordering$(Ljava/util/Iterator;I)Ljava/util/List;$E)
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.collect.Ordering.compare(com.google.common.collect.Ordering$T, com.google.common.collect.Ordering$T)
com.google.common.collect.Ordering.partition([Ljava.lang.Object;, I, I, I)
java.lang.Math.max(I, I)
com.google.common.collect.Ordering.max(com.google.common.collect.Ordering$(Ljava/util/Iterator;I)Ljava/util/List;$E, com.google.common.collect.Ordering$(Ljava/util/Iterator;I)Ljava/util/List;$E)
java.util.Arrays.sort([Ljava.lang.Object;, I, I, java.util.Comparator)
java.lang.Math.min(I, I)
com.google.common.collect.ObjectArrays.arraysCopyOf([Ljava.lang.Object;, I)
java.util.Arrays.asList([Ljava.lang.Object;)
java.util.Collections.unmodifiableList(java.util.List)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.util.Iterator)
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.7647079518368999
Suporte: 0.00260835
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2083336794451136
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.ImmutableList.of()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.util.Iterator)
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 1.0
Suporte: 0.00260835
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.next()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.43835705288167764
Suporte: 0.0128411
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.2260277807173556
Suporte: 0.00662119
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.21621642251782006
Suporte: 0.00963082
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.1666668911713532
Suporte: 0.00742376
Posição da Sugestão: 0
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.util.Iterator)
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 1.0
Suporte: 0.00260835
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Ordering.max(com.google.common.collect.Ordering$(Ljava/util/Iterator;I)Ljava/util/List;$E, com.google.common.collect.Ordering$(Ljava/util/Iterator;I)Ljava/util/List;$E)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.43835705288167764
Suporte: 0.0128411
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.2260277807173556
Suporte: 0.00662119
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.Iterator.next()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.2222216069140944
Suporte: 0.00120385
Posição da Sugestão: 4
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.util.Iterator)
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 1.0
Suporte: 0.00260835
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Ordering.compare(com.google.common.collect.Ordering$T, com.google.common.collect.Ordering$T)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.43835705288167764
Suporte: 0.0128411
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.2260277807173556
Suporte: 0.00662119
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.2222216069140944
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.21621642251782006
Suporte: 0.00963082
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Ordering.partition([Ljava.lang.Object;, I, I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Math.max(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Ordering.max(com.google.common.collect.Ordering$(Ljava/util/Iterator;I)Ljava/util/List;$E, com.google.common.collect.Ordering$(Ljava/util/Iterator;I)Ljava/util/List;$E)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Arrays.sort([Ljava.lang.Object;, I, I, java.util.Comparator)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Math.min(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ObjectArrays.arraysCopyOf([Ljava.lang.Object;, I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Math.min(I, I)
Também chamam:
java.lang.System.arraycopy(java.lang.Object, I, java.lang.Object, I, I)
Confiança: 0.25714314194293464
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Chamada: java.util.Arrays.asList([Ljava.lang.Object;)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collections.unmodifiableList(java.util.List)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Multisets.sum(com.google.common.collect.Multiset, com.google.common.collect.Multiset) ************************
*Commit: commit 515808097d372fbc3cbb1ea8a42097722ab86707 1348508124 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Multiset)
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Multiset)
com.google.common.collect.Multiset.contains(java.lang.Object)
com.google.common.collect.Multiset.contains(java.lang.Object)
java.util.Collection.isEmpty()
java.util.Collection.isEmpty()
java.util.Collection.size()
java.util.Collection.size()
com.google.common.collect.Multiset.count(java.lang.Object)
com.google.common.collect.Multiset.count(java.lang.Object)
com.google.common.collect.Multiset.elementSet()
com.google.common.collect.Multiset.elementSet()
com.google.common.collect.Sets.union(java.util.Set, java.util.Set)
com.google.common.collect.Multiset.entrySet()
java.util.Set.iterator()
com.google.common.collect.Multiset.entrySet()
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.collect.Multiset$Entry.getElement()
com.google.common.collect.Multiset$Entry.getCount()
com.google.common.collect.Multiset.count(java.lang.Object)
com.google.common.collect.Multisets.immutableEntry(com.google.common.collect.Multisets$(Lcom/google/common/collect/Multiset;Lcom/google/common/collect/Multiset;)Lcom/google/common/collect/Multiset;$E, I)
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.collect.Multiset$Entry.getElement()
com.google.common.collect.Multiset.contains(java.lang.Object)
com.google.common.collect.Multiset$Entry.getCount()
com.google.common.collect.Multisets.immutableEntry(com.google.common.collect.Multisets$(Lcom/google/common/collect/Multiset;Lcom/google/common/collect/Multiset;)Lcom/google/common/collect/Multiset;$E, I)
com.google.common.collect.AbstractIterator.endOfData()
com.google.common.collect.AbstractMultiset.elementSet()
java.util.Set.size()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Multiset)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Multiset.contains(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Multiset.contains(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.isEmpty()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.isEmpty()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.size()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Collection.clear()
Confiança: 0.1694912104342831
Suporte: 0.00200642
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Iterator.next()
Confiança: 0.10169455731168535
Suporte: 0.00120385
Posição da Sugestão: 2
**************************
Chamada: com.google.common.collect.Multiset.count(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Collection.clear()
Confiança: 0.1694912104342831
Suporte: 0.00200642
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.util.Collection.size()
Também chamam:
java.util.Iterator.next()
Confiança: 0.10169455731168535
Suporte: 0.00120385
Posição da Sugestão: 2
**************************
Chamada: com.google.common.collect.Multiset.count(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multiset.count(java.lang.Object)
Também chamam:
com.google.common.collect.Multiset$Entry.getCount()
Confiança: 0.29629670650171486
Suporte: 0.00160514
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Multiset.elementSet()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multiset.count(java.lang.Object)
Também chamam:
com.google.common.collect.Multiset$Entry.getCount()
Confiança: 0.29629670650171486
Suporte: 0.00160514
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Multiset.elementSet()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multiset.elementSet()
Também chamam:
java.util.Set.size()
Confiança: 0.4117640160543667
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Sets.union(java.util.Set, java.util.Set)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multiset.elementSet()
Também chamam:
java.util.Set.size()
Confiança: 0.4117640160543667
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Multiset.entrySet()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Set.iterator()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multiset.entrySet()
Também chamam:
com.google.common.collect.Multiset$Entry.getElement()
Confiança: 0.6
Suporte: 0.00300963
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Multiset.entrySet()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.6374957947593357
Suporte: 0.0102327
Posição da Sugestão: 1
**************************
Chamada: java.util.Set.iterator()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multiset.entrySet()
com.google.common.collect.Multiset.entrySet()
Também chamam:
com.google.common.collect.Multiset$Entry.getElement()
Confiança: 1.0
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.6374957947593357
Suporte: 0.0102327
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.9285710047620912
Suporte: 0.00782504
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Multiset$Entry.getElement()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.7179490456278818
Suporte: 0.00561798
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5490222521915037
Suporte: 0.00561798
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.4615388547534581
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.43835705288167764
Suporte: 0.0128411
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.41025604980933
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Multiset$Entry.getCount()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
com.google.common.collect.Multiset$Entry.getElement()
Também chamam:
com.google.common.collect.Multiset$Entry.getCount()
Confiança: 0.8888901195051445
Suporte: 0.00160514
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Multiset.count(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multiset$Entry.getCount()
Também chamam:
com.google.common.collect.Multiset$Entry.getElement()
Confiança: 0.2058817062283874
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Multisets.immutableEntry(com.google.common.collect.Multisets$(Lcom/google/common/collect/Multiset;Lcom/google/common/collect/Multiset;)Lcom/google/common/collect/Multiset;$E, I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multiset$Entry.getElement()
com.google.common.collect.Multiset.count(java.lang.Object)
Também chamam:
com.google.common.collect.Multiset$Entry.getCount()
Confiança: 0.6999980063994578
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.9285710047620912
Suporte: 0.00782504
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Multiset$Entry.getElement()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.7179490456278818
Suporte: 0.00561798
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5490222521915037
Suporte: 0.00561798
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.4615388547534581
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.43835705288167764
Suporte: 0.0128411
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.41025604980933
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Multiset.contains(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
com.google.common.collect.Multiset$Entry.getElement()
Também chamam:
com.google.common.collect.Multiset$Entry.getCount()
Confiança: 0.8888901195051445
Suporte: 0.00160514
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Multiset$Entry.getCount()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Multisets.immutableEntry(com.google.common.collect.Multisets$(Lcom/google/common/collect/Multiset;Lcom/google/common/collect/Multiset;)Lcom/google/common/collect/Multiset;$E, I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multiset$Entry.getCount()
Também chamam:
com.google.common.collect.Multiset$Entry.getElement()
Confiança: 0.2058817062283874
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.AbstractIterator.endOfData()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.AbstractMultiset.elementSet()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Set.size()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Multisets.difference(com.google.common.collect.Multiset, com.google.common.collect.Multiset) ************************
*Commit: commit 515808097d372fbc3cbb1ea8a42097722ab86707 1348508124 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Multiset)
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Multiset)
com.google.common.collect.Multiset.count(java.lang.Object)
com.google.common.collect.Multiset.count(java.lang.Object)
java.lang.Math.max(I, I)
entryIterator
transform
getElement
count
iterator
size
com.google.common.collect.Multiset.entrySet()
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.collect.Multiset$Entry.getElement()
com.google.common.collect.Multiset$Entry.getCount()
com.google.common.collect.Multiset.count(java.lang.Object)
java.lang.Math.max(I, I)
com.google.common.collect.Multisets.immutableEntry(com.google.common.collect.Multisets$(Lcom/google/common/collect/Multiset;Lcom/google/common/collect/Multiset;)Lcom/google/common/collect/Multiset;$E, I)
com.google.common.collect.AbstractIterator.endOfData()
com.google.common.collect.AbstractMultiset.elementSet()
java.util.Set.size()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Multiset)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Multiset.count(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Multiset.count(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multiset.count(java.lang.Object)
Também chamam:
com.google.common.collect.Multiset$Entry.getCount()
Confiança: 0.29629670650171486
Suporte: 0.00160514
Posição da Sugestão: 1
**************************
Chamada: java.lang.Math.max(I, I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multiset.count(java.lang.Object)
Também chamam:
com.google.common.collect.Multiset$Entry.getCount()
Confiança: 0.29629670650171486
Suporte: 0.00160514
Posição da Sugestão: 1
**************************
Chamada: entryIterator
Nenhuma sugestão fornecida.
**************************
Chamada: transform
Nenhuma sugestão fornecida.
**************************
Chamada: getElement
Nenhuma sugestão fornecida.
**************************
Chamada: count
Nenhuma sugestão fornecida.
**************************
Chamada: iterator
Nenhuma sugestão fornecida.
**************************
Chamada: size
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Multiset.entrySet()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Set.iterator()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multiset.entrySet()
Também chamam:
com.google.common.collect.Multiset$Entry.getElement()
Confiança: 0.6
Suporte: 0.00300963
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.6374957947593357
Suporte: 0.0102327
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.9285710047620912
Suporte: 0.00782504
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Multiset$Entry.getElement()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.7179490456278818
Suporte: 0.00561798
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5490222521915037
Suporte: 0.00561798
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.4615388547534581
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.43835705288167764
Suporte: 0.0128411
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.41025604980933
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Multiset$Entry.getCount()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
com.google.common.collect.Multiset$Entry.getElement()
Também chamam:
com.google.common.collect.Multiset$Entry.getCount()
Confiança: 0.8888901195051445
Suporte: 0.00160514
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Multiset.count(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multiset$Entry.getCount()
Também chamam:
com.google.common.collect.Multiset$Entry.getElement()
Confiança: 0.2058817062283874
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: java.lang.Math.max(I, I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multiset$Entry.getElement()
com.google.common.collect.Multiset.count(java.lang.Object)
Também chamam:
com.google.common.collect.Multiset$Entry.getCount()
Confiança: 0.6999980063994578
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Multiset.count(java.lang.Object)
Também chamam:
com.google.common.collect.Multiset$Entry.getCount()
Confiança: 0.29629670650171486
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Multisets.immutableEntry(com.google.common.collect.Multisets$(Lcom/google/common/collect/Multiset;Lcom/google/common/collect/Multiset;)Lcom/google/common/collect/Multiset;$E, I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.AbstractIterator.endOfData()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.AbstractMultiset.elementSet()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Set.size()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Multisets.union(com.google.common.collect.Multiset, com.google.common.collect.Multiset) ************************
*Commit: commit 3b5931ebc2b2e385cf7fa5925b97ba53377c70ec 1348509117 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Multiset)
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Multiset)
com.google.common.collect.Multiset.contains(java.lang.Object)
com.google.common.collect.Multiset.contains(java.lang.Object)
java.util.Collection.isEmpty()
java.util.Collection.isEmpty()
com.google.common.collect.Multiset.count(java.lang.Object)
com.google.common.collect.Multiset.count(java.lang.Object)
java.lang.Math.max(I, I)
com.google.common.collect.Multiset.elementSet()
com.google.common.collect.Multiset.elementSet()
com.google.common.collect.Sets.union(java.util.Set, java.util.Set)
com.google.common.collect.Multiset.entrySet()
java.util.Set.iterator()
com.google.common.collect.Multiset.entrySet()
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.collect.Multiset$Entry.getElement()
com.google.common.collect.Multiset$Entry.getCount()
com.google.common.collect.Multiset.count(java.lang.Object)
java.lang.Math.max(I, I)
com.google.common.collect.Multisets.immutableEntry(com.google.common.collect.Multisets$(Lcom/google/common/collect/Multiset;Lcom/google/common/collect/Multiset;)Lcom/google/common/collect/Multiset;$E, I)
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.collect.Multiset$Entry.getElement()
com.google.common.collect.Multiset.contains(java.lang.Object)
com.google.common.collect.Multiset$Entry.getCount()
com.google.common.collect.Multisets.immutableEntry(com.google.common.collect.Multisets$(Lcom/google/common/collect/Multiset;Lcom/google/common/collect/Multiset;)Lcom/google/common/collect/Multiset;$E, I)
com.google.common.collect.AbstractIterator.endOfData()
com.google.common.collect.AbstractMultiset.elementSet()
java.util.Set.size()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Multiset)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Multiset.contains(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Multiset.contains(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.isEmpty()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.isEmpty()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Multiset.count(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Multiset.count(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multiset.count(java.lang.Object)
Também chamam:
com.google.common.collect.Multiset$Entry.getCount()
Confiança: 0.29629670650171486
Suporte: 0.00160514
Posição da Sugestão: 1
**************************
Chamada: java.lang.Math.max(I, I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multiset.count(java.lang.Object)
Também chamam:
com.google.common.collect.Multiset$Entry.getCount()
Confiança: 0.29629670650171486
Suporte: 0.00160514
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Multiset.elementSet()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Multiset.elementSet()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multiset.elementSet()
Também chamam:
java.util.Set.size()
Confiança: 0.4117640160543667
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Sets.union(java.util.Set, java.util.Set)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multiset.elementSet()
Também chamam:
java.util.Set.size()
Confiança: 0.4117640160543667
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Multiset.entrySet()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Set.iterator()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multiset.entrySet()
Também chamam:
com.google.common.collect.Multiset$Entry.getElement()
Confiança: 0.6
Suporte: 0.00300963
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Multiset.entrySet()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.6374957947593357
Suporte: 0.0102327
Posição da Sugestão: 1
**************************
Chamada: java.util.Set.iterator()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multiset.entrySet()
com.google.common.collect.Multiset.entrySet()
Também chamam:
com.google.common.collect.Multiset$Entry.getElement()
Confiança: 1.0
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.6374957947593357
Suporte: 0.0102327
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.9285710047620912
Suporte: 0.00782504
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Multiset$Entry.getElement()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.7179490456278818
Suporte: 0.00561798
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5490222521915037
Suporte: 0.00561798
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.4615388547534581
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.43835705288167764
Suporte: 0.0128411
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.41025604980933
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Multiset$Entry.getCount()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
com.google.common.collect.Multiset$Entry.getElement()
Também chamam:
com.google.common.collect.Multiset$Entry.getCount()
Confiança: 0.8888901195051445
Suporte: 0.00160514
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Multiset.count(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multiset$Entry.getCount()
Também chamam:
com.google.common.collect.Multiset$Entry.getElement()
Confiança: 0.2058817062283874
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: java.lang.Math.max(I, I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multiset$Entry.getElement()
com.google.common.collect.Multiset.count(java.lang.Object)
Também chamam:
com.google.common.collect.Multiset$Entry.getCount()
Confiança: 0.6999980063994578
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Multisets.immutableEntry(com.google.common.collect.Multisets$(Lcom/google/common/collect/Multiset;Lcom/google/common/collect/Multiset;)Lcom/google/common/collect/Multiset;$E, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.9285710047620912
Suporte: 0.00782504
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Multiset$Entry.getElement()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.7179490456278818
Suporte: 0.00561798
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5490222521915037
Suporte: 0.00561798
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.4615388547534581
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.43835705288167764
Suporte: 0.0128411
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.41025604980933
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Multiset.contains(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
com.google.common.collect.Multiset$Entry.getElement()
Também chamam:
com.google.common.collect.Multiset$Entry.getCount()
Confiança: 0.8888901195051445
Suporte: 0.00160514
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Multiset$Entry.getCount()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Multisets.immutableEntry(com.google.common.collect.Multisets$(Lcom/google/common/collect/Multiset;Lcom/google/common/collect/Multiset;)Lcom/google/common/collect/Multiset;$E, I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multiset$Entry.getCount()
Também chamam:
com.google.common.collect.Multiset$Entry.getElement()
Confiança: 0.2058817062283874
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.AbstractIterator.endOfData()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.AbstractMultiset.elementSet()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Set.size()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Sets$CartesianSet.create(java.util.List) ************************
*Commit: commit 86aa9f060deed8a128608e1b16e25a8e188aba7e 1348681239 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.List.size()
com.google.common.collect.ImmutableSet.copyOf(java.util.Collection)
com.google.common.collect.ImmutableCollection.isEmpty()
com.google.common.collect.ImmutableSet.of()
com.google.common.collect.ImmutableList$Builder.add(com.google.common.collect.ImmutableSet)
com.google.common.collect.ImmutableList$Builder.build()
java.util.List.size()
java.util.List.get(I)
com.google.common.collect.ImmutableCollection.asList()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableSet.copyOf(java.util.Collection)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ImmutableCollection.isEmpty()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableSet.of()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableList$Builder.add(com.google.common.collect.ImmutableSet)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableList$Builder.build()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ImmutableCollection.asList()
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.CartesianList.lastIndexOf(java.lang.Object) ************************
*Commit: commit 86aa9f060deed8a128608e1b16e25a8e188aba7e 1348681239 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.List.size()
java.util.List.size()
java.util.List.iterator()
java.util.Iterator.next()
java.util.List.lastIndexOf(java.lang.Object)
java.util.List.size()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.List.size()
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 2
**************************
Chamada: java.util.List.iterator()
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 3
**************************
Chamada: java.util.Iterator.next()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.lastIndexOf(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.21621642251782006
Suporte: 0.00963082
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.1666668911713532
Suporte: 0.00742376
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.next()
Confiança: 0.12162182185553123
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Confiança: 0.10360374922826514
Suporte: 0.00461477
Posição da Sugestão: 0
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.CartesianList.contains(java.lang.Object) ************************
*Commit: commit 86aa9f060deed8a128608e1b16e25a8e188aba7e 1348681239 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.List.size()
java.util.List.size()
java.util.List.listIterator()
java.util.ListIterator.hasNext()
java.util.ListIterator.nextIndex()
java.util.List.get(I)
java.util.ListIterator.next()
java.util.List.contains(java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.List.size()
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 1
**************************
Chamada: java.util.List.listIterator()
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: java.util.ListIterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.ListIterator.nextIndex()
** Sugestões fornecidas **
Usuários que chamam:
java.util.ListIterator.hasNext()
Também chamam:
java.util.ListIterator.next()
Confiança: 0.6363624006597012
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.ListIterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: java.util.List.contains(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.CartesianList.create(java.util.List) ************************
*Commit: commit 86aa9f060deed8a128608e1b16e25a8e188aba7e 1348681239 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.List.size()
com.google.common.collect.ImmutableList.copyOf(java.util.Collection)
java.util.List.isEmpty()
com.google.common.collect.ImmutableList.of()
com.google.common.collect.ImmutableList$Builder.add(java.util.List)
com.google.common.collect.ImmutableList$Builder.build()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableList.copyOf(java.util.Collection)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.iterator()
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
java.util.List.get(I)
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
java.util.List.get(I)
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: java.util.List.isEmpty()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableList.of()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableList$Builder.add(java.util.List)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableList$Builder.build()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.CartesianList.CartesianList(com.google.common.collect.ImmutableList) ************************
*Commit: commit 86aa9f060deed8a128608e1b16e25a8e188aba7e 1348681239 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.List.size()
java.util.List.size()
java.util.List.size()
java.util.List.get(I)
java.util.List.size()
com.google.common.math.IntMath.checkedMultiply(I, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.List.size()
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 1
**************************
Chamada: java.util.List.size()
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: java.util.List.get(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: java.util.List.size()
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: com.google.common.math.IntMath.checkedMultiply(I, I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.iterator()
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
java.util.List.get(I)
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.CartesianList.indexOf(java.lang.Object) ************************
*Commit: commit 86aa9f060deed8a128608e1b16e25a8e188aba7e 1348681239 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.List.size()
java.util.List.size()
java.util.List.iterator()
java.util.Iterator.next()
java.util.List.indexOf(java.lang.Object)
java.util.List.size()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.List.size()
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 2
**************************
Chamada: java.util.List.iterator()
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 3
**************************
Chamada: java.util.Iterator.next()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.indexOf(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.21621642251782006
Suporte: 0.00963082
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.1666668911713532
Suporte: 0.00742376
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.next()
Confiança: 0.12162182185553123
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Confiança: 0.10360374922826514
Suporte: 0.00461477
Posição da Sugestão: 0
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.CartesianList.get(I) ************************
*Commit: commit 86aa9f060deed8a128608e1b16e25a8e188aba7e 1348681239 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.CartesianList.size()
com.google.common.base.Preconditions.checkElementIndex(I, I)
java.util.List.size()
com.google.common.collect.CartesianList$1.size()
com.google.common.base.Preconditions.checkElementIndex(I, I)
com.google.common.collect.CartesianList.getAxisIndexForProductIndex(I, I)
java.util.List.get(I)
java.util.List.get(I)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkElementIndex(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.CartesianList$1.size()
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.Preconditions.checkElementIndex(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.CartesianList.getAxisIndexForProductIndex(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.CartesianList.getAxisIndexForProductIndex(I, I) ************************
*Commit: commit 86aa9f060deed8a128608e1b16e25a8e188aba7e 1348681239 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.List.get(I)
java.util.List.size()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.List.size()
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Sets$CartesianSet.create(java.util.List) ************************
*Commit: commit 86aa9f060deed8a128608e1b16e25a8e188aba7e 1348681239 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.List.size()
com.google.common.collect.ImmutableSet.copyOf(java.util.Collection)
com.google.common.collect.ImmutableCollection.isEmpty()
com.google.common.collect.ImmutableSet.of()
com.google.common.collect.ImmutableList$Builder.add(com.google.common.collect.ImmutableSet)
com.google.common.collect.ImmutableList$Builder.build()
java.util.List.size()
java.util.List.get(I)
com.google.common.collect.ImmutableCollection.asList()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableSet.copyOf(java.util.Collection)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ImmutableCollection.isEmpty()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableSet.of()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableList$Builder.add(com.google.common.collect.ImmutableSet)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableList$Builder.build()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ImmutableCollection.asList()
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Maps.immutableEnumMap(java.util.Map) ************************
*Commit: commit 835a7397fabb05a764a8008f4151c97f821a29ef 1348762516 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.isEmpty()
com.google.common.collect.ImmutableMap.of()
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Maps$(Ljava/util/Map;)Lcom/google/common/collect/ImmutableMap;$K)
java.util.Map$Entry.getValue()
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Maps$(Ljava/util/Map;)Lcom/google/common/collect/ImmutableMap;$V)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableMap.of()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.isEmpty()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1842099050417082
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.isEmpty()
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z)
Confiança: 0.1578943916898379
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: java.util.Map.entrySet()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.5999987540027661
Suporte: 0.00963082
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Maps$(Ljava/util/Map;)Lcom/google/common/collect/ImmutableMap;$K)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7659567473791592
Suporte: 0.00722311
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Maps$(Ljava/util/Map;)Lcom/google/common/collect/ImmutableMap;$V)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.24999948083340776
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.19444394450589844
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.16666701277772816
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.12499974041670388
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableEnumMap.createKeySet() ************************
*Commit: commit 835a7397fabb05a764a8008f4151c97f821a29ef 1348762516 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.EnumMap.containsKey(java.lang.Object)
com.google.common.collect.ImmutableEnumMap.size()
java.util.EnumMap.keySet()
java.util.Set.iterator()
com.google.common.collect.Iterators.unmodifiableIterator(java.util.Iterator)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableEnumMap.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.EnumMap.keySet()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Set.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Iterators.unmodifiableIterator(java.util.Iterator)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.6374957947593357
Suporte: 0.0102327
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.5249990655020746
Suporte: 0.00842697
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Confiança: 0.48749890975242033
Suporte: 0.00782504
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.36249922125172884
Suporte: 0.00581862
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
java.util.Iterator.remove()
Confiança: 0.34999937700138306
Suporte: 0.00561798
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableEnumMap.createEntrySet() ************************
*Commit: commit 835a7397fabb05a764a8008f4151c97f821a29ef 1348762516 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.EnumMap.entrySet()
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.collect.Maps.immutableEntry(com.google.common.collect.ImmutableEnumMap$K, com.google.common.collect.ImmutableEnumMap$V)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Set.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.6374957947593357
Suporte: 0.0102327
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.9285710047620912
Suporte: 0.00782504
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.7179490456278818
Suporte: 0.00561798
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5490222521915037
Suporte: 0.00561798
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.4615388547534581
Suporte: 0.00361156
Posição da Sugestão: 3
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.7999986709329718
Suporte: 0.0024077
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.7999986709329718
Suporte: 0.0024077
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7083322084723834
Suporte: 0.00341091
Posição da Sugestão: 3
**************************
Chamada: com.google.common.collect.Maps.immutableEntry(com.google.common.collect.ImmutableEnumMap$K, com.google.common.collect.ImmutableEnumMap$V)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 1.0
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 1.0
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.8888873506185692
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.8888873506185692
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.next()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.8181834657870652
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Maps.immutableEnumMap(java.util.Map) ************************
*Commit: commit 835a7397fabb05a764a8008f4151c97f821a29ef 1348762516 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.isEmpty()
com.google.common.collect.ImmutableMap.of()
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Maps$(Ljava/util/Map;)Lcom/google/common/collect/ImmutableMap;$K)
java.util.Map$Entry.getValue()
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Maps$(Ljava/util/Map;)Lcom/google/common/collect/ImmutableMap;$V)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableMap.of()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.isEmpty()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1842099050417082
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.isEmpty()
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z)
Confiança: 0.1578943916898379
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: java.util.Map.entrySet()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.5999987540027661
Suporte: 0.00963082
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Maps$(Ljava/util/Map;)Lcom/google/common/collect/ImmutableMap;$K)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7659567473791592
Suporte: 0.00722311
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Maps$(Ljava/util/Map;)Lcom/google/common/collect/ImmutableMap;$V)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.24999948083340776
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.19444394450589844
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.16666701277772816
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.12499974041670388
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableRangeSet.rangeContaining(com.google.common.collect.ImmutableRangeSet$C) ************************
*Commit: commit b3b6b1d3ceb35de964d6403c5cc291c980f5478f 1349197797 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Cut.belowValue(com.google.common.collect.ImmutableRangeSet$C)
com.google.common.collect.Ordering.natural()
com.google.common.collect.SortedLists.binarySearch(java.util.List, com.google.common.base.Function, com.google.common.collect.Cut, java.util.Comparator, com.google.common.collect.SortedLists$KeyPresentBehavior, com.google.common.collect.SortedLists$KeyAbsentBehavior)
java.util.List.get(I)
com.google.common.collect.Range.contains(com.google.common.collect.ImmutableRangeSet$C)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Ordering.natural()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.SortedLists.binarySearch(java.util.List, com.google.common.base.Function, com.google.common.collect.Cut, java.util.Comparator, com.google.common.collect.SortedLists$KeyPresentBehavior, com.google.common.collect.SortedLists$KeyAbsentBehavior)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
java.util.Arrays.asList([Ljava.lang.Comparable;)
Confiança: 0.18867970660146702
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
com.google.common.collect.ImmutableSortedMultiset.copyOf(java.util.Comparator, java.lang.Iterable)
Confiança: 0.1320754184690615
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
com.google.common.collect.Ordering.natural()
Confiança: 0.1320754184690615
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
com.google.common.collect.ImmutableSortedSet.copyOf(java.util.Comparator, java.util.Collection)
Confiança: 0.1320754184690615
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Range.contains(com.google.common.collect.ImmutableRangeSet$C)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableRangeSet$ComplementRanges.get(I) ************************
*Commit: commit b3b6b1d3ceb35de964d6403c5cc291c980f5478f 1349197797 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkElementIndex(I, I)
com.google.common.collect.Cut.belowAll()
java.util.List.get(I)
java.util.List.get(I)
com.google.common.collect.Cut.aboveAll()
java.util.List.get(I)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Cut.belowAll()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Cut.aboveAll()
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableRangeSet.complement() ************************
*Commit: commit b3b6b1d3ceb35de964d6403c5cc291c980f5478f 1349197797 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableCollection.isEmpty()
com.google.common.collect.ImmutableRangeSet.all()
java.util.List.size()
java.util.List.get(I)
all
com.google.common.collect.Range.equals(java.lang.Object)
com.google.common.collect.ImmutableRangeSet.of()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableRangeSet.all()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 1
**************************
Chamada: all
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Range.equals(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableRangeSet.of()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableRangeSet$ComplementRanges.ComplementRanges() ************************
*Commit: commit b3b6b1d3ceb35de964d6403c5cc291c980f5478f 1349197797 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.List.get(I)
com.google.common.collect.Range.hasLowerBound()
com.google.common.collect.Iterables.getLast(java.lang.Iterable)
com.google.common.collect.Range.hasUpperBound()
java.util.List.size()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Range.hasLowerBound()
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Iterables.getLast(java.lang.Iterable)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Range.hasUpperBound()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableRangeSet.encloses(com.google.common.collect.Range) ************************
*Commit: commit b3b6b1d3ceb35de964d6403c5cc291c980f5478f 1349197797 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Ordering.natural()
com.google.common.collect.SortedLists.binarySearch(java.util.List, com.google.common.base.Function, com.google.common.collect.Cut, java.util.Comparator, com.google.common.collect.SortedLists$KeyPresentBehavior, com.google.common.collect.SortedLists$KeyAbsentBehavior)
java.util.List.get(I)
com.google.common.collect.Range.encloses(com.google.common.collect.Range)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.SortedLists.binarySearch(java.util.List, com.google.common.base.Function, com.google.common.collect.Cut, java.util.Comparator, com.google.common.collect.SortedLists$KeyPresentBehavior, com.google.common.collect.SortedLists$KeyAbsentBehavior)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
java.util.Arrays.asList([Ljava.lang.Comparable;)
Confiança: 0.18867970660146702
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
com.google.common.collect.ImmutableSortedMultiset.copyOf(java.util.Comparator, java.lang.Iterable)
Confiança: 0.1320754184690615
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
com.google.common.collect.Ordering.natural()
Confiança: 0.1320754184690615
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Ordering.natural()
Também chamam:
com.google.common.collect.ImmutableSortedSet.copyOf(java.util.Comparator, java.util.Collection)
Confiança: 0.1320754184690615
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Range.encloses(com.google.common.collect.Range)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ArrayTable.putAll(com.google.common.collect.Table) ************************
*Commit: commit 7a1afaf1673aceddb8eca2e34a04a3ead0c2ed34 1349198538 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Table.cellSet()
com.google.common.collect.Table$Cell.getRowKey()
com.google.common.collect.Table$Cell.getColumnKey()
com.google.common.collect.Table$Cell.getValue()
com.google.common.collect.ArrayTable.put(com.google.common.collect.ArrayTable$R, com.google.common.collect.ArrayTable$C, com.google.common.collect.ArrayTable$V)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Table$Cell.getRowKey()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Table.cellSet()
Também chamam:
com.google.common.collect.Table$Cell.getColumnKey()
Confiança: 0.3999993354664859
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Table$Cell.getColumnKey()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Table.cellSet()
com.google.common.collect.Table$Cell.getRowKey()
Também chamam:
com.google.common.collect.Table$Cell.getValue()
Confiança: 1.0
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Table$Cell.getValue()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Table.cellSet()
com.google.common.collect.Table$Cell.getColumnKey()
Também chamam:
com.google.common.collect.Table$Cell.getValue()
Confiança: 1.0
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ArrayTable.put(com.google.common.collect.ArrayTable$R, com.google.common.collect.ArrayTable$C, com.google.common.collect.ArrayTable$V)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.ArrayTable$CellSet.iterator() ************************
*Commit: commit 7a1afaf1673aceddb8eca2e34a04a3ead0c2ed34 1349198538 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ArrayTable$CellSet.size()
java.util.List.size()
java.util.List.size()
java.util.List.get(I)
java.util.List.get(I)
com.google.common.collect.ArrayTable.at(I, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.size()
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 1
**************************
Chamada: java.util.List.get(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: java.util.List.get(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ArrayTable.at(I, I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ArrayTable.ArrayTable(java.lang.Iterable, java.lang.Iterable) ************************
*Commit: commit 7a1afaf1673aceddb8eca2e34a04a3ead0c2ed34 1349198538 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableList.copyOf(java.lang.Iterable)
com.google.common.collect.ImmutableList.copyOf(java.lang.Iterable)
com.google.common.collect.ImmutableCollection.isEmpty()
com.google.common.base.Preconditions.checkArgument(Z)
com.google.common.collect.ImmutableCollection.isEmpty()
com.google.common.base.Preconditions.checkArgument(Z)
com.google.common.collect.ArrayTable.index(java.util.List)
com.google.common.collect.ArrayTable.index(java.util.List)
java.util.List.size()
java.util.List.size()
com.google.common.collect.ArrayTable.eraseAll()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableList.copyOf(java.lang.Iterable)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableCollection.isEmpty()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableCollection.isEmpty()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z)
Também chamam:
java.util.Iterator.next()
Confiança: 0.07608659143728567
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ArrayTable.index(java.util.List)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z)
Também chamam:
java.util.Iterator.next()
Confiança: 0.07608659143728567
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.ArrayTable.index(java.util.List)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.size()
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 2
**************************
Chamada: com.google.common.collect.ArrayTable.eraseAll()
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.iterator()
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
java.util.List.get(I)
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ArrayTable$CellSet.contains(java.lang.Object) ************************
*Commit: commit 7a1afaf1673aceddb8eca2e34a04a3ead0c2ed34 1349198538 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Table$Cell.getRowKey()
com.google.common.collect.ImmutableMap.get(java.lang.Object)
com.google.common.collect.Table$Cell.getColumnKey()
com.google.common.collect.ImmutableMap.get(java.lang.Object)
com.google.common.collect.ArrayTable.at(I, I)
com.google.common.collect.Table$Cell.getValue()
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableMap.get(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Table$Cell.getRowKey()
Também chamam:
com.google.common.collect.Table$Cell.getColumnKey()
Confiança: 0.8749992212501116
Suporte: 0.00421348
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Table$Cell.getColumnKey()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableMap.get(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Table$Cell.getColumnKey()
Também chamam:
com.google.common.collect.Table$Cell.getValue()
Confiança: 0.8333329872222719
Suporte: 0.00401284
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ArrayTable.at(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Table$Cell.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.ArrayTable.set(I, I, com.google.common.collect.ArrayTable$V) ************************
*Commit: commit 7a1afaf1673aceddb8eca2e34a04a3ead0c2ed34 1349198538 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.List.size()
com.google.common.base.Preconditions.checkElementIndex(I, I)
java.util.List.size()
com.google.common.base.Preconditions.checkElementIndex(I, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkElementIndex(I, I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 2
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkElementIndex(I, I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.iterator()
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
java.util.List.get(I)
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ArrayTable.size() ************************
*Commit: commit 7a1afaf1673aceddb8eca2e34a04a3ead0c2ed34 1349198538 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.List.size()
java.util.List.size()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.List.size()
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 2
**************************
************************ Método Avaliado: com.google.common.collect.ArrayTable.put(com.google.common.collect.ArrayTable$R, com.google.common.collect.ArrayTable$C, com.google.common.collect.ArrayTable$V) ************************
*Commit: commit 7a1afaf1673aceddb8eca2e34a04a3ead0c2ed34 1349198538 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.ArrayTable$R)
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.ArrayTable$C)
com.google.common.collect.ImmutableMap.get(java.lang.Object)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.collect.ImmutableMap.get(java.lang.Object)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.collect.ArrayTable.set(I, I, com.google.common.collect.ArrayTable$V)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.ArrayTable$C)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableMap.get(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableMap.get(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2083336794451136
Suporte: 0.00300963
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ArrayTable.set(I, I, com.google.common.collect.ArrayTable$V)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2083336794451136
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ArrayTable.equals(java.lang.Object) ************************
*Commit: commit 7a1afaf1673aceddb8eca2e34a04a3ead0c2ed34 1349198538 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ArrayTable.cellSet()
com.google.common.collect.Table.cellSet()
java.util.Set.equals(java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Table.cellSet()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Set.equals(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Table.cellSet()
Também chamam:
com.google.common.collect.Table$Cell.getColumnKey()
Confiança: 0.3999993354664859
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Table.cellSet()
Também chamam:
com.google.common.collect.Table$Cell.getValue()
Confiança: 0.3999993354664859
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Table.cellSet()
Também chamam:
com.google.common.collect.Table$Cell.getRowKey()
Confiança: 0.3999993354664859
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Table.cellSet()
Também chamam:
com.google.common.collect.Table$Cell.getRowKey()
com.google.common.collect.Table$Cell.getValue()
Confiança: 0.3999993354664859
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Table.cellSet()
Também chamam:
com.google.common.collect.Table$Cell.getColumnKey()
com.google.common.collect.Table$Cell.getValue()
Confiança: 0.3999993354664859
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ArrayTable.ArrayTable(com.google.common.collect.ArrayTable) ************************
*Commit: commit 7a1afaf1673aceddb8eca2e34a04a3ead0c2ed34 1349198538 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.List.size()
java.util.List.size()
com.google.common.collect.ArrayTable.eraseAll()
java.util.List.size()
java.lang.System.arraycopy(java.lang.Object, I, java.lang.Object, I, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.List.size()
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 2
**************************
Chamada: com.google.common.collect.ArrayTable.eraseAll()
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 3
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.System.arraycopy(java.lang.Object, I, java.lang.Object, I, I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.iterator()
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
java.util.List.get(I)
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ArrayTable$Values.iterator() ************************
*Commit: commit 7a1afaf1673aceddb8eca2e34a04a3ead0c2ed34 1349198538 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ArrayTable.cellSet()
java.util.Set.iterator()
com.google.common.collect.Table$Cell.getValue()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Set.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Table$Cell.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.6374957947593357
Suporte: 0.0102327
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.5249990655020746
Suporte: 0.00842697
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Confiança: 0.48749890975242033
Suporte: 0.00782504
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.36249922125172884
Suporte: 0.00581862
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
java.util.Iterator.remove()
Confiança: 0.34999937700138306
Suporte: 0.00561798
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ArrayTable.index(java.util.List) ************************
*Commit: commit 7a1afaf1673aceddb8eca2e34a04a3ead0c2ed34 1349198538 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableMap.builder()
java.util.List.size()
java.util.List.get(I)
com.google.common.collect.ImmutableMap$Builder.put(com.google.common.collect.ArrayTable$(Ljava/util/List;)Lcom/google/common/collect/ImmutableMap;$E, java.lang.Integer)
com.google.common.collect.ImmutableMap$Builder.build()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.List.size()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableMap.builder()
Também chamam:
com.google.common.collect.ImmutableMap$Builder.build()
Confiança: 0.9333339978668473
Suporte: 0.00280899
Posição da Sugestão: 1
**************************
Chamada: java.util.List.get(I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ImmutableMap$Builder.put(com.google.common.collect.ArrayTable$(Ljava/util/List;)Lcom/google/common/collect/ImmutableMap;$E, java.lang.Integer)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.get(I)
Também chamam:
java.util.List.get(I)
Confiança: 0.1346147947936435
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.ImmutableMap$Builder.build()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.ArrayTable.at(I, I) ************************
*Commit: commit 7a1afaf1673aceddb8eca2e34a04a3ead0c2ed34 1349198538 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.List.size()
com.google.common.base.Preconditions.checkElementIndex(I, I)
java.util.List.size()
com.google.common.base.Preconditions.checkElementIndex(I, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkElementIndex(I, I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 2
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkElementIndex(I, I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.iterator()
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
java.util.List.get(I)
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ArrayTable.set(I, I, com.google.common.collect.ArrayTable$V) ************************
*Commit: commit 7a1afaf1673aceddb8eca2e34a04a3ead0c2ed34 1349198538 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.List.size()
com.google.common.base.Preconditions.checkElementIndex(I, I)
java.util.List.size()
com.google.common.base.Preconditions.checkElementIndex(I, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkElementIndex(I, I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 2
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkElementIndex(I, I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.iterator()
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
java.util.List.get(I)
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ArrayTable.at(I, I) ************************
*Commit: commit 7a1afaf1673aceddb8eca2e34a04a3ead0c2ed34 1349198538 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.List.size()
com.google.common.base.Preconditions.checkElementIndex(I, I)
java.util.List.size()
com.google.common.base.Preconditions.checkElementIndex(I, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkElementIndex(I, I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 2
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkElementIndex(I, I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.List.size()
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.33333241037114153
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.get(I)
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
Confiança: 0.3000008306682726
Suporte: 0.00361156
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.iterator()
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.List.size()
Também chamam:
java.util.List.size()
java.util.List.get(I)
Confiança: 0.09999999999999999
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: putBytes ************************
*Commit: commit 00ca4574869439d67450b0cc85e45026386be4df 1349216364 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkPositionIndexes(I, I, I)
com.google.common.hash.AbstractByteHasher.update([B, I, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.hash.AbstractByteHasher.update([B, I, I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkPositionIndexes(I, I, I)
Também chamam:
java.util.Collections.emptyList()
Confiança: 0.5333346624003614
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.reflect.ClassPath$ClassInfo.getSimpleName() ************************
*Commit: commit 529b84581685a6ee66d6325f725f60d1e416515a 1349475226 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.reflect.ClassPath$ClassInfo.getPackageName()
java.lang.String.isEmpty()
java.lang.String.length()
java.lang.String.substring(I)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.String.isEmpty()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.length()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.substring(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.5121950033550847
Suporte: 0.00421348
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.2926825117427963
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.length()
Confiança: 0.26829250503262697
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.StringBuilder.append(C)
Confiança: 0.24390249832245767
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.toString()
Confiança: 0.24390249832245767
Suporte: 0.00200642
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.AbstractRangeSet.standardComplementIterator() ************************
*Commit: commit 45feb0e0aeffa0b8f325f25ecf7bd4567fb30d89 1349712694 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
asRanges
iterator
com.google.common.collect.Cut.belowAll()
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
com.google.common.collect.Cut.aboveAll()
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
com.google.common.collect.AbstractIterator.endOfData()
---------------- Chamadas de método adicionadas ---------------
Chamada: iterator
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.belowAll()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7087362667937666
Suporte: 0.0292937
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.43835705288167764
Suporte: 0.0128411
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.2260277807173556
Suporte: 0.00662119
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.21621642251782006
Suporte: 0.00963082
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.1666668911713532
Suporte: 0.00742376
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Cut.aboveAll()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.AbstractIterator.endOfData()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.TreeRangeSet$Complement.floorRange(com.google.common.collect.Cut) ************************
*Commit: commit 45feb0e0aeffa0b8f325f25ecf7bd4567fb30d89 1349712694 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.NavigableMap.headMap(com.google.common.collect.Cut, Z)
java.util.NavigableMap.descendingMap()
java.util.SortedMap.values()
java.util.Collection.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
java.util.NavigableMap.higherKey(com.google.common.collect.Cut)
com.google.common.collect.Cut.aboveAll()
com.google.common.base.Objects.firstNonNull(com.google.common.collect.Cut, com.google.common.collect.Cut)
create
java.util.Iterator.hasNext()
java.util.Iterator.next()
create
com.google.common.collect.Cut.belowAll()
com.google.common.collect.Cut.equals(java.lang.Object)
com.google.common.collect.Cut.belowAll()
create
java.util.Map.isEmpty()
all
com.google.common.collect.Cut.belowAll()
java.util.SortedMap.firstKey()
create
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.NavigableMap.descendingMap()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.SortedMap.values()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.6551725323186598
Suporte: 0.0038122
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 1.0
Suporte: 0.00280899
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.8571408228580379
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.6842112166203242
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.43835705288167764
Suporte: 0.0128411
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.2260277807173556
Suporte: 0.00662119
Posição da Sugestão: 0
**************************
Chamada: java.util.NavigableMap.higherKey(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.aboveAll()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Objects.firstNonNull(com.google.common.collect.Cut, com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: create
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 1.0
Suporte: 0.00280899
Posição da Sugestão: 1
**************************
Chamada: create
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.8571408228580379
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.6842112166203242
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.43835705288167764
Suporte: 0.0128411
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.2260277807173556
Suporte: 0.00662119
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Cut.belowAll()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.equals(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.belowAll()
Nenhuma sugestão fornecida.
**************************
Chamada: create
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.isEmpty()
Nenhuma sugestão fornecida.
**************************
Chamada: all
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Map.isEmpty()
Também chamam:
java.util.Iterator.remove()
Confiança: 1.0
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map.isEmpty()
Também chamam:
java.util.Iterator.remove()
Confiança: 1.0
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
java.util.Map.isEmpty()
Também chamam:
java.util.Iterator.remove()
Confiança: 1.0
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.isEmpty()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1842099050417082
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.isEmpty()
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z)
Confiança: 0.1578943916898379
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Cut.belowAll()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.SortedMap.firstKey()
Nenhuma sugestão fornecida.
**************************
Chamada: create
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.TreeRangeSet$Complement.asRanges() ************************
*Commit: commit 45feb0e0aeffa0b8f325f25ecf7bd4567fb30d89 1349712694 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
standardComplementIterator
com.google.common.collect.Cut.belowAll()
java.util.Map.containsKey(java.lang.Object)
java.util.NavigableMap.lastEntry()
java.util.Map$Entry.getValue()
com.google.common.collect.Range.hasUpperBound()
java.util.Map.size()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Cut.belowAll()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.containsKey(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.NavigableMap.lastEntry()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.containsKey(java.lang.Object)
Também chamam:
java.util.Map.remove(java.lang.Object)
Confiança: 0.1621617616948824
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.containsKey(java.lang.Object)
Também chamam:
java.util.Map.get(java.lang.Object)
Confiança: 0.1621617616948824
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Range.hasUpperBound()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.06818168946280408
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Chamada: java.util.Map.size()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.TreeRangeSet$Complement.rangeContaining(com.google.common.collect.TreeRangeSet$C) ************************
*Commit: commit 45feb0e0aeffa0b8f325f25ecf7bd4567fb30d89 1349712694 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Cut.belowValue(com.google.common.collect.TreeRangeSet$C)
java.util.NavigableMap.floorEntry(com.google.common.collect.Cut)
com.google.common.collect.Cut.belowAll()
java.util.Map$Entry.getValue()
com.google.common.collect.Range.contains(com.google.common.collect.TreeRangeSet$C)
java.util.NavigableMap.higherKey(com.google.common.collect.Cut)
com.google.common.collect.Cut.aboveAll()
com.google.common.base.Objects.firstNonNull(com.google.common.collect.Cut, com.google.common.collect.Cut)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.NavigableMap.floorEntry(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.belowAll()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Range.contains(com.google.common.collect.TreeRangeSet$C)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.06818168946280408
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Chamada: java.util.NavigableMap.higherKey(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.aboveAll()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Objects.firstNonNull(com.google.common.collect.Cut, com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableMapKeySet.iterator() ************************
*Commit: commit 067c6a6a70ef7247869cd66e658f2a42047e4f3c 1349712851 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableMapKeySet.map()
com.google.common.collect.ImmutableMap.entrySet()
com.google.common.collect.ImmutableSet.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getKey()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableMap.entrySet()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableSet.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7087362667937666
Suporte: 0.0292937
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.43835705288167764
Suporte: 0.0128411
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.2260277807173556
Suporte: 0.00662119
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.21621642251782006
Suporte: 0.00963082
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.1666668911713532
Suporte: 0.00742376
Posição da Sugestão: 5
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableMapKeySet.iterator() ************************
*Commit: commit 067c6a6a70ef7247869cd66e658f2a42047e4f3c 1349712851 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableMapKeySet.map()
com.google.common.collect.ImmutableMap.entrySet()
com.google.common.collect.ImmutableSet.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getKey()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableMap.entrySet()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableSet.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7087362667937666
Suporte: 0.0292937
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.43835705288167764
Suporte: 0.0128411
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.2260277807173556
Suporte: 0.00662119
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.21621642251782006
Suporte: 0.00963082
Posição da Sugestão: 5
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.1666668911713532
Suporte: 0.00742376
Posição da Sugestão: 5
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableEnumSet.asImmutable(java.util.Set) ************************
*Commit: commit e025e50d47345efec091ebca84e001143105430d 1349880574 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Set.size()
com.google.common.collect.ImmutableSet.of()
com.google.common.collect.Iterables.getOnlyElement(java.lang.Iterable)
com.google.common.collect.ImmutableSet.of(com.google.common.collect.ImmutableEnumSet$(Ljava/util/Set;)Lcom/google/common/collect/ImmutableSet;$E)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableSet.of()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.size()
Também chamam:
java.util.Set.size()
Confiança: 0.1489356512813117
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Iterables.getOnlyElement(java.lang.Iterable)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableSet.of(com.google.common.collect.ImmutableEnumSet$(Ljava/util/Set;)Lcom/google/common/collect/ImmutableSet;$E)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.hash.MessageDigestHashFunction.MessageDigestHashFunction(java.lang.String, I) ************************
*Commit: commit ad86ba28f20b0ea39ed2f8accf1b956422809f0d 1350060603 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.hash.MessageDigestHashFunction.getMessageDigestLength(java.lang.String)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkNotNull(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2083336794451136
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.HashBiMap.put(com.google.common.collect.HashBiMap$K, com.google.common.collect.HashBiMap$V, Z) ************************
*Commit: commit 72a25f66b25db2c957bf8f287c2e54baf418d514 1350061416 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.HashBiMap.hash(java.lang.Object)
com.google.common.collect.HashBiMap.hash(java.lang.Object)
com.google.common.collect.HashBiMap.seekByKey(java.lang.Object, I)
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
com.google.common.collect.HashBiMap.seekByValue(java.lang.Object, I)
com.google.common.collect.HashBiMap.delete(com.google.common.collect.HashBiMap$BiEntry)
com.google.common.collect.HashBiMap.delete(com.google.common.collect.HashBiMap$BiEntry)
com.google.common.collect.HashBiMap.insert(com.google.common.collect.HashBiMap$BiEntry)
com.google.common.collect.HashBiMap.rehashIfNecessary()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.HashBiMap.hash(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.HashBiMap.seekByKey(java.lang.Object, I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.HashBiMap.seekByValue(java.lang.Object, I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Também chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Confiança: 0.2619043380954245
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1666660733335944
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.HashBiMap.delete(com.google.common.collect.HashBiMap$BiEntry)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.HashBiMap.delete(com.google.common.collect.HashBiMap$BiEntry)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.HashBiMap.insert(com.google.common.collect.HashBiMap$BiEntry)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.HashBiMap.rehashIfNecessary()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.HashBiMap$Itr.remove() ************************
*Commit: commit 72a25f66b25db2c957bf8f287c2e54baf418d514 1350061416 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.HashBiMap$Itr.checkForConcurrentModification()
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
com.google.common.collect.HashBiMap.delete(com.google.common.collect.HashBiMap$BiEntry)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.HashBiMap.delete(com.google.common.collect.HashBiMap$BiEntry)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5217378114185539
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.26086890570927695
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.26086890570927695
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.HashBiMap.putInverse(com.google.common.collect.HashBiMap$V, com.google.common.collect.HashBiMap$K, Z) ************************
*Commit: commit 72a25f66b25db2c957bf8f287c2e54baf418d514 1350061416 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.HashBiMap.hash(java.lang.Object)
com.google.common.collect.HashBiMap.hash(java.lang.Object)
com.google.common.collect.HashBiMap.seekByValue(java.lang.Object, I)
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
com.google.common.collect.HashBiMap.seekByKey(java.lang.Object, I)
com.google.common.collect.HashBiMap.delete(com.google.common.collect.HashBiMap$BiEntry)
com.google.common.collect.HashBiMap.delete(com.google.common.collect.HashBiMap$BiEntry)
com.google.common.collect.HashBiMap.insert(com.google.common.collect.HashBiMap$BiEntry)
com.google.common.collect.HashBiMap.rehashIfNecessary()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.HashBiMap.hash(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.HashBiMap.seekByValue(java.lang.Object, I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.HashBiMap.seekByKey(java.lang.Object, I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Também chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Confiança: 0.2619043380954245
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1666660733335944
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.HashBiMap.delete(com.google.common.collect.HashBiMap$BiEntry)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.HashBiMap.delete(com.google.common.collect.HashBiMap$BiEntry)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.HashBiMap.insert(com.google.common.collect.HashBiMap$BiEntry)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.HashBiMap.rehashIfNecessary()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.HashBiMap.init(I) ************************
*Commit: commit 72a25f66b25db2c957bf8f287c2e54baf418d514 1350061416 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
java.lang.Math.max(I, I)
java.lang.Integer.highestOneBit(I)
com.google.common.collect.HashBiMap.createTable(I)
com.google.common.collect.HashBiMap.createTable(I)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.Math.max(I, I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2083336794451136
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Chamada: java.lang.Integer.highestOneBit(I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.HashBiMap.createTable(I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.HashBiMap.createTable(I)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.HashBiMap$EntrySet.iterator() ************************
*Commit: commit 72a25f66b25db2c957bf8f287c2e54baf418d514 1350061416 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.HashBiMap.hash(java.lang.Object)
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
com.google.common.collect.HashBiMap.seekByValue(java.lang.Object, I)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.collect.HashBiMap.delete(com.google.common.collect.HashBiMap$BiEntry)
com.google.common.collect.HashBiMap.insert(com.google.common.collect.HashBiMap$BiEntry)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.HashBiMap.seekByValue(java.lang.Object, I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Também chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Confiança: 0.2619043380954245
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1666660733335944
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.HashBiMap.delete(com.google.common.collect.HashBiMap$BiEntry)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2083336794451136
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.HashBiMap.insert(com.google.common.collect.HashBiMap$BiEntry)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.HashBiMap$Inverse.entrySet() ************************
*Commit: commit 72a25f66b25db2c957bf8f287c2e54baf418d514 1350061416 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.HashBiMap.hash(java.lang.Object)
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
com.google.common.collect.HashBiMap.seekByKey(java.lang.Object, I)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.collect.HashBiMap.delete(com.google.common.collect.HashBiMap$BiEntry)
com.google.common.collect.HashBiMap.insert(com.google.common.collect.HashBiMap$BiEntry)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.HashBiMap.seekByKey(java.lang.Object, I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Também chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Confiança: 0.2619043380954245
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1666660733335944
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.HashBiMap.delete(com.google.common.collect.HashBiMap$BiEntry)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2083336794451136
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.HashBiMap.insert(com.google.common.collect.HashBiMap$BiEntry)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.HashBiMap.hash(java.lang.Object) ************************
*Commit: commit 72a25f66b25db2c957bf8f287c2e54baf418d514 1350061416 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.Object.hashCode()
com.google.common.collect.Hashing.smear(I)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Hashing.smear(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.hashCode()
Também chamam:
java.lang.Object.hashCode()
Confiança: 0.21428579904758174
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableMap.viewValuesAsImmutableSet() ************************
*Commit: commit f46a285c91b2b08771d3c5e07e1050fc78d4bde1 1350316410 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.size()
java.util.Map.get(java.lang.Object)
com.google.common.collect.ImmutableSet.of(com.google.common.collect.ImmutableMap$V)
java.util.Map.entrySet()
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.collect.ImmutableSet.of(com.google.common.collect.ImmutableMap$V)
java.util.Map.size()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map.get(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.size()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.23333266879981923
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ImmutableSet.of(com.google.common.collect.ImmutableMap$V)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.get(java.lang.Object)
Também chamam:
com.google.common.collect.Count.get()
Confiança: 0.10714222143111428
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: java.util.Map.entrySet()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Set.iterator()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.size()
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 1.0
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7307698943199614
Suporte: 0.0038122
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
java.util.Set.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.9411769879592249
Suporte: 0.00321027
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.9375005840630228
Suporte: 0.00300963
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.9375005840630228
Suporte: 0.00300963
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.8125017521890683
Suporte: 0.00260835
Posição da Sugestão: 3
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.size()
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 1.0
Suporte: 0.00120385
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ImmutableSet.of(com.google.common.collect.ImmutableMap$V)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 1.0
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 1.0
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Iterator.hasNext()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 1.0
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 1.0
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 1.0
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Chamada: java.util.Map.size()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableMap.viewMapValuesAsSingletonSets() ************************
*Commit: commit f46a285c91b2b08771d3c5e07e1050fc78d4bde1 1350316410 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.size()
com.google.common.collect.ImmutableMap.containsKey(java.lang.Object)
com.google.common.collect.ImmutableMap.get(java.lang.Object)
com.google.common.collect.ImmutableSet.of(com.google.common.collect.ImmutableMap$V)
com.google.common.collect.ImmutableMap.entrySet()
com.google.common.collect.ImmutableSet.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.collect.ImmutableSet.of(com.google.common.collect.ImmutableMap$V)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableMap.containsKey(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.size()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.23333266879981923
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ImmutableMap.get(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableSet.of(com.google.common.collect.ImmutableMap$V)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableMap.entrySet()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableSet.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7087362667937666
Suporte: 0.0292937
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.43835705288167764
Suporte: 0.0128411
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 3
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.2260277807173556
Suporte: 0.00662119
Posição da Sugestão: 3
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.size()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 1.0
Suporte: 0.00140449
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ImmutableSet.of(com.google.common.collect.ImmutableMap$V)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.6060602399266597
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.6060602399266597
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5294129719048583
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5294129719048583
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.41666649361113595
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.HashBiMap.put(com.google.common.collect.HashBiMap$K, com.google.common.collect.HashBiMap$V, Z) ************************
*Commit: commit b9e7802ee61a79dac3a698beab94fd5a72ee5cdd 1350499079 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.HashBiMap.hash(java.lang.Object)
com.google.common.collect.HashBiMap.hash(java.lang.Object)
com.google.common.collect.HashBiMap.seekByKey(java.lang.Object, I)
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
com.google.common.collect.HashBiMap.seekByValue(java.lang.Object, I)
com.google.common.collect.HashBiMap.delete(com.google.common.collect.HashBiMap$BiEntry)
com.google.common.collect.HashBiMap.delete(com.google.common.collect.HashBiMap$BiEntry)
com.google.common.collect.HashBiMap.insert(com.google.common.collect.HashBiMap$BiEntry)
com.google.common.collect.HashBiMap.rehashIfNecessary()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.HashBiMap.hash(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.HashBiMap.seekByKey(java.lang.Object, I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.HashBiMap.seekByValue(java.lang.Object, I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Também chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Confiança: 0.2619043380954245
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1666660733335944
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.HashBiMap.delete(com.google.common.collect.HashBiMap$BiEntry)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.HashBiMap.delete(com.google.common.collect.HashBiMap$BiEntry)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.HashBiMap.insert(com.google.common.collect.HashBiMap$BiEntry)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.HashBiMap.rehashIfNecessary()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.HashBiMap$Itr.remove() ************************
*Commit: commit b9e7802ee61a79dac3a698beab94fd5a72ee5cdd 1350499079 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.HashBiMap$Itr.checkForConcurrentModification()
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
com.google.common.collect.HashBiMap.delete(com.google.common.collect.HashBiMap$BiEntry)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.HashBiMap.delete(com.google.common.collect.HashBiMap$BiEntry)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5217378114185539
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.26086890570927695
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkState(Z, java.lang.Object)
Também chamam:
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
Confiança: 0.26086890570927695
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.HashBiMap.putInverse(com.google.common.collect.HashBiMap$V, com.google.common.collect.HashBiMap$K, Z) ************************
*Commit: commit b9e7802ee61a79dac3a698beab94fd5a72ee5cdd 1350499079 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.HashBiMap.hash(java.lang.Object)
com.google.common.collect.HashBiMap.hash(java.lang.Object)
com.google.common.collect.HashBiMap.seekByValue(java.lang.Object, I)
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
com.google.common.collect.HashBiMap.seekByKey(java.lang.Object, I)
com.google.common.collect.HashBiMap.delete(com.google.common.collect.HashBiMap$BiEntry)
com.google.common.collect.HashBiMap.delete(com.google.common.collect.HashBiMap$BiEntry)
com.google.common.collect.HashBiMap.insert(com.google.common.collect.HashBiMap$BiEntry)
com.google.common.collect.HashBiMap.rehashIfNecessary()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.HashBiMap.hash(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.HashBiMap.seekByValue(java.lang.Object, I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.HashBiMap.seekByKey(java.lang.Object, I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Também chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Confiança: 0.2619043380954245
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1666660733335944
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.HashBiMap.delete(com.google.common.collect.HashBiMap$BiEntry)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.HashBiMap.delete(com.google.common.collect.HashBiMap$BiEntry)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.HashBiMap.insert(com.google.common.collect.HashBiMap$BiEntry)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.HashBiMap.rehashIfNecessary()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.HashBiMap.init(I) ************************
*Commit: commit b9e7802ee61a79dac3a698beab94fd5a72ee5cdd 1350499079 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
java.lang.Math.max(I, I)
java.lang.Integer.highestOneBit(I)
com.google.common.collect.HashBiMap.createTable(I)
com.google.common.collect.HashBiMap.createTable(I)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.Math.max(I, I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2083336794451136
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Chamada: java.lang.Integer.highestOneBit(I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.HashBiMap.createTable(I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.HashBiMap.createTable(I)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.HashBiMap$EntrySet.iterator() ************************
*Commit: commit b9e7802ee61a79dac3a698beab94fd5a72ee5cdd 1350499079 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.HashBiMap.hash(java.lang.Object)
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
com.google.common.collect.HashBiMap.seekByValue(java.lang.Object, I)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.collect.HashBiMap.delete(com.google.common.collect.HashBiMap$BiEntry)
com.google.common.collect.HashBiMap.insert(com.google.common.collect.HashBiMap$BiEntry)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.HashBiMap.seekByValue(java.lang.Object, I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Também chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Confiança: 0.2619043380954245
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1666660733335944
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.HashBiMap.delete(com.google.common.collect.HashBiMap$BiEntry)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2083336794451136
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.HashBiMap.insert(com.google.common.collect.HashBiMap$BiEntry)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.HashBiMap$Inverse.entrySet() ************************
*Commit: commit b9e7802ee61a79dac3a698beab94fd5a72ee5cdd 1350499079 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.HashBiMap.hash(java.lang.Object)
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
com.google.common.collect.HashBiMap.seekByKey(java.lang.Object, I)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.collect.HashBiMap.delete(com.google.common.collect.HashBiMap$BiEntry)
com.google.common.collect.HashBiMap.insert(com.google.common.collect.HashBiMap$BiEntry)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.HashBiMap.seekByKey(java.lang.Object, I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Também chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Confiança: 0.2619043380954245
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Objects.equal(java.lang.Object, java.lang.Object)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.1666660733335944
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.HashBiMap.delete(com.google.common.collect.HashBiMap$BiEntry)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Também chamam:
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Confiança: 0.2083336794451136
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.HashBiMap.insert(com.google.common.collect.HashBiMap$BiEntry)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.HashBiMap.hash(java.lang.Object) ************************
*Commit: commit b9e7802ee61a79dac3a698beab94fd5a72ee5cdd 1350499079 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.Object.hashCode()
com.google.common.collect.Hashing.smear(I)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Hashing.smear(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Object.hashCode()
Também chamam:
java.lang.Object.hashCode()
Confiança: 0.21428579904758174
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.util.concurrent.MoreExecutors.newThread(java.lang.String, java.lang.Runnable) ************************
*Commit: commit 4e9879bdc324a84617872f9cc2a321b7cde5bce1 1350499111 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
com.google.common.base.Preconditions.checkNotNull(java.lang.Runnable)
com.google.common.util.concurrent.MoreExecutors.platformThreadFactory()
java.util.concurrent.ThreadFactory.newThread(java.lang.Runnable)
java.lang.Thread.setName(java.lang.String)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkNotNull(java.lang.Runnable)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
Confiança: 0.375
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.String.length()
Confiança: 0.27499975079993216
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Chamada: com.google.common.util.concurrent.MoreExecutors.platformThreadFactory()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.ThreadFactory.newThread(java.lang.Runnable)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Thread.setName(java.lang.String)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableEnumMap.asImmutable(java.util.Map) ************************
*Commit: commit e31d42fe93b278a4f44665802e692f5b9e7f7426 1350499200 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.util.Map)
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.ImmutableEnumMap$(Ljava/util/Map;)Lcom/google/common/collect/ImmutableMap;$K)
java.util.Map$Entry.getValue()
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.ImmutableEnumMap$(Ljava/util/Map;)Lcom/google/common/collect/ImmutableMap;$V)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map.entrySet()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.5999987540027661
Suporte: 0.00963082
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.ImmutableEnumMap$(Ljava/util/Map;)Lcom/google/common/collect/ImmutableMap;$K)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7659567473791592
Suporte: 0.00722311
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.ImmutableEnumMap$(Ljava/util/Map;)Lcom/google/common/collect/ImmutableMap;$V)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.24999948083340776
Suporte: 0.0024077
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.19444394450589844
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.16666701277772816
Suporte: 0.00160514
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.12499974041670388
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableEnumMap.asImmutable(java.util.EnumMap) ************************
*Commit: commit e31d42fe93b278a4f44665802e692f5b9e7f7426 1350499200 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.EnumMap.size()
com.google.common.collect.ImmutableMap.of()
java.util.EnumMap.entrySet()
com.google.common.collect.Iterables.getOnlyElement(java.lang.Iterable)
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.collect.ImmutableMap.of(com.google.common.collect.ImmutableEnumMap$(Ljava/util/EnumMap;)Lcom/google/common/collect/ImmutableMap;$K, com.google.common.collect.ImmutableEnumMap$(Ljava/util/EnumMap;)Lcom/google/common/collect/ImmutableMap;$V)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableMap.of()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.EnumMap.entrySet()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Iterables.getOnlyElement(java.lang.Iterable)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ImmutableMap.of(com.google.common.collect.ImmutableEnumMap$(Ljava/util/EnumMap;)Lcom/google/common/collect/ImmutableMap;$K, com.google.common.collect.ImmutableEnumMap$(Ljava/util/EnumMap;)Lcom/google/common/collect/ImmutableMap;$V)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.0891091942678931
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.util.concurrent.MoreExecutors.newThread(java.lang.String, java.lang.Runnable) ************************
*Commit: commit 21b1788ae0640a3c7f12bb6246c7a68b7c9f698e 1350592187 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
com.google.common.base.Preconditions.checkNotNull(java.lang.Runnable)
com.google.common.util.concurrent.MoreExecutors.platformThreadFactory()
java.util.concurrent.ThreadFactory.newThread(java.lang.Runnable)
java.lang.Thread.setName(java.lang.String)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkNotNull(java.lang.Runnable)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
Confiança: 0.375
Suporte: 0.00300963
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.toString()
Confiança: 0.32500049840013556
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Também chamam:
java.lang.String.length()
Confiança: 0.27499975079993216
Suporte: 0.00220706
Posição da Sugestão: 0
**************************
Chamada: com.google.common.util.concurrent.MoreExecutors.platformThreadFactory()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.ThreadFactory.newThread(java.lang.Runnable)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Thread.setName(java.lang.String)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Maps$FilteredEntryBiMap.inversePredicate(com.google.common.base.Predicate) ************************
*Commit: commit b0cbbf5aa492b86d67963e3be730164ad8857536 1350935366 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map$Entry.getValue()
java.util.Map$Entry.getKey()
com.google.common.collect.Maps.immutableEntry(com.google.common.collect.Maps$FilteredEntryBiMap$(Lcom/google/common/base/Predicate;)Lcom/google/common/base/Predicate;$K, com.google.common.collect.Maps$FilteredEntryBiMap$(Lcom/google/common/base/Predicate;)Lcom/google/common/base/Predicate;$V)
com.google.common.base.Predicate.apply(null)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 2
**************************
Chamada: com.google.common.collect.Maps.immutableEntry(com.google.common.collect.Maps$FilteredEntryBiMap$(Lcom/google/common/base/Predicate;)Lcom/google/common/base/Predicate;$K, com.google.common.collect.Maps$FilteredEntryBiMap$(Lcom/google/common/base/Predicate;)Lcom/google/common/base/Predicate;$V)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.0848486221489221
Suporte: 0.00280899
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.07272721780709783
Suporte: 0.0024077
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.06060611552623551
Suporte: 0.00200642
Posição da Sugestão: 4
**************************
Chamada: com.google.common.base.Predicate.apply(null)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Maps.filterKeys(com.google.common.collect.BiMap, com.google.common.base.Predicate) ************************
*Commit: commit b0cbbf5aa492b86d67963e3be730164ad8857536 1350935366 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Predicate)
com.google.common.collect.Maps.filterEntries(com.google.common.collect.BiMap, com.google.common.base.Predicate)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Maps.filterEntries(com.google.common.collect.BiMap, com.google.common.base.Predicate)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Predicate)
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.4814816865841908
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Maps$KeyPredicate.apply(java.util.Map$Entry) ************************
*Commit: commit b0cbbf5aa492b86d67963e3be730164ad8857536 1350935366 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map$Entry.getKey()
com.google.common.base.Predicate.apply(null)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Predicate.apply(null)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.0848486221489221
Suporte: 0.00280899
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.07272721780709783
Suporte: 0.0024077
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.06060611552623551
Suporte: 0.00200642
Posição da Sugestão: 4
**************************
************************ Método Avaliado: com.google.common.collect.Maps$FilteredEntryBiMap.forcePut(com.google.common.collect.Maps$FilteredEntryBiMap$K, com.google.common.collect.Maps$FilteredEntryBiMap$V) ************************
*Commit: commit b0cbbf5aa492b86d67963e3be730164ad8857536 1350935366 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Maps.immutableEntry(com.google.common.collect.Maps$FilteredEntryBiMap$K, com.google.common.collect.Maps$FilteredEntryBiMap$V)
com.google.common.base.Predicate.apply(null)
com.google.common.base.Preconditions.checkArgument(Z)
com.google.common.collect.Maps$FilteredEntryBiMap.unfiltered()
com.google.common.collect.BiMap.forcePut(com.google.common.collect.Maps$FilteredEntryBiMap$K, com.google.common.collect.Maps$FilteredEntryBiMap$V)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Predicate.apply(null)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Predicate.apply(null)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.18367363545190643
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Maps$FilteredEntryBiMap.unfiltered()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z)
Também chamam:
java.util.Iterator.next()
Confiança: 0.07608659143728567
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.BiMap.forcePut(com.google.common.collect.Maps$FilteredEntryBiMap$K, com.google.common.collect.Maps$FilteredEntryBiMap$V)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Maps.filterEntries(com.google.common.collect.BiMap, com.google.common.base.Predicate) ************************
*Commit: commit b0cbbf5aa492b86d67963e3be730164ad8857536 1350935366 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.BiMap)
com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Predicate)
com.google.common.collect.Maps.filterFiltered(com.google.common.collect.Maps$FilteredEntryBiMap, com.google.common.base.Predicate)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Predicate)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Maps.filterFiltered(com.google.common.collect.Maps$FilteredEntryBiMap, com.google.common.base.Predicate)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Predicate)
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.4814816865841908
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Maps$ValuePredicate.apply(java.util.Map$Entry) ************************
*Commit: commit b0cbbf5aa492b86d67963e3be730164ad8857536 1350935366 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map$Entry.getValue()
com.google.common.base.Predicate.apply(null)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Predicate.apply(null)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 4
**************************
************************ Método Avaliado: com.google.common.collect.testing.google.BiMapRemoveTester.testKeySetIteratorRemove() ************************
*Commit: commit b0cbbf5aa492b86d67963e3be730164ad8857536 1350935366 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
getNumElements
getMap
keySet
iterator
java.util.Iterator.next()
java.util.Iterator.remove()
getMap
size
assertEquals
getMap
inverse
size
assertEquals
---------------- Chamadas de método adicionadas ---------------
Chamada: getMap
Nenhuma sugestão fornecida.
**************************
Chamada: keySet
Nenhuma sugestão fornecida.
**************************
Chamada: iterator
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.remove()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.29729808609754727
Suporte: 0.0132424
Posição da Sugestão: 1
**************************
Chamada: getMap
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.remove()
Também chamam:
com.google.common.collect.AbstractBiMap.removeFromInverseMap(com.google.common.collect.AbstractBiMap$V)
Confiança: 0.06060583177268975
Suporte: 0.00120385
Posição da Sugestão: 0
**************************
Chamada: size
Nenhuma sugestão fornecida.
**************************
Chamada: assertEquals
Nenhuma sugestão fornecida.
**************************
Chamada: getMap
Nenhuma sugestão fornecida.
**************************
Chamada: inverse
Nenhuma sugestão fornecida.
**************************
Chamada: size
Nenhuma sugestão fornecida.
**************************
Chamada: assertEquals
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Maps$FilteredEntryBiMap.inversePredicate(com.google.common.base.Predicate) ************************
*Commit: commit b0cbbf5aa492b86d67963e3be730164ad8857536 1350935366 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map$Entry.getValue()
java.util.Map$Entry.getKey()
com.google.common.collect.Maps.immutableEntry(com.google.common.collect.Maps$FilteredEntryBiMap$(Lcom/google/common/base/Predicate;)Lcom/google/common/base/Predicate;$K, com.google.common.collect.Maps$FilteredEntryBiMap$(Lcom/google/common/base/Predicate;)Lcom/google/common/base/Predicate;$V)
com.google.common.base.Predicate.apply(null)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 2
**************************
Chamada: com.google.common.collect.Maps.immutableEntry(com.google.common.collect.Maps$FilteredEntryBiMap$(Lcom/google/common/base/Predicate;)Lcom/google/common/base/Predicate;$K, com.google.common.collect.Maps$FilteredEntryBiMap$(Lcom/google/common/base/Predicate;)Lcom/google/common/base/Predicate;$V)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.0848486221489221
Suporte: 0.00280899
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.07272721780709783
Suporte: 0.0024077
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.06060611552623551
Suporte: 0.00200642
Posição da Sugestão: 4
**************************
Chamada: com.google.common.base.Predicate.apply(null)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Maps.filterKeys(com.google.common.collect.BiMap, com.google.common.base.Predicate) ************************
*Commit: commit b0cbbf5aa492b86d67963e3be730164ad8857536 1350935366 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Predicate)
com.google.common.collect.Maps.filterEntries(com.google.common.collect.BiMap, com.google.common.base.Predicate)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Maps.filterEntries(com.google.common.collect.BiMap, com.google.common.base.Predicate)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Predicate)
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.4814816865841908
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Maps$KeyPredicate.apply(java.util.Map$Entry) ************************
*Commit: commit b0cbbf5aa492b86d67963e3be730164ad8857536 1350935366 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map$Entry.getKey()
com.google.common.base.Predicate.apply(null)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Predicate.apply(null)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6121204981589384
Suporte: 0.0202648
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.0848486221489221
Suporte: 0.00280899
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.07272721780709783
Suporte: 0.0024077
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.06060611552623551
Suporte: 0.00200642
Posição da Sugestão: 4
**************************
************************ Método Avaliado: com.google.common.collect.Maps$FilteredEntryBiMap.forcePut(com.google.common.collect.Maps$FilteredEntryBiMap$K, com.google.common.collect.Maps$FilteredEntryBiMap$V) ************************
*Commit: commit b0cbbf5aa492b86d67963e3be730164ad8857536 1350935366 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Maps.immutableEntry(com.google.common.collect.Maps$FilteredEntryBiMap$K, com.google.common.collect.Maps$FilteredEntryBiMap$V)
com.google.common.base.Predicate.apply(null)
com.google.common.base.Preconditions.checkArgument(Z)
com.google.common.collect.Maps$FilteredEntryBiMap.unfiltered()
com.google.common.collect.BiMap.forcePut(com.google.common.collect.Maps$FilteredEntryBiMap$K, com.google.common.collect.Maps$FilteredEntryBiMap$V)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Predicate.apply(null)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Predicate.apply(null)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.18367363545190643
Suporte: 0.00180578
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Maps$FilteredEntryBiMap.unfiltered()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkArgument(Z)
Também chamam:
java.util.Iterator.next()
Confiança: 0.07608659143728567
Suporte: 0.00140449
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.BiMap.forcePut(com.google.common.collect.Maps$FilteredEntryBiMap$K, com.google.common.collect.Maps$FilteredEntryBiMap$V)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Maps.filterEntries(com.google.common.collect.BiMap, com.google.common.base.Predicate) ************************
*Commit: commit b0cbbf5aa492b86d67963e3be730164ad8857536 1350935366 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.BiMap)
com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Predicate)
com.google.common.collect.Maps.filterFiltered(com.google.common.collect.Maps$FilteredEntryBiMap, com.google.common.base.Predicate)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Predicate)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Maps.filterFiltered(com.google.common.collect.Maps$FilteredEntryBiMap, com.google.common.base.Predicate)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Predicate)
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.4814816865841908
Suporte: 0.00260835
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Maps$ValuePredicate.apply(java.util.Map$Entry) ************************
*Commit: commit b0cbbf5aa492b86d67963e3be730164ad8857536 1350935366 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map$Entry.getValue()
com.google.common.base.Predicate.apply(null)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Predicate.apply(null)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.15340922606405574
Suporte: 0.00541734
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.11363633789256082
Suporte: 0.00401284
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.09090901367768245
Suporte: 0.00321027
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.Map$Entry.getValue()
Também chamam:
com.google.common.base.Predicate.apply(null)
Confiança: 0.08522725341942063
Suporte: 0.00300963
Posição da Sugestão: 4
**************************
************************ Método Avaliado: com.google.common.collect.Sets$FilteredNavigableSet.pollFirst() ************************
*Commit: commit 59dbf4eaf7dcf4c07cb6d876c1d7c12e6ef8ba6a 1351034037 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Sets$FilteredNavigableSet.unfiltered()
java.util.NavigableSet.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.base.Predicate.apply(null)
java.util.Iterator.remove()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.NavigableSet.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7087362667937666
Suporte: 0.0292937
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.Predicate.apply(null)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.43835705288167764
Suporte: 0.0128411
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.remove()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.next()
com.google.common.base.Predicate.apply(null)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.6428573971427453
Suporte: 0.00180578
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.Sets$FilteredNavigableSet.pollLast() ************************
*Commit: commit 59dbf4eaf7dcf4c07cb6d876c1d7c12e6ef8ba6a 1351034037 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Sets$FilteredNavigableSet.unfiltered()
java.util.NavigableSet.descendingIterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.base.Predicate.apply(null)
java.util.Iterator.remove()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.NavigableSet.descendingIterator()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7087362667937666
Suporte: 0.0292937
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.Predicate.apply(null)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.43835705288167764
Suporte: 0.0128411
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.remove()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.next()
com.google.common.base.Predicate.apply(null)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.6428573971427453
Suporte: 0.00180578
Posição da Sugestão: 1
**************************
