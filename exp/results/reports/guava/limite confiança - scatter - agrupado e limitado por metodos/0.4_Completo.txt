************************ Método Avaliado: com.google.common.collect.ImmutableRangeMap$Builder.put(com.google.common.collect.Range, com.google.common.collect.ImmutableRangeMap$Builder$V) ************************
*Commit: commit 85d2e6894a747bbcc39ac5feaecec89226446499 1351282377 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Range)
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.ImmutableRangeMap$Builder$V)
com.google.common.collect.RangeSet.complement()
com.google.common.collect.RangeSet.encloses(com.google.common.collect.Range)
asMapOfRanges
entrySet
java.util.Map$Entry.getKey()
com.google.common.collect.Range.isConnected(com.google.common.collect.Range)
com.google.common.collect.Range.intersection(com.google.common.collect.Range)
com.google.common.collect.Range.isEmpty()
com.google.common.collect.Range.isEmpty()
com.google.common.collect.RangeSet.add(com.google.common.collect.Range)
com.google.common.collect.RangeMap.put(com.google.common.collect.Range, com.google.common.collect.ImmutableRangeMap$Builder$V)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.ImmutableRangeMap$Builder$V)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Range)
Também chamam:
com.google.common.collect.Range.isEmpty()
Confiança: 0.7777807679110853
Suporte: 0.00115607
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.RangeSet.complement()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.RangeSet.encloses(com.google.common.collect.Range)
Nenhuma sugestão fornecida.
**************************
Chamada: asMapOfRanges
Nenhuma sugestão fornecida.
**************************
Chamada: entrySet
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Range.isConnected(com.google.common.collect.Range)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6424601604070048
Suporte: 0.0189926
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Range.intersection(com.google.common.collect.Range)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Range.isEmpty()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Range.isEmpty()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.RangeSet.add(com.google.common.collect.Range)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.RangeMap.put(com.google.common.collect.Range, com.google.common.collect.ImmutableRangeMap$Builder$V)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableRangeMap$Builder.putAll(com.google.common.collect.RangeMap) ************************
*Commit: commit 85d2e6894a747bbcc39ac5feaecec89226446499 1351282377 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
asMapOfRanges
entrySet
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.collect.ImmutableRangeMap$Builder.put(com.google.common.collect.Range, com.google.common.collect.ImmutableRangeMap$Builder$V)
---------------- Chamadas de método adicionadas ---------------
Chamada: entrySet
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6424601604070048
Suporte: 0.0189926
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ImmutableRangeMap$Builder.put(com.google.common.collect.Range, com.google.common.collect.ImmutableRangeMap$Builder$V)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableRangeMap.copyOf(com.google.common.collect.RangeMap) ************************
*Commit: commit 85d2e6894a747bbcc39ac5feaecec89226446499 1351282377 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
asMapOfRanges
java.util.Map.size()
java.util.Map.size()
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
com.google.common.collect.ImmutableList$Builder.add(com.google.common.collect.Range)
java.util.Map$Entry.getValue()
com.google.common.collect.ImmutableList$Builder.add(com.google.common.collect.ImmutableRangeMap$(Lcom/google/common/collect/RangeMap;)Lcom/google/common/collect/ImmutableRangeMap;$V)
com.google.common.collect.ImmutableList$Builder.build()
com.google.common.collect.ImmutableList$Builder.build()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.entrySet()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.size()
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 1.0
Suporte: 9.90917E-4
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ImmutableList$Builder.add(com.google.common.collect.Range)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.size()
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 1.0
Suporte: 9.90917E-4
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableList$Builder.add(com.google.common.collect.ImmutableRangeMap$(Lcom/google/common/collect/RangeMap;)Lcom/google/common/collect/ImmutableRangeMap;$V)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableList$Builder.build()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableList$Builder.build()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableRangeMap$Builder.build() ************************
*Commit: commit 85d2e6894a747bbcc39ac5feaecec89226446499 1351282377 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
asMapOfRanges
java.util.Map.size()
java.util.Map.size()
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
com.google.common.collect.ImmutableList$Builder.add(com.google.common.collect.Range)
java.util.Map$Entry.getValue()
com.google.common.collect.ImmutableList$Builder.add(com.google.common.collect.ImmutableRangeMap$Builder$V)
com.google.common.collect.ImmutableList$Builder.build()
com.google.common.collect.ImmutableList$Builder.build()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.entrySet()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.size()
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 1.0
Suporte: 9.90917E-4
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ImmutableList$Builder.add(com.google.common.collect.Range)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.size()
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 1.0
Suporte: 9.90917E-4
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableList$Builder.add(com.google.common.collect.ImmutableRangeMap$Builder$V)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableList$Builder.build()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableList$Builder.build()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.TreeRangeMap$AsMapOfRanges.entrySet() ************************
*Commit: commit 85d2e6894a747bbcc39ac5feaecec89226446499 1351282377 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.SortedMap.values()
java.util.Collection.iterator()
com.google.common.collect.Iterators.unmodifiableIterator(java.util.Iterator)
java.util.Map.size()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Collection.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Iterators.unmodifiableIterator(java.util.Iterator)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.5483872227886571
Suporte: 0.0028076
Posição da Sugestão: 0
**************************
Chamada: java.util.Map.size()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.TreeRangeMap.remove(com.google.common.collect.Range) ************************
*Commit: commit 85d2e6894a747bbcc39ac5feaecec89226446499 1351282377 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Range.isEmpty()
java.util.NavigableMap.lowerEntry(com.google.common.collect.Cut)
java.util.Map$Entry.getValue()
com.google.common.collect.TreeRangeMap$RangeMapEntry.getUpperBound()
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
com.google.common.collect.TreeRangeMap$RangeMapEntry.getUpperBound()
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
com.google.common.collect.TreeRangeMap$RangeMapEntry.getUpperBound()
java.util.Map$Entry.getValue()
com.google.common.collect.TreeRangeMap$RangeMapEntry.getValue()
com.google.common.collect.TreeRangeMap.putRangeMapEntry(com.google.common.collect.Cut, com.google.common.collect.Cut, com.google.common.collect.TreeRangeMap$V)
com.google.common.collect.TreeRangeMap$RangeMapEntry.getLowerBound()
java.util.Map$Entry.getValue()
com.google.common.collect.TreeRangeMap$RangeMapEntry.getValue()
com.google.common.collect.TreeRangeMap.putRangeMapEntry(com.google.common.collect.Cut, com.google.common.collect.Cut, com.google.common.collect.TreeRangeMap$V)
java.util.NavigableMap.lowerEntry(com.google.common.collect.Cut)
java.util.Map$Entry.getValue()
com.google.common.collect.TreeRangeMap$RangeMapEntry.getUpperBound()
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
com.google.common.collect.TreeRangeMap$RangeMapEntry.getUpperBound()
java.util.Map$Entry.getValue()
com.google.common.collect.TreeRangeMap$RangeMapEntry.getValue()
com.google.common.collect.TreeRangeMap.putRangeMapEntry(com.google.common.collect.Cut, com.google.common.collect.Cut, com.google.common.collect.TreeRangeMap$V)
java.util.Map.remove(java.lang.Object)
java.util.NavigableMap.subMap(com.google.common.collect.Cut, com.google.common.collect.Cut)
java.util.Map.clear()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.NavigableMap.lowerEntry(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.TreeRangeMap$RangeMapEntry.getUpperBound()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.TreeRangeMap$RangeMapEntry.getUpperBound()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Também chamam:
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Confiança: 0.6999993945008567
Suporte: 0.00115607
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.TreeRangeMap$RangeMapEntry.getUpperBound()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Também chamam:
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Confiança: 0.6999993945008567
Suporte: 0.00115607
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.TreeRangeMap$RangeMapEntry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.TreeRangeMap.putRangeMapEntry(com.google.common.collect.Cut, com.google.common.collect.Cut, com.google.common.collect.TreeRangeMap$V)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.TreeRangeMap$RangeMapEntry.getLowerBound()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.TreeRangeMap$RangeMapEntry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.TreeRangeMap.putRangeMapEntry(com.google.common.collect.Cut, com.google.common.collect.Cut, com.google.common.collect.TreeRangeMap$V)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.NavigableMap.lowerEntry(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.TreeRangeMap$RangeMapEntry.getUpperBound()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.TreeRangeMap$RangeMapEntry.getUpperBound()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Também chamam:
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Confiança: 0.6999993945008567
Suporte: 0.00115607
Posição da Sugestão: 0
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.TreeRangeMap$RangeMapEntry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.TreeRangeMap.putRangeMapEntry(com.google.common.collect.Cut, com.google.common.collect.Cut, com.google.common.collect.TreeRangeMap$V)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.remove(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.NavigableMap.subMap(com.google.common.collect.Cut, com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.clear()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.TreeRangeMap.putAll(com.google.common.collect.RangeMap) ************************
*Commit: commit 85d2e6894a747bbcc39ac5feaecec89226446499 1351282377 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
asMapOfRanges
entrySet
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.collect.TreeRangeMap.put(com.google.common.collect.Range, com.google.common.collect.TreeRangeMap$V)
---------------- Chamadas de método adicionadas ---------------
Chamada: entrySet
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6424601604070048
Suporte: 0.0189926
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.TreeRangeMap.put(com.google.common.collect.Range, com.google.common.collect.TreeRangeMap$V)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.io.BaseEncoding$StandardBaseEncoding.StandardBaseEncoding(java.lang.String, java.lang.Character) ************************
*Commit: commit be52ad577ab4a5c0ad8aec2a828d611c5bed2516 1351282682 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
java.lang.String.length()
com.google.common.math.IntMath.log2(I, java.math.RoundingMode)
java.lang.String.length()
java.lang.Integer.lowestOneBit(I)
java.lang.Math.min(I, I)
java.lang.String.length()
java.lang.Character.charValue()
java.lang.String.indexOf(I)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.Object)
java.util.Arrays.fill([B, B)
java.lang.String.length()
java.lang.String.charAt(I)
com.google.common.math.IntMath.divide(I, I, java.math.RoundingMode)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.String.length()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.math.IntMath.log2(I, java.math.RoundingMode)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.4250004919687986
Suporte: 0.0028076
Posição da Sugestão: 1
**************************
Chamada: java.lang.String.length()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Integer.lowestOneBit(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.4250004919687986
Suporte: 0.0028076
Posição da Sugestão: 1
**************************
Chamada: java.lang.Math.min(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.length()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Character.charValue()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.4250004919687986
Suporte: 0.0028076
Posição da Sugestão: 1
**************************
Chamada: java.lang.String.indexOf(I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Arrays.fill([B, B)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.length()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.4250004919687986
Suporte: 0.0028076
Posição da Sugestão: 1
**************************
Chamada: com.google.common.math.IntMath.divide(I, I, java.math.RoundingMode)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.io.BaseEncoding$StandardBaseEncoding.decode(java.lang.CharSequence) ************************
*Commit: commit be52ad577ab4a5c0ad8aec2a828d611c5bed2516 1351282682 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.CharSequence)
java.lang.CharSequence.length()
com.google.common.math.IntMath.divide(I, I, java.math.RoundingMode)
java.nio.ByteBuffer.allocate(I)
com.google.common.io.BaseEncoding$StandardBaseEncoding.paddingMatcher()
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
com.google.common.base.CharMatcher.matches(C)
com.google.common.base.CharMatcher.matches(C)
java.nio.ByteBuffer.put(B)
java.lang.CharSequence.length()
java.lang.CharSequence.length()
java.lang.CharSequence.length()
java.lang.CharSequence.subSequence(I, I)
java.nio.Buffer.flip()
com.google.common.io.BaseEncoding$StandardBaseEncoding.extractBytes(java.nio.ByteBuffer)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.CharSequence.length()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.math.IntMath.divide(I, I, java.math.RoundingMode)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.6428561130958044
Suporte: 0.00445912
Posição da Sugestão: 1
**************************
Chamada: java.nio.ByteBuffer.allocate(I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.io.BaseEncoding$StandardBaseEncoding.paddingMatcher()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.CharSequence.length()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.CharSequence.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.8571427335714966
Suporte: 9.90917E-4
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.CharMatcher.matches(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
Também chamam:
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.40740773964369653
Suporte: 0.00181668
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.CharMatcher.matches(C)
Nenhuma sugestão fornecida.
**************************
Chamada: java.nio.ByteBuffer.put(B)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.CharSequence.length()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.CharSequence.length()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.8571427335714966
Suporte: 9.90917E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.6428561130958044
Suporte: 0.00445912
Posição da Sugestão: 0
**************************
Chamada: java.lang.CharSequence.length()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.8571427335714966
Suporte: 9.90917E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.6428561130958044
Suporte: 0.00445912
Posição da Sugestão: 0
**************************
Chamada: java.lang.CharSequence.subSequence(I, I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.8571427335714966
Suporte: 9.90917E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.6428561130958044
Suporte: 0.00445912
Posição da Sugestão: 0
**************************
Chamada: java.nio.Buffer.flip()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.charAt(I)
java.lang.CharSequence.subSequence(I, I)
Também chamam:
java.lang.CharSequence.toString()
Confiança: 1.0
Suporte: 9.90917E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
java.lang.CharSequence.subSequence(I, I)
Também chamam:
java.lang.CharSequence.toString()
Confiança: 1.0
Suporte: 9.90917E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.subSequence(I, I)
Também chamam:
java.lang.CharSequence.toString()
Confiança: 0.8571427335714966
Suporte: 9.90917E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.CharSequence.subSequence(I, I)
Também chamam:
java.lang.CharSequence.toString()
Confiança: 0.750001513752441
Suporte: 9.90917E-4
Posição da Sugestão: 0
**************************
Chamada: com.google.common.io.BaseEncoding$StandardBaseEncoding.extractBytes(java.nio.ByteBuffer)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.io.BaseEncoding$StandardBaseEncoding.encode([B, I, I) ************************
*Commit: commit be52ad577ab4a5c0ad8aec2a828d611c5bed2516 1351282682 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull([B)
com.google.common.base.Preconditions.checkPositionIndexes(I, I, I)
com.google.common.math.IntMath.divide(I, I, java.math.RoundingMode)
java.lang.String.charAt(I)
java.lang.StringBuilder.append(C)
java.lang.String.charAt(I)
java.lang.StringBuilder.append(C)
java.lang.AbstractStringBuilder.length()
java.lang.Character.charValue()
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.toString()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkPositionIndexes(I, I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.math.IntMath.divide(I, I, java.math.RoundingMode)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.charAt(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(C)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.8367338112249753
Suporte: 0.00677126
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(C)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.AbstractStringBuilder.length()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00462428
Posição da Sugestão: 1
**************************
Chamada: java.lang.Character.charValue()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(C)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00462428
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.SortedMultisets$DescendingMultiset.comparator() ************************
*Commit: commit 6fb125be7d839839562d3e9a19c8dc40d6e54265 1351282759 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.SortedMultisets$DescendingMultiset.forwardMultiset()
com.google.common.collect.SortedMultiset.comparator()
com.google.common.collect.Ordering.from(java.util.Comparator)
com.google.common.collect.Ordering.reverse()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.SortedMultiset.comparator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Ordering.from(java.util.Comparator)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Ordering.reverse()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Ordering.from(java.util.Comparator)
Também chamam:
com.google.common.collect.Ordering.reverse()
Confiança: 0.6153824656845164
Suporte: 0.00132122
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.SortedMultisets$DescendingMultiset.createEntrySet() ************************
*Commit: commit 6fb125be7d839839562d3e9a19c8dc40d6e54265 1351282759 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.SortedMultisets$DescendingMultiset.entryIterator()
com.google.common.collect.SortedMultisets$DescendingMultiset.forwardMultiset()
com.google.common.collect.Multiset.entrySet()
java.util.Set.size()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.SortedMultisets$DescendingMultiset.forwardMultiset()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Multiset.entrySet()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Set.size()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multiset.entrySet()
Também chamam:
com.google.common.collect.Multiset$Entry.getElement()
Confiança: 0.6451616683659717
Suporte: 0.00330306
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Multiset.entrySet()
Também chamam:
com.google.common.collect.Multiset$Entry.getCount()
Confiança: 0.6451616683659717
Suporte: 0.00330306
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Multiset.entrySet()
Também chamam:
com.google.common.collect.Multiset$Entry.getElement()
com.google.common.collect.Multiset$Entry.getCount()
Confiança: 0.612902217690742
Suporte: 0.0031379
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Multiset.entrySet()
Também chamam:
com.google.common.collect.Multiset.count(java.lang.Object)
Confiança: 0.41935527976030035
Suporte: 0.00214699
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Multiset.entrySet()
Também chamam:
com.google.common.collect.Multiset$Entry.getElement()
com.google.common.collect.Multiset.count(java.lang.Object)
Confiança: 0.41935527976030035
Suporte: 0.00214699
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Iterators.pollNext(java.util.Iterator) ************************
*Commit: commit 0dbf979ceacfa3006bd48330aff35e8c4e7fe02f 1351546509 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Iterator.remove()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7688450467665082
Suporte: 0.0252684
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.remove()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Iterators.pollNext(java.util.Iterator) ************************
*Commit: commit 0dbf979ceacfa3006bd48330aff35e8c4e7fe02f 1351546509 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Iterator.remove()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7688450467665082
Suporte: 0.0252684
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.remove()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableRangeSet$AsSet.iterator() ************************
*Commit: commit 043e4f75cc56f564a0d0ca3345176e637de8469e 1352488562 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableList.iterator()
com.google.common.collect.Iterators.emptyIterator()
java.util.Iterator.hasNext()
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.collect.Range.asSet(com.google.common.collect.DiscreteDomain)
com.google.common.collect.ImmutableSortedSet.iterator()
com.google.common.collect.AbstractIterator.endOfData()
java.util.Iterator.next()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Iterators.emptyIterator()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7688450467665082
Suporte: 0.0252684
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.8108106338932848
Suporte: 0.00495458
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Range.asSet(com.google.common.collect.DiscreteDomain)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableSortedSet.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.AbstractIterator.endOfData()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableRangeSet$AsSet.descendingIterator() ************************
*Commit: commit 043e4f75cc56f564a0d0ca3345176e637de8469e 1352488562 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableList.reverse()
com.google.common.collect.ImmutableList.iterator()
com.google.common.collect.Iterators.emptyIterator()
java.util.Iterator.hasNext()
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.collect.Range.asSet(com.google.common.collect.DiscreteDomain)
com.google.common.collect.ImmutableSortedSet.descendingIterator()
com.google.common.collect.AbstractIterator.endOfData()
java.util.Iterator.next()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableList.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Iterators.emptyIterator()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7688450467665082
Suporte: 0.0252684
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.8108106338932848
Suporte: 0.00495458
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Range.asSet(com.google.common.collect.DiscreteDomain)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableSortedSet.descendingIterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.AbstractIterator.endOfData()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableRangeSet.asSet(com.google.common.collect.DiscreteDomain, com.google.common.collect.Range) ************************
*Commit: commit 043e4f75cc56f564a0d0ca3345176e637de8469e 1352488562 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.DiscreteDomain)
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Range)
com.google.common.collect.ImmutableRangeSet.isEmpty()
com.google.common.collect.ImmutableSortedSet.of()
com.google.common.collect.ImmutableRangeSet.span()
com.google.common.collect.Range.isConnected(com.google.common.collect.Range)
com.google.common.collect.ImmutableSortedSet.of()
com.google.common.collect.Range.intersection(com.google.common.collect.Range)
com.google.common.collect.Range.canonical(com.google.common.collect.DiscreteDomain)
com.google.common.collect.Range.hasLowerBound()
com.google.common.collect.Range.hasUpperBound()
com.google.common.collect.DiscreteDomain.maxValue()
com.google.common.collect.ImmutableRangeSet.intersectRanges(com.google.common.collect.Range)
java.util.List.size()
com.google.common.collect.ImmutableSortedSet.of()
java.util.List.get(I)
com.google.common.collect.Range.asSet(com.google.common.collect.DiscreteDomain)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Range)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableRangeSet.isEmpty()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Range)
Também chamam:
com.google.common.collect.Range.isEmpty()
Confiança: 0.7777807679110853
Suporte: 0.00115607
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.ImmutableSortedSet.of()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableRangeSet.span()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Range.isConnected(com.google.common.collect.Range)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableSortedSet.of()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Range.intersection(com.google.common.collect.Range)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Range.canonical(com.google.common.collect.DiscreteDomain)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Range.hasLowerBound()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Range.hasUpperBound()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.DiscreteDomain.maxValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableRangeSet.intersectRanges(com.google.common.collect.Range)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableSortedSet.of()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Range.asSet(com.google.common.collect.DiscreteDomain)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.hash.AbstractStreamingHashFunction.hashObject(com.google.common.hash.AbstractStreamingHashFunction$(Ljava/lang/Object;Lcom/google/common/hash/Funnel;)Lcom/google/common/hash/HashCode;$T, com.google.common.hash.Funnel) ************************
*Commit: commit a4bd0dd6fbcc7cd349ebd7c2ded2f5509f7d2ca6 1352489028 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.hash.HashFunction.newHasher()
com.google.common.hash.Hasher.putObject(com.google.common.hash.AbstractStreamingHashFunction$(Ljava/lang/Object;Lcom/google/common/hash/Funnel;)Lcom/google/common/hash/HashCode;$T, com.google.common.hash.Funnel)
com.google.common.hash.Hasher.hash()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.hash.Hasher.putObject(com.google.common.hash.AbstractStreamingHashFunction$(Ljava/lang/Object;Lcom/google/common/hash/Funnel;)Lcom/google/common/hash/HashCode;$T, com.google.common.hash.Funnel)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.hash.HashFunction.newHasher()
Também chamam:
com.google.common.hash.Hasher.hash()
Confiança: 0.8181793161151112
Suporte: 0.00148637
Posição da Sugestão: 1
**************************
Chamada: com.google.common.hash.Hasher.hash()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.AbstractMultimap$EntryIterator.hasNext() ************************
*Commit: commit f5d4b63ffdf51ec455aab8bc2e96b95378e9fc0d 1352489032 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Iterator.hasNext()
java.util.Iterator.hasNext()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Iterator.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7688450467665082
Suporte: 0.0252684
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.AbstractMultimap.equals(java.lang.Object) ************************
*Commit: commit f5d4b63ffdf51ec455aab8bc2e96b95378e9fc0d 1352489032 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Multimap.asMap()
java.util.Map.equals(java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map.equals(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multimap.asMap()
Também chamam:
java.util.Map.entrySet()
Confiança: 0.43333440977842724
Suporte: 0.00214699
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.AbstractMultimap$KeySet.iterator() ************************
*Commit: commit f5d4b63ffdf51ec455aab8bc2e96b95378e9fc0d 1352489032 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.entrySet()
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getKey()
com.google.common.collect.Iterators.checkRemove(Z)
java.util.Map$Entry.getValue()
java.util.Iterator.remove()
java.util.Collection.size()
java.util.Collection.clear()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Set.iterator()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6125013245333859
Suporte: 0.00809249
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
java.util.Set.iterator()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.608696567864768
Suporte: 0.00231214
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.9285712226191608
Suporte: 0.00644096
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.9090924103309334
Suporte: 0.00165153
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Iterators.checkRemove(Z)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.8571427335714966
Suporte: 9.90917E-4
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.remove()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.8888903839555425
Suporte: 0.00132122
Posição da Sugestão: 1
**************************
Chamada: java.util.Collection.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.clear()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.AbstractMultimap.putAll(com.google.common.collect.AbstractMultimap$K, java.lang.Iterable) ************************
*Commit: commit f5d4b63ffdf51ec455aab8bc2e96b95378e9fc0d 1352489032 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.Iterable.iterator()
java.util.Iterator.hasNext()
com.google.common.collect.AbstractMultimap.getOrCreateCollection(com.google.common.collect.AbstractMultimap$K)
java.util.Collection.size()
com.google.common.collect.Collections2.cast(java.lang.Iterable)
java.util.Collection.addAll(java.util.Collection)
java.util.Collection.add(com.google.common.collect.AbstractMultimap$V)
java.util.Collection.size()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.AbstractMultimap.getOrCreateCollection(com.google.common.collect.AbstractMultimap$K)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Iterable.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.826087070983096
Suporte: 0.0031379
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7688450467665082
Suporte: 0.0252684
Posição da Sugestão: 0
**************************
Chamada: java.util.Collection.size()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Collections2.cast(java.lang.Iterable)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.addAll(java.util.Collection)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.add(com.google.common.collect.AbstractMultimap$V)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.size()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.AbstractMultimap$WrappedCollection.retainAll(java.util.Collection) ************************
*Commit: commit f5d4b63ffdf51ec455aab8bc2e96b95378e9fc0d 1352489032 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.util.Collection)
com.google.common.collect.AbstractMultimap$WrappedCollection.size()
java.util.Collection.retainAll(java.util.Collection)
java.util.Collection.size()
com.google.common.collect.AbstractMultimap$WrappedCollection.removeIfEmpty()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.AbstractMultimap$WrappedCollection.size()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.util.Collection)
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.4705878162626732
Suporte: 0.00264244
Posição da Sugestão: 0
**************************
Chamada: java.util.Collection.retainAll(java.util.Collection)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.size()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.AbstractMultimap$WrappedCollection.removeIfEmpty()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.AbstractMultimap.remove(java.lang.Object, java.lang.Object) ************************
*Commit: commit f5d4b63ffdf51ec455aab8bc2e96b95378e9fc0d 1352489032 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.get(java.lang.Object)
java.util.Collection.remove(java.lang.Object)
java.util.Collection.isEmpty()
java.util.Map.remove(java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Collection.remove(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.isEmpty()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.remove(java.lang.Object)
Também chamam:
java.util.Collection.remove(java.lang.Object)
Confiança: 0.4285713667857483
Suporte: 9.90917E-4
Posição da Sugestão: 0
**************************
Chamada: java.util.Map.remove(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.AbstractMultimap$AsMap$AsMapEntries.remove(java.lang.Object) ************************
*Commit: commit f5d4b63ffdf51ec455aab8bc2e96b95378e9fc0d 1352489032 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.AbstractMultimap$AsMap$AsMapEntries.contains(java.lang.Object)
java.util.Map$Entry.getKey()
com.google.common.collect.AbstractMultimap.removeValuesForKey(java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.AbstractMultimap.removeValuesForKey(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6424601604070048
Suporte: 0.0189926
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.AbstractMultimap.putAll(com.google.common.collect.Multimap) ************************
*Commit: commit f5d4b63ffdf51ec455aab8bc2e96b95378e9fc0d 1352489032 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Multimap.entries()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.collect.AbstractMultimap.put(com.google.common.collect.AbstractMultimap$K, com.google.common.collect.AbstractMultimap$V)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multimap.entries()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.57894770387839
Suporte: 0.00181668
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multimap.entries()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.8750018921905511
Suporte: 0.00115607
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.AbstractMultimap.put(com.google.common.collect.AbstractMultimap$K, com.google.common.collect.AbstractMultimap$V)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.AbstractMultimap$EntryIterator.EntryIterator() ************************
*Commit: commit f5d4b63ffdf51ec455aab8bc2e96b95378e9fc0d 1352489032 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.entrySet()
java.util.Set.iterator()
java.util.Iterator.hasNext()
com.google.common.collect.AbstractMultimap$EntryIterator.findValueIteratorAndKey()
com.google.common.collect.Iterators.emptyModifiableIterator()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Set.iterator()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6125013245333859
Suporte: 0.00809249
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.6000007568762205
Suporte: 0.00792733
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Confiança: 0.48750094609527556
Suporte: 0.00644096
Posição da Sugestão: 0
**************************
Chamada: java.util.Iterator.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
java.util.Set.iterator()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.608696567864768
Suporte: 0.00231214
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.608696567864768
Suporte: 0.00231214
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.526882259492682
Suporte: 0.00809249
Posição da Sugestão: 4
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Set.iterator()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.521738787050712
Suporte: 0.00198183
Posição da Sugestão: 4
**************************
Chamada: com.google.common.collect.AbstractMultimap$EntryIterator.findValueIteratorAndKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.9285712226191608
Suporte: 0.00644096
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Set.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.9166679281270341
Suporte: 0.00181668
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.9166679281270341
Suporte: 0.00181668
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.8333358562540683
Suporte: 0.00165153
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Set.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.8333358562540683
Suporte: 0.00165153
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
java.util.Iterator.remove()
Confiança: 0.8333358562540683
Suporte: 0.00165153
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Set.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
java.util.Iterator.remove()
Confiança: 0.8333358562540683
Suporte: 0.00165153
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7688450467665082
Suporte: 0.0252684
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Iterator.hasNext()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7499987385396326
Suporte: 0.00148637
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
java.util.Set.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7499987385396326
Suporte: 0.00148637
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Iterators.emptyModifiableIterator()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.AbstractMultimap$AsMap$AsMapEntries.contains(java.lang.Object) ************************
*Commit: commit f5d4b63ffdf51ec455aab8bc2e96b95378e9fc0d 1352489032 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.entrySet()
com.google.common.collect.Collections2.safeContains(java.util.Collection, java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Collections2.safeContains(java.util.Collection, java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6125013245333859
Suporte: 0.00809249
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.6000007568762205
Suporte: 0.00792733
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Confiança: 0.48750094609527556
Suporte: 0.00644096
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.AbstractMultimap$AsMap$AsMapIterator.next() ************************
*Commit: commit f5d4b63ffdf51ec455aab8bc2e96b95378e9fc0d 1352489032 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Iterator.next()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.collect.AbstractMultimap.wrapCollection(com.google.common.collect.AbstractMultimap$K, java.util.Collection)
com.google.common.collect.Maps.immutableEntry(com.google.common.collect.AbstractMultimap$K, java.util.Collection)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.next()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6571418685719723
Suporte: 0.00379851
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.AbstractMultimap.wrapCollection(com.google.common.collect.AbstractMultimap$K, java.util.Collection)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Maps.immutableEntry(com.google.common.collect.AbstractMultimap$K, java.util.Collection)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.AbstractMultimap.replaceValues(com.google.common.collect.AbstractMultimap$K, java.lang.Iterable) ************************
*Commit: commit f5d4b63ffdf51ec455aab8bc2e96b95378e9fc0d 1352489032 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.Iterable.iterator()
java.util.Iterator.hasNext()
com.google.common.collect.AbstractMultimap.removeAll(java.lang.Object)
com.google.common.collect.AbstractMultimap.getOrCreateCollection(com.google.common.collect.AbstractMultimap$K)
com.google.common.collect.AbstractMultimap.createCollection()
java.util.Collection.addAll(java.util.Collection)
java.util.Collection.size()
java.util.Collection.clear()
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Collection.add(com.google.common.collect.AbstractMultimap$V)
com.google.common.collect.AbstractMultimap.unmodifiableCollectionSubclass(java.util.Collection)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.AbstractMultimap.removeAll(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Iterable.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.826087070983096
Suporte: 0.0031379
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.AbstractMultimap.getOrCreateCollection(com.google.common.collect.AbstractMultimap$K)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.AbstractMultimap.createCollection()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.addAll(java.util.Collection)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.clear()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Iterable.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.8571427335714966
Suporte: 9.90917E-4
Posição da Sugestão: 1
**************************
Chamada: java.util.Collection.add(com.google.common.collect.AbstractMultimap$V)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.AbstractMultimap.unmodifiableCollectionSubclass(java.util.Collection)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.AbstractMultimap$EntryIterator.next() ************************
*Commit: commit f5d4b63ffdf51ec455aab8bc2e96b95378e9fc0d 1352489032 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Iterator.hasNext()
com.google.common.collect.AbstractMultimap$EntryIterator.findValueIteratorAndKey()
java.util.Iterator.next()
com.google.common.collect.Maps.immutableEntry(com.google.common.collect.AbstractMultimap$K, com.google.common.collect.AbstractMultimap$V)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.AbstractMultimap$EntryIterator.findValueIteratorAndKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7688450467665082
Suporte: 0.0252684
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.next()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Maps.immutableEntry(com.google.common.collect.AbstractMultimap$K, com.google.common.collect.AbstractMultimap$V)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.AbstractMultimap$EntryIterator.findValueIteratorAndKey() ************************
*Commit: commit f5d4b63ffdf51ec455aab8bc2e96b95378e9fc0d 1352489032 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Iterator.next()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
java.util.Collection.iterator()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.next()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6571418685719723
Suporte: 0.00379851
Posição da Sugestão: 1
**************************
Chamada: java.util.Collection.iterator()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.AbstractMultimap$WrappedCollection.remove(java.lang.Object) ************************
*Commit: commit f5d4b63ffdf51ec455aab8bc2e96b95378e9fc0d 1352489032 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.AbstractMultimap$WrappedCollection.refreshIfEmpty()
java.util.Collection.remove(java.lang.Object)
com.google.common.collect.AbstractMultimap$WrappedCollection.removeIfEmpty()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Collection.remove(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.AbstractMultimap$WrappedCollection.removeIfEmpty()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.remove(java.lang.Object)
Também chamam:
java.util.Collection.remove(java.lang.Object)
Confiança: 0.4285713667857483
Suporte: 9.90917E-4
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.AbstractMultimap$AsMap.wrapEntry(java.util.Map$Entry) ************************
*Commit: commit 6b3d0ce887848832ccc7a1c6f8a37f80fef45ffd 1352489033 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.collect.AbstractMultimap.wrapCollection(com.google.common.collect.AbstractMultimap$K, java.util.Collection)
com.google.common.collect.Maps.immutableEntry(com.google.common.collect.AbstractMultimap$K, java.util.Collection)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6424601604070048
Suporte: 0.0189926
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.AbstractMultimap.wrapCollection(com.google.common.collect.AbstractMultimap$K, java.util.Collection)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Maps.immutableEntry(com.google.common.collect.AbstractMultimap$K, java.util.Collection)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.AbstractMultimap$NavigableAsMap.pollFirstEntry() ************************
*Commit: commit 6b3d0ce887848832ccc7a1c6f8a37f80fef45ffd 1352489033 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.AbstractMultimap$AsMap.entrySet()
java.util.Set.iterator()
com.google.common.collect.AbstractMultimap$NavigableAsMap.pollAsMapEntry(java.util.Iterator)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Set.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.AbstractMultimap$NavigableAsMap.pollAsMapEntry(java.util.Iterator)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.526882259492682
Suporte: 0.00809249
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.4516133652794417
Suporte: 0.00693642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Confiança: 0.41935517474868483
Suporte: 0.00644096
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.AbstractMultimap$AsMap.wrapEntry(java.util.Map$Entry) ************************
*Commit: commit 6b3d0ce887848832ccc7a1c6f8a37f80fef45ffd 1352489033 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.collect.AbstractMultimap.wrapCollection(com.google.common.collect.AbstractMultimap$K, java.util.Collection)
com.google.common.collect.Maps.immutableEntry(com.google.common.collect.AbstractMultimap$K, java.util.Collection)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6424601604070048
Suporte: 0.0189926
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.AbstractMultimap.wrapCollection(com.google.common.collect.AbstractMultimap$K, java.util.Collection)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Maps.immutableEntry(com.google.common.collect.AbstractMultimap$K, java.util.Collection)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.AbstractMultimap$NavigableAsMap.pollAsMapEntry(java.util.Iterator) ************************
*Commit: commit 6b3d0ce887848832ccc7a1c6f8a37f80fef45ffd 1352489033 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.collect.AbstractMultimap.createCollection()
java.util.Map$Entry.getValue()
java.util.Collection.addAll(java.util.Collection)
java.util.Iterator.remove()
java.util.Map$Entry.getKey()
com.google.common.collect.AbstractMultimap.unmodifiableCollectionSubclass(java.util.Collection)
com.google.common.collect.Maps.immutableEntry(com.google.common.collect.AbstractMultimap$K, java.util.Collection)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7688450467665082
Suporte: 0.0252684
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.AbstractMultimap.createCollection()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.addAll(java.util.Collection)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5
Suporte: 0.00247729
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.remove()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.AbstractMultimap.unmodifiableCollectionSubclass(java.util.Collection)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7083334384547654
Suporte: 0.0028076
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7083334384547654
Suporte: 0.0028076
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6571418685719723
Suporte: 0.00379851
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6424601604070048
Suporte: 0.0189926
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Maps.immutableEntry(com.google.common.collect.AbstractMultimap$K, java.util.Collection)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.AbstractMultimap$NavigableAsMap.pollLastEntry() ************************
*Commit: commit 6b3d0ce887848832ccc7a1c6f8a37f80fef45ffd 1352489033 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.AbstractMultimap$NavigableAsMap.descendingMap()
java.util.SortedMap.entrySet()
java.util.Set.iterator()
com.google.common.collect.AbstractMultimap$NavigableAsMap.pollAsMapEntry(java.util.Iterator)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.SortedMap.entrySet()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Set.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.AbstractMultimap$NavigableAsMap.pollAsMapEntry(java.util.Iterator)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.526882259492682
Suporte: 0.00809249
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.4516133652794417
Suporte: 0.00693642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Confiança: 0.41935517474868483
Suporte: 0.00644096
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableBiMap.fromEntries(java.util.Collection) ************************
*Commit: commit c0f9bd6b376d6c4c7a2128c3a38a54345d0c663b 1352489033 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Collection.size()
com.google.common.collect.ImmutableBiMap.of()
com.google.common.collect.Iterables.getOnlyElement(java.lang.Iterable)
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableBiMap.of()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Iterables.getOnlyElement(java.lang.Iterable)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6424601604070048
Suporte: 0.0189926
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.RegularImmutableBiMap$Inverse$InverseEntrySet.createAsList() ************************
*Commit: commit c0f9bd6b376d6c4c7a2128c3a38a54345d0c663b 1352489033 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map$Entry.getValue()
java.util.Map$Entry.getKey()
com.google.common.collect.Maps.immutableEntry(com.google.common.collect.RegularImmutableBiMap$V, com.google.common.collect.RegularImmutableBiMap$K)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Maps.immutableEntry(com.google.common.collect.RegularImmutableBiMap$V, com.google.common.collect.RegularImmutableBiMap$K)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6424601604070048
Suporte: 0.0189926
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.RegularImmutableBiMap.RegularImmutableBiMap(java.util.Collection) ************************
*Commit: commit c0f9bd6b376d6c4c7a2128c3a38a54345d0c663b 1352489033 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Collection.size()
com.google.common.collect.RegularImmutableMap.chooseTableSize(I)
com.google.common.collect.RegularImmutableBiMap.createEntryArray(I)
com.google.common.collect.RegularImmutableBiMap.createEntryArray(I)
com.google.common.collect.RegularImmutableBiMap.createEntryArray(I)
java.util.Map$Entry.getKey()
com.google.common.base.Preconditions.checkNotNull(null)
java.util.Map$Entry.getValue()
com.google.common.base.Preconditions.checkNotNull(null)
java.lang.Object.hashCode()
java.lang.Object.hashCode()
com.google.common.collect.Hashing.smear(I)
com.google.common.collect.Hashing.smear(I)
com.google.common.collect.RegularImmutableBiMap$BiMapEntry.getNextInKToVBucket()
com.google.common.collect.ImmutableEntry.getKey()
java.lang.Object.equals(java.lang.Object)
com.google.common.collect.RegularImmutableBiMap$BiMapEntry.getNextInVToKBucket()
com.google.common.collect.ImmutableEntry.getValue()
java.lang.Object.equals(java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.RegularImmutableMap.chooseTableSize(I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.RegularImmutableBiMap.createEntryArray(I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.RegularImmutableBiMap.createEntryArray(I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.RegularImmutableBiMap.createEntryArray(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkNotNull(null)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6424601604070048
Suporte: 0.0189926
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkNotNull(null)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Object.hashCode()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Object.hashCode()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Hashing.smear(I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Hashing.smear(I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.RegularImmutableBiMap$BiMapEntry.getNextInKToVBucket()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableEntry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Object.equals(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.RegularImmutableBiMap$BiMapEntry.getNextInVToKBucket()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableEntry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Object.equals(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.io.BaseEncoding$StandardBaseEncoding.StandardBaseEncoding(java.lang.String, java.lang.Character) ************************
*Commit: commit 91634b6c9c2d65eae7bdd3928c884e58b86393f7 1352489034 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
java.lang.String.length()
com.google.common.math.IntMath.log2(I, java.math.RoundingMode)
java.lang.String.length()
java.lang.Integer.lowestOneBit(I)
java.lang.Math.min(I, I)
java.lang.String.length()
java.lang.Character.charValue()
java.lang.String.indexOf(I)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.Object)
java.util.Arrays.fill([B, B)
java.lang.String.length()
java.lang.String.charAt(I)
com.google.common.math.IntMath.divide(I, I, java.math.RoundingMode)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.String.length()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.math.IntMath.log2(I, java.math.RoundingMode)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.4250004919687986
Suporte: 0.0028076
Posição da Sugestão: 1
**************************
Chamada: java.lang.String.length()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Integer.lowestOneBit(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.4250004919687986
Suporte: 0.0028076
Posição da Sugestão: 1
**************************
Chamada: java.lang.Math.min(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.length()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Character.charValue()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.4250004919687986
Suporte: 0.0028076
Posição da Sugestão: 1
**************************
Chamada: java.lang.String.indexOf(I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Arrays.fill([B, B)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.length()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.4250004919687986
Suporte: 0.0028076
Posição da Sugestão: 1
**************************
Chamada: com.google.common.math.IntMath.divide(I, I, java.math.RoundingMode)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: separatingOutput ************************
*Commit: commit 91634b6c9c2d65eae7bdd3928c884e58b86393f7 1352489034 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.Object)
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
com.google.common.base.Preconditions.checkArgument(Z)
java.lang.String.length()
java.lang.String.charAt(I)
write
write
flush
close
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.length()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.4250004919687986
Suporte: 0.0028076
Posição da Sugestão: 1
**************************
Chamada: write
Nenhuma sugestão fornecida.
**************************
Chamada: write
Nenhuma sugestão fornecida.
**************************
Chamada: flush
Nenhuma sugestão fornecida.
**************************
Chamada: close
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.io.BaseEncoding.decode(java.lang.CharSequence) ************************
*Commit: commit 91634b6c9c2d65eae7bdd3928c884e58b86393f7 1352489034 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
asCharInput
decodingStream
java.lang.CharSequence.length()
com.google.common.io.BaseEncoding.maxDecodedSize(I)
read
read
com.google.common.io.BaseEncoding.extract([B, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: decodingStream
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.CharSequence.length()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.io.BaseEncoding.maxDecodedSize(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.6428561130958044
Suporte: 0.00445912
Posição da Sugestão: 0
**************************
Chamada: read
Nenhuma sugestão fornecida.
**************************
Chamada: read
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.io.BaseEncoding.extract([B, I)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.io.BaseEncoding$SeparatedBaseEncoding.maxEncodedSize(I) ************************
*Commit: commit 91634b6c9c2d65eae7bdd3928c884e58b86393f7 1352489034 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.io.BaseEncoding.maxEncodedSize(I)
java.lang.String.length()
java.lang.Math.max(I, I)
com.google.common.math.IntMath.divide(I, I, java.math.RoundingMode)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.String.length()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Math.max(I, I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.4250004919687986
Suporte: 0.0028076
Posição da Sugestão: 0
**************************
Chamada: com.google.common.math.IntMath.divide(I, I, java.math.RoundingMode)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.io.GwtWorkarounds.asCharInput(java.lang.CharSequence) ************************
*Commit: commit 91634b6c9c2d65eae7bdd3928c884e58b86393f7 1352489034 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.CharSequence)
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
java.lang.CharSequence.length()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.CharSequence.length()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.CharSequence.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.6428561130958044
Suporte: 0.00445912
Posição da Sugestão: 1
**************************
Chamada: java.lang.CharSequence.length()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
Também chamam:
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.40740773964369653
Suporte: 0.00181668
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.io.GwtWorkarounds.stringBuilderOutput(I) ************************
*Commit: commit 91634b6c9c2d65eae7bdd3928c884e58b86393f7 1352489034 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.toString()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.8367338112249753
Suporte: 0.00677126
Posição da Sugestão: 1
**************************
************************ Método Avaliado: separatingOutput ************************
*Commit: commit 91634b6c9c2d65eae7bdd3928c884e58b86393f7 1352489034 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.Object)
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
com.google.common.base.Preconditions.checkArgument(Z)
java.lang.String.length()
java.lang.String.charAt(I)
write
write
flush
close
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkNotNull(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.length()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.4250004919687986
Suporte: 0.0028076
Posição da Sugestão: 1
**************************
Chamada: write
Nenhuma sugestão fornecida.
**************************
Chamada: write
Nenhuma sugestão fornecida.
**************************
Chamada: flush
Nenhuma sugestão fornecida.
**************************
Chamada: close
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.io.BaseEncoding.decode(java.lang.CharSequence) ************************
*Commit: commit 91634b6c9c2d65eae7bdd3928c884e58b86393f7 1352489034 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
asCharInput
com.google.common.io.BaseEncoding.decodingStream(java.io.Reader)
java.lang.CharSequence.length()
com.google.common.io.BaseEncoding.maxDecodedSize(I)
read
read
com.google.common.io.BaseEncoding.extract([B, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.io.BaseEncoding.decodingStream(java.io.Reader)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.CharSequence.length()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.io.BaseEncoding.maxDecodedSize(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.6428561130958044
Suporte: 0.00445912
Posição da Sugestão: 0
**************************
Chamada: read
Nenhuma sugestão fornecida.
**************************
Chamada: read
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.io.BaseEncoding.extract([B, I)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.io.BaseEncoding.decodingStream(com.google.common.io.InputSupplier) ************************
*Commit: commit 91634b6c9c2d65eae7bdd3928c884e58b86393f7 1352489034 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.io.InputSupplier)
com.google.common.io.InputSupplier.getInput()
com.google.common.io.BaseEncoding.decodingStream(java.io.Reader)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.io.InputSupplier.getInput()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.io.InputSupplier)
Também chamam:
com.google.common.io.InputSupplier.getInput()
Confiança: 0.750001513752441
Suporte: 9.90917E-4
Posição da Sugestão: 1
**************************
Chamada: com.google.common.io.BaseEncoding.decodingStream(java.io.Reader)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.io.InputSupplier.getInput()
Também chamam:
com.google.common.io.Closeables.close(java.io.Closeable, Z)
Confiança: 0.6666655453704482
Suporte: 0.00198183
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.io.BaseEncoding$SeparatedBaseEncoding.maxEncodedSize(I) ************************
*Commit: commit 91634b6c9c2d65eae7bdd3928c884e58b86393f7 1352489034 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.io.BaseEncoding.maxEncodedSize(I)
java.lang.String.length()
java.lang.Math.max(I, I)
com.google.common.math.IntMath.divide(I, I, java.math.RoundingMode)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.String.length()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Math.max(I, I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.4250004919687986
Suporte: 0.0028076
Posição da Sugestão: 0
**************************
Chamada: com.google.common.math.IntMath.divide(I, I, java.math.RoundingMode)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.io.GwtWorkarounds.asCharInput(java.lang.CharSequence) ************************
*Commit: commit 91634b6c9c2d65eae7bdd3928c884e58b86393f7 1352489034 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.CharSequence)
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
java.lang.CharSequence.length()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.CharSequence.length()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.CharSequence.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.6428561130958044
Suporte: 0.00445912
Posição da Sugestão: 1
**************************
Chamada: java.lang.CharSequence.length()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
Também chamam:
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.40740773964369653
Suporte: 0.00181668
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.io.GwtWorkarounds.stringBuilderOutput(I) ************************
*Commit: commit 91634b6c9c2d65eae7bdd3928c884e58b86393f7 1352489034 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.toString()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.8367338112249753
Suporte: 0.00677126
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.Maps$FilteredEntryNavigableMap.pollFirstSatisfyingEntry(java.util.Iterator) ************************
*Commit: commit 017a5145ed8eaeac92ce997c679061b129f06ef4 1352489036 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.base.Predicate.apply(null)
java.util.Iterator.remove()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7688450467665082
Suporte: 0.0252684
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.Predicate.apply(null)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.remove()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.next()
com.google.common.base.Predicate.apply(null)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.6875009460952757
Suporte: 0.00181668
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.Maps$FilteredEntryNavigableMap.pollFirstEntry() ************************
*Commit: commit 017a5145ed8eaeac92ce997c679061b129f06ef4 1352489036 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Maps$FilteredEntryNavigableMap.sortedMap()
java.util.SortedMap.entrySet()
java.util.Set.iterator()
com.google.common.collect.Maps$FilteredEntryNavigableMap.pollFirstSatisfyingEntry(java.util.Iterator)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.SortedMap.entrySet()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Set.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Maps$FilteredEntryNavigableMap.pollFirstSatisfyingEntry(java.util.Iterator)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.526882259492682
Suporte: 0.00809249
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.4516133652794417
Suporte: 0.00693642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Confiança: 0.41935517474868483
Suporte: 0.00644096
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Maps$FilteredEntryNavigableMap.pollLastEntry() ************************
*Commit: commit 017a5145ed8eaeac92ce997c679061b129f06ef4 1352489036 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Maps$FilteredEntryNavigableMap.sortedMap()
java.util.NavigableMap.descendingMap()
java.util.SortedMap.entrySet()
java.util.Set.iterator()
com.google.common.collect.Maps$FilteredEntryNavigableMap.pollFirstSatisfyingEntry(java.util.Iterator)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.NavigableMap.descendingMap()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.SortedMap.entrySet()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Set.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Maps$FilteredEntryNavigableMap.pollFirstSatisfyingEntry(java.util.Iterator)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.526882259492682
Suporte: 0.00809249
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.4516133652794417
Suporte: 0.00693642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Confiança: 0.41935517474868483
Suporte: 0.00644096
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Maps$FilteredEntryNavigableMap.createKeySet() ************************
*Commit: commit 017a5145ed8eaeac92ce997c679061b129f06ef4 1352489036 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Maps$FilteredEntryNavigableMap.sortedMap()
java.util.SortedMap.entrySet()
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getKey()
java.util.Collection.contains(java.lang.Object)
com.google.common.base.Predicate.apply(null)
java.util.Iterator.remove()
com.google.common.collect.Maps$FilteredEntryNavigableMap.sortedMap()
java.util.SortedMap.entrySet()
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getKey()
java.util.Collection.contains(java.lang.Object)
com.google.common.base.Predicate.apply(null)
java.util.Iterator.remove()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.SortedMap.entrySet()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Set.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.526882259492682
Suporte: 0.00809249
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.9285712226191608
Suporte: 0.00644096
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.564102245627981
Suporte: 0.00363336
Posição da Sugestão: 1
**************************
Chamada: java.util.Collection.contains(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7222235304011437
Suporte: 0.00214699
Posição da Sugestão: 7
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7083334384547654
Suporte: 0.0028076
Posição da Sugestão: 7
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7083334384547654
Suporte: 0.0028076
Posição da Sugestão: 7
**************************
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.next()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6666680122230341
Suporte: 0.00165153
Posição da Sugestão: 7
**************************
Usuários que chamam:
java.util.Iterator.next()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6571418685719723
Suporte: 0.00379851
Posição da Sugestão: 7
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6424601604070048
Suporte: 0.0189926
Posição da Sugestão: 7
**************************
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.6153824656845164
Suporte: 0.00132122
Posição da Sugestão: 7
**************************
Chamada: com.google.common.base.Predicate.apply(null)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Collection.contains(java.lang.Object)
Também chamam:
java.util.Iterator.remove()
Confiança: 1.0
Suporte: 0.00132122
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.remove()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.next()
com.google.common.base.Predicate.apply(null)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.6875009460952757
Suporte: 0.00181668
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Maps$FilteredEntryNavigableMap.sortedMap()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.SortedMap.entrySet()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Set.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.526882259492682
Suporte: 0.00809249
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.9285712226191608
Suporte: 0.00644096
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.564102245627981
Suporte: 0.00363336
Posição da Sugestão: 1
**************************
Chamada: java.util.Collection.contains(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7222235304011437
Suporte: 0.00214699
Posição da Sugestão: 8
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7083334384547654
Suporte: 0.0028076
Posição da Sugestão: 8
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7083334384547654
Suporte: 0.0028076
Posição da Sugestão: 8
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7058804673030347
Suporte: 0.00198183
Posição da Sugestão: 8
**************************
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.next()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6666680122230341
Suporte: 0.00165153
Posição da Sugestão: 8
**************************
Usuários que chamam:
java.util.Iterator.next()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6571418685719723
Suporte: 0.00379851
Posição da Sugestão: 8
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6424601604070048
Suporte: 0.0189926
Posição da Sugestão: 8
**************************
Usuários que chamam:
java.util.Set.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.6153824656845164
Suporte: 0.00132122
Posição da Sugestão: 8
**************************
Chamada: com.google.common.base.Predicate.apply(null)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Collection.contains(java.lang.Object)
Também chamam:
java.util.Iterator.remove()
Confiança: 1.0
Suporte: 0.00132122
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.remove()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.next()
com.google.common.base.Predicate.apply(null)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.6875009460952757
Suporte: 0.00181668
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.io.ByteSource.hash(com.google.common.hash.HashFunction) ************************
*Commit: commit c61612cdab133e819a311f488f4df5b732d22631 1352497164 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.hash.HashFunction.newHasher()
com.google.common.hash.Funnels.asOutputStream(com.google.common.hash.PrimitiveSink)
com.google.common.io.ByteSource.copyTo(java.io.OutputStream)
com.google.common.hash.Hasher.hash()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.hash.Funnels.asOutputStream(com.google.common.hash.PrimitiveSink)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.hash.HashFunction.newHasher()
Também chamam:
com.google.common.hash.Hasher.hash()
Confiança: 0.8181793161151112
Suporte: 0.00148637
Posição da Sugestão: 1
**************************
Chamada: com.google.common.io.ByteSource.copyTo(java.io.OutputStream)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.hash.Hasher.hash()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.io.CharSink.writeLines(java.lang.Iterable, java.lang.String) ************************
*Commit: commit c61612cdab133e819a311f488f4df5b732d22631 1352497164 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.Iterable)
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
create
com.google.common.io.CharSink.openBufferedStream()
add
java.io.Writer.append(java.lang.CharSequence)
java.io.Writer.append(java.lang.CharSequence)
rethrow
close
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkNotNull(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.lang.Iterable)
Também chamam:
java.lang.Iterable.iterator()
Confiança: 0.6399988374402371
Suporte: 0.00264244
Posição da Sugestão: 0
**************************
Chamada: create
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.io.CharSink.openBufferedStream()
Nenhuma sugestão fornecida.
**************************
Chamada: add
Nenhuma sugestão fornecida.
**************************
Chamada: java.io.Writer.append(java.lang.CharSequence)
Nenhuma sugestão fornecida.
**************************
Chamada: java.io.Writer.append(java.lang.CharSequence)
Nenhuma sugestão fornecida.
**************************
Chamada: rethrow
Nenhuma sugestão fornecida.
**************************
Chamada: close
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.io.CharStreams$StringCharSource.lines() ************************
*Commit: commit c61612cdab133e819a311f488f4df5b732d22631 1352497164 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Splitter.split(java.lang.CharSequence)
java.lang.Iterable.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Iterator.hasNext()
java.lang.String.isEmpty()
com.google.common.collect.AbstractIterator.endOfData()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.Iterable.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Iterable.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.826087070983096
Suporte: 0.0031379
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.isEmpty()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Iterable.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.8571427335714966
Suporte: 9.90917E-4
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.lang.Iterable.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.826087070983096
Suporte: 0.0031379
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.8108106338932848
Suporte: 0.00495458
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.next()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7741936113943285
Suporte: 0.00396367
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7688450467665082
Suporte: 0.0252684
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7407425680403309
Suporte: 0.00330306
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.AbstractIterator.endOfData()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.io.CharStreams$StringCharSource.readFirstLine() ************************
*Commit: commit c61612cdab133e819a311f488f4df5b732d22631 1352497164 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.io.CharStreams$StringCharSource.lines()
java.lang.Iterable.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.Iterable.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.Iterable.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.826087070983096
Suporte: 0.0031379
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.io.CharStreams$StringCharSource.toString() ************************
*Commit: commit c61612cdab133e819a311f488f4df5b732d22631 1352497164 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.String.length()
java.lang.String.substring(I, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.String.substring(I, I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.4250004919687986
Suporte: 0.0028076
Posição da Sugestão: 0
**************************
************************ Método Avaliado: FileByteSink ************************
*Commit: commit c61612cdab133e819a311f488f4df5b732d22631 1352497164 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.io.File)
com.google.common.collect.ImmutableSet.copyOf([Ljava.lang.Object;)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableSet.copyOf([Ljava.lang.Object;)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.io.File)
Também chamam:
com.google.common.base.Preconditions.checkNotNull(java.nio.charset.Charset)
Confiança: 0.42424275785131854
Suporte: 0.00231214
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.io.BaseEncoding$StandardBaseEncoding.toString() ************************
*Commit: commit da4ca2f9535ccf93454ad7dc75165651f1c7e2c6 1353009804 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.io.BaseEncoding$Alphabet.toString()
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.Object)
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.toString()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.StringBuilder.append(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.9090910341942444
Suporte: 0.00660611
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.0028076
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00165153
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.Object)
Também chamam:
java.lang.StringBuilder.append(C)
Confiança: 0.5833345947937008
Suporte: 0.00115607
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00115607
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.io.BaseEncoding$StandardBaseEncoding.toString() ************************
*Commit: commit da4ca2f9535ccf93454ad7dc75165651f1c7e2c6 1353009804 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.io.BaseEncoding$Alphabet.toString()
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.Object)
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.toString()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.StringBuilder.append(java.lang.String)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.9090910341942444
Suporte: 0.00660611
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.0028076
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00165153
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.Object)
Também chamam:
java.lang.StringBuilder.append(C)
Confiança: 0.5833345947937008
Suporte: 0.00115607
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00115607
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.primitives.Longs.tryParse(java.lang.String) ************************
*Commit: commit 4fa056813cc1db3c594f0d0d8560d65c63c81b7d 1353009812 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.lang.String)
java.lang.String.isEmpty()
java.lang.String.charAt(I)
java.lang.String.length()
java.lang.String.charAt(I)
java.lang.String.length()
java.lang.String.charAt(I)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.String.isEmpty()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.charAt(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.length()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.4250004919687986
Suporte: 0.0028076
Posição da Sugestão: 1
**************************
Chamada: java.lang.String.length()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.String.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.4250004919687986
Suporte: 0.0028076
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableMultimap.entryIterator() ************************
*Commit: commit 5b96fd5a6377e0d0a01b2f2da39196882043e62c 1353009813 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableMap.entrySet()
com.google.common.collect.ImmutableSet.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.hasNext()
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.collect.ImmutableCollection.iterator()
java.util.Iterator.next()
com.google.common.collect.Maps.immutableEntry(com.google.common.collect.ImmutableMultimap$K, com.google.common.collect.ImmutableMultimap$V)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableSet.iterator()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableMap.entrySet()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.6250018921905512
Suporte: 0.00165153
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableSet.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.8750018921905511
Suporte: 0.00115607
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableSet.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 1.0
Suporte: 9.90917E-4
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableSet.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 1.0
Suporte: 9.90917E-4
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableSet.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 1.0
Suporte: 9.90917E-4
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7083334384547654
Suporte: 0.0028076
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ImmutableCollection.iterator()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5
Suporte: 0.00247729
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5
Suporte: 0.00247729
Posição da Sugestão: 0
**************************
Chamada: java.util.Iterator.next()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Maps.immutableEntry(com.google.common.collect.ImmutableMultimap$K, com.google.common.collect.ImmutableMultimap$V)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableMultimap.entryIterator() ************************
*Commit: commit 5b96fd5a6377e0d0a01b2f2da39196882043e62c 1353009813 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableMap.entrySet()
com.google.common.collect.ImmutableSet.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.hasNext()
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.collect.ImmutableCollection.iterator()
java.util.Iterator.next()
com.google.common.collect.Maps.immutableEntry(com.google.common.collect.ImmutableMultimap$K, com.google.common.collect.ImmutableMultimap$V)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableSet.iterator()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableMap.entrySet()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.6250018921905512
Suporte: 0.00165153
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableSet.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.8750018921905511
Suporte: 0.00115607
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableSet.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 1.0
Suporte: 9.90917E-4
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableSet.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 1.0
Suporte: 9.90917E-4
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableSet.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 1.0
Suporte: 9.90917E-4
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7083334384547654
Suporte: 0.0028076
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ImmutableCollection.iterator()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5
Suporte: 0.00247729
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5
Suporte: 0.00247729
Posição da Sugestão: 0
**************************
Chamada: java.util.Iterator.next()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Maps.immutableEntry(com.google.common.collect.ImmutableMultimap$K, com.google.common.collect.ImmutableMultimap$V)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Multisets$FilteredMultiset.createElementSet() ************************
*Commit: commit a45095a38959a46331f3bdcb18ec37fec835e4f4 1353009854 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Multiset.elementSet()
com.google.common.collect.Sets.filter(java.util.Set, com.google.common.base.Predicate)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Sets.filter(java.util.Set, com.google.common.base.Predicate)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multiset.elementSet()
Também chamam:
java.util.Set.size()
Confiança: 0.44999788075299874
Suporte: 0.00148637
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Multisets$FilteredMultiset.removeAll(java.util.Collection) ************************
*Commit: commit a45095a38959a46331f3bdcb18ec37fec835e4f4 1353009854 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.AbstractMultiset.elementSet()
java.util.Set.removeAll(java.util.Collection)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Set.removeAll(java.util.Collection)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.AbstractMultiset.elementSet()
Também chamam:
java.util.Set.size()
Confiança: 1.0
Suporte: 9.90917E-4
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Multisets$FilteredMultiset.FilteredMultiset(com.google.common.collect.Multiset, com.google.common.base.Predicate) ************************
*Commit: commit a45095a38959a46331f3bdcb18ec37fec835e4f4 1353009854 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Multiset)
com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Predicate)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkNotNull(com.google.common.base.Predicate)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Multiset)
Também chamam:
com.google.common.collect.Multiset.count(java.lang.Object)
Confiança: 0.7777807679110853
Suporte: 0.00115607
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Multiset)
Também chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Multiset)
Confiança: 0.7777807679110853
Suporte: 0.00115607
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Multiset)
Também chamam:
com.google.common.collect.Multiset.entrySet()
Confiança: 0.7777807679110853
Suporte: 0.00115607
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Multiset)
Também chamam:
com.google.common.collect.Multiset$Entry.getCount()
Confiança: 0.7777807679110853
Suporte: 0.00115607
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Multiset)
Também chamam:
com.google.common.collect.Multiset$Entry.getElement()
Confiança: 0.7777807679110853
Suporte: 0.00115607
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Multiset)
Também chamam:
com.google.common.collect.Multiset.entrySet()
com.google.common.collect.Multiset$Entry.getCount()
Confiança: 0.7777807679110853
Suporte: 0.00115607
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Multiset)
Também chamam:
com.google.common.collect.Multiset.count(java.lang.Object)
com.google.common.collect.Multiset$Entry.getCount()
Confiança: 0.7777807679110853
Suporte: 0.00115607
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Multiset)
Também chamam:
com.google.common.collect.Multiset.entrySet()
com.google.common.collect.Multiset$Entry.getElement()
Confiança: 0.7777807679110853
Suporte: 0.00115607
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Multiset)
Também chamam:
com.google.common.collect.Multiset$Entry.getElement()
com.google.common.collect.Multiset.count(java.lang.Object)
Confiança: 0.7777807679110853
Suporte: 0.00115607
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Multiset)
Também chamam:
com.google.common.collect.Multiset.entrySet()
com.google.common.collect.Multiset.count(java.lang.Object)
Confiança: 0.7777807679110853
Suporte: 0.00115607
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Multisets$FilteredMultiset.retainAll(java.util.Collection) ************************
*Commit: commit a45095a38959a46331f3bdcb18ec37fec835e4f4 1353009854 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.AbstractMultiset.elementSet()
java.util.Set.retainAll(java.util.Collection)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Set.retainAll(java.util.Collection)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.AbstractMultiset.elementSet()
Também chamam:
java.util.Set.size()
Confiança: 1.0
Suporte: 9.90917E-4
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Multisets$FilteredMultiset.distinctElements() ************************
*Commit: commit a45095a38959a46331f3bdcb18ec37fec835e4f4 1353009854 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.AbstractMultiset.elementSet()
java.util.Set.size()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Set.size()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.AbstractMultiset.elementSet()
Também chamam:
java.util.Set.size()
Confiança: 1.0
Suporte: 9.90917E-4
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.Multisets$FilteredMultiset.createEntrySet() ************************
*Commit: commit a45095a38959a46331f3bdcb18ec37fec835e4f4 1353009854 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Multiset.entrySet()
com.google.common.collect.Sets.filter(java.util.Set, com.google.common.base.Predicate)
com.google.common.collect.Multiset$Entry.getElement()
com.google.common.base.Predicate.apply(null)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Sets.filter(java.util.Set, com.google.common.base.Predicate)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multiset.entrySet()
Também chamam:
com.google.common.collect.Multiset$Entry.getElement()
Confiança: 0.6451616683659717
Suporte: 0.00330306
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Multiset$Entry.getElement()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Predicate.apply(null)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multiset.entrySet()
com.google.common.collect.Multiset$Entry.getElement()
Também chamam:
com.google.common.collect.Multiset$Entry.getCount()
Confiança: 0.9499978807529987
Suporte: 0.0031379
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Multiset$Entry.getElement()
Também chamam:
com.google.common.collect.Multiset$Entry.getCount()
Confiança: 0.7307701264796912
Suporte: 0.00627581
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Multiset.entrySet()
com.google.common.collect.Multiset$Entry.getElement()
Também chamam:
com.google.common.collect.Multiset.count(java.lang.Object)
Confiança: 0.6500003027495717
Suporte: 0.00214699
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Multiset.entrySet()
com.google.common.collect.Multiset$Entry.getElement()
Também chamam:
com.google.common.collect.Multiset.count(java.lang.Object)
com.google.common.collect.Multiset$Entry.getCount()
Confiança: 0.44999788075299874
Suporte: 0.00148637
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Multisets$FilteredMultiset.clear() ************************
*Commit: commit a45095a38959a46331f3bdcb18ec37fec835e4f4 1353009854 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.AbstractMultiset.elementSet()
java.util.Set.clear()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Set.clear()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.AbstractMultiset.elementSet()
Também chamam:
java.util.Set.size()
Confiança: 1.0
Suporte: 9.90917E-4
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Multimaps$TransformedEntriesMultimap.createValues() ************************
*Commit: commit 1d10f562e30a1d314ced9d3bdf510891878baad5 1353526254 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Multimap.entries()
com.google.common.collect.Collections2.transform(java.util.Collection, com.google.common.base.Function)
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.collect.Maps$EntryTransformer.transformEntry(null, null)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Collections2.transform(java.util.Collection, com.google.common.base.Function)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multimap.entries()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.57894770387839
Suporte: 0.00181668
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multimap.entries()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.8750018921905511
Suporte: 0.00115607
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Maps$EntryTransformer.transformEntry(null, null)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Multimaps$TransformedEntriesMultimap.entryIterator() ************************
*Commit: commit 1d10f562e30a1d314ced9d3bdf510891878baad5 1353526254 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Multimap.entries()
java.util.Collection.iterator()
com.google.common.collect.Iterators.transform(java.util.Iterator, com.google.common.base.Function)
java.util.Map$Entry.getKey()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.collect.Maps$EntryTransformer.transformEntry(null, null)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Collection.iterator()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multimap.entries()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.57894770387839
Suporte: 0.00181668
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Iterators.transform(java.util.Iterator, com.google.common.base.Function)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.5483872227886571
Suporte: 0.0028076
Posição da Sugestão: 0
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multimap.entries()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.8750018921905511
Suporte: 0.00115607
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multimap.entries()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.8750018921905511
Suporte: 0.00115607
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Maps$EntryTransformer.transformEntry(null, null)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Multimaps$TransformedEntriesMultimap.createAsMap() ************************
*Commit: commit 1d10f562e30a1d314ced9d3bdf510891878baad5 1353526254 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Multimap.asMap()
com.google.common.collect.Maps.transformEntries(java.util.Map, com.google.common.collect.Maps$EntryTransformer)
com.google.common.collect.Multimaps$TransformedEntriesMultimap.transform(com.google.common.collect.Multimaps$TransformedEntriesMultimap$K, java.util.Collection)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Maps.transformEntries(java.util.Map, com.google.common.collect.Maps$EntryTransformer)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multimap.asMap()
Também chamam:
java.util.Map.entrySet()
Confiança: 0.43333440977842724
Suporte: 0.00214699
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Multimaps$TransformedEntriesMultimap.transform(com.google.common.collect.Multimaps$TransformedEntriesMultimap$K, java.util.Collection)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Multimaps$TransformedEntriesMultimap.createValues() ************************
*Commit: commit 1d10f562e30a1d314ced9d3bdf510891878baad5 1353526254 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Multimap.entries()
com.google.common.collect.Collections2.transform(java.util.Collection, com.google.common.base.Function)
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.collect.Maps$EntryTransformer.transformEntry(null, null)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Collections2.transform(java.util.Collection, com.google.common.base.Function)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multimap.entries()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.57894770387839
Suporte: 0.00181668
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multimap.entries()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.8750018921905511
Suporte: 0.00115607
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Maps$EntryTransformer.transformEntry(null, null)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Multimaps$TransformedEntriesMultimap.entryIterator() ************************
*Commit: commit 1d10f562e30a1d314ced9d3bdf510891878baad5 1353526254 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Multimap.entries()
java.util.Collection.iterator()
com.google.common.collect.Iterators.transform(java.util.Iterator, com.google.common.base.Function)
java.util.Map$Entry.getKey()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.collect.Maps$EntryTransformer.transformEntry(null, null)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Collection.iterator()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multimap.entries()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.57894770387839
Suporte: 0.00181668
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Iterators.transform(java.util.Iterator, com.google.common.base.Function)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.5483872227886571
Suporte: 0.0028076
Posição da Sugestão: 0
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multimap.entries()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.8750018921905511
Suporte: 0.00115607
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multimap.entries()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.8750018921905511
Suporte: 0.00115607
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Maps$EntryTransformer.transformEntry(null, null)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Multimaps$TransformedEntriesMultimap.createAsMap() ************************
*Commit: commit 1d10f562e30a1d314ced9d3bdf510891878baad5 1353526254 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Multimap.asMap()
com.google.common.collect.Maps.transformEntries(java.util.Map, com.google.common.collect.Maps$EntryTransformer)
com.google.common.collect.Multimaps$TransformedEntriesMultimap.transform(com.google.common.collect.Multimaps$TransformedEntriesMultimap$K, java.util.Collection)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Maps.transformEntries(java.util.Map, com.google.common.collect.Maps$EntryTransformer)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multimap.asMap()
Também chamam:
java.util.Map.entrySet()
Confiança: 0.43333440977842724
Suporte: 0.00214699
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Multimaps$TransformedEntriesMultimap.transform(com.google.common.collect.Multimaps$TransformedEntriesMultimap$K, java.util.Collection)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableRangeMap.subRangeMap(com.google.common.collect.Range) ************************
*Commit: commit 6506c4d1e0237dc5a3c875d2d10c329e902c5523 1354126427 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Range)
com.google.common.collect.Range.isEmpty()
com.google.common.collect.ImmutableRangeMap.of()
upperBoundFn
com.google.common.collect.SortedLists.binarySearch(java.util.List, com.google.common.base.Function, com.google.common.collect.Cut, com.google.common.collect.SortedLists$KeyPresentBehavior, com.google.common.collect.SortedLists$KeyAbsentBehavior)
lowerBoundFn
com.google.common.collect.SortedLists.binarySearch(java.util.List, com.google.common.base.Function, com.google.common.collect.Cut, com.google.common.collect.SortedLists$KeyPresentBehavior, com.google.common.collect.SortedLists$KeyAbsentBehavior)
com.google.common.collect.ImmutableRangeMap.of()
com.google.common.base.Preconditions.checkElementIndex(I, I)
java.util.List.get(I)
com.google.common.collect.Range.intersection(com.google.common.collect.Range)
java.util.List.get(I)
com.google.common.collect.ImmutableList.subList(I, I)
com.google.common.collect.Range.isConnected(com.google.common.collect.Range)
com.google.common.collect.Range.intersection(com.google.common.collect.Range)
com.google.common.collect.ImmutableRangeMap.subRangeMap(com.google.common.collect.Range)
com.google.common.collect.ImmutableRangeMap.of()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Range.isEmpty()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Range)
Também chamam:
com.google.common.collect.Range.isEmpty()
Confiança: 0.7777807679110853
Suporte: 0.00115607
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ImmutableRangeMap.of()
Nenhuma sugestão fornecida.
**************************
Chamada: upperBoundFn
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.SortedLists.binarySearch(java.util.List, com.google.common.base.Function, com.google.common.collect.Cut, com.google.common.collect.SortedLists$KeyPresentBehavior, com.google.common.collect.SortedLists$KeyAbsentBehavior)
Nenhuma sugestão fornecida.
**************************
Chamada: lowerBoundFn
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.SortedLists.binarySearch(java.util.List, com.google.common.base.Function, com.google.common.collect.Cut, com.google.common.collect.SortedLists$KeyPresentBehavior, com.google.common.collect.SortedLists$KeyAbsentBehavior)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableRangeMap.of()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkElementIndex(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Range.intersection(com.google.common.collect.Range)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableList.subList(I, I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Range.isConnected(com.google.common.collect.Range)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Range.intersection(com.google.common.collect.Range)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableRangeMap.subRangeMap(com.google.common.collect.Range)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableRangeMap.of()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap.get(java.lang.Object) ************************
*Commit: commit 35fbd05c6f9d09db66b98285b00b77bccd3fc468 1354126804 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Range.encloses(com.google.common.collect.Range)
com.google.common.collect.Range.isEmpty()
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
java.util.NavigableMap.floorEntry(com.google.common.collect.Cut)
java.util.Map$Entry.getValue()
java.util.Map.get(java.lang.Object)
com.google.common.collect.TreeRangeMap$RangeMapEntry.getKey()
com.google.common.collect.Range.isConnected(com.google.common.collect.Range)
com.google.common.collect.TreeRangeMap$RangeMapEntry.getKey()
com.google.common.collect.Range.intersection(com.google.common.collect.Range)
com.google.common.collect.Range.equals(java.lang.Object)
com.google.common.collect.TreeRangeMap$RangeMapEntry.getValue()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Range.isEmpty()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.NavigableMap.floorEntry(com.google.common.collect.Cut)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Também chamam:
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Confiança: 0.6999993945008567
Suporte: 0.00115607
Posição da Sugestão: 0
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.get(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.TreeRangeMap$RangeMapEntry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Range.isConnected(com.google.common.collect.Range)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.TreeRangeMap$RangeMapEntry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Range.intersection(com.google.common.collect.Range)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Range.equals(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.TreeRangeMap$RangeMapEntry.getValue()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap.entrySet() ************************
*Commit: commit 35fbd05c6f9d09db66b98285b00b77bccd3fc468 1354126804 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Range.isEmpty()
com.google.common.collect.Iterators.emptyIterator()
java.util.NavigableMap.floorKey(com.google.common.collect.Cut)
com.google.common.base.Objects.firstNonNull(com.google.common.collect.Cut, com.google.common.collect.Cut)
java.util.NavigableMap.tailMap(com.google.common.collect.Cut, Z)
java.util.SortedMap.values()
java.util.Collection.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.collect.TreeRangeMap$RangeMapEntry.getLowerBound()
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
com.google.common.collect.TreeRangeMap$RangeMapEntry.getUpperBound()
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
com.google.common.collect.TreeRangeMap$RangeMapEntry.getKey()
com.google.common.collect.Range.intersection(com.google.common.collect.Range)
com.google.common.collect.TreeRangeMap$RangeMapEntry.getValue()
com.google.common.collect.Maps.immutableEntry(com.google.common.collect.Range, com.google.common.collect.TreeRangeMap$V)
com.google.common.collect.AbstractIterator.endOfData()
com.google.common.base.Predicates.in(java.util.Collection)
com.google.common.base.Predicates.not(com.google.common.base.Predicate)
com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap.removeIf(com.google.common.base.Predicate)
null.iterator()
com.google.common.collect.Iterators.size(java.util.Iterator)
null.iterator()
java.util.Iterator.hasNext()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Iterators.emptyIterator()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.NavigableMap.floorKey(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Objects.firstNonNull(com.google.common.collect.Cut, com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.NavigableMap.tailMap(com.google.common.collect.Cut, Z)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.SortedMap.values()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.5483872227886571
Suporte: 0.0028076
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 1.0
Suporte: 0.00198183
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.TreeRangeMap$RangeMapEntry.getLowerBound()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.7499987385396326
Suporte: 0.00148637
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5882355036329961
Suporte: 0.00165153
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.TreeRangeMap$RangeMapEntry.getUpperBound()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Também chamam:
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Confiança: 0.6999993945008567
Suporte: 0.00115607
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.TreeRangeMap$RangeMapEntry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Também chamam:
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Confiança: 0.6999993945008567
Suporte: 0.00115607
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Range.intersection(com.google.common.collect.Range)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.TreeRangeMap$RangeMapEntry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Maps.immutableEntry(com.google.common.collect.Range, com.google.common.collect.TreeRangeMap$V)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.AbstractIterator.endOfData()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Predicates.in(java.util.Collection)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Predicates.not(com.google.common.base.Predicate)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap.removeIf(com.google.common.base.Predicate)
Nenhuma sugestão fornecida.
**************************
Chamada: null.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Iterators.size(java.util.Iterator)
Nenhuma sugestão fornecida.
**************************
Chamada: null.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap.removeIf(com.google.common.base.Predicate) ************************
*Commit: commit 35fbd05c6f9d09db66b98285b00b77bccd3fc468 1354126804 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Lists.newArrayList()
com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap.entrySet()
com.google.common.base.Predicate.apply(null)
java.util.Map$Entry.getKey()
java.util.List.add(com.google.common.collect.Range)
com.google.common.collect.TreeRangeMap.remove(com.google.common.collect.Range)
java.util.List.isEmpty()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.TreeRangeMap$SubRangeMap$SubRangeMapAsMap.entrySet()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Predicate.apply(null)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.add(com.google.common.collect.Range)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6424601604070048
Suporte: 0.0189926
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.TreeRangeMap.remove(com.google.common.collect.Range)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.isEmpty()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.TreeRangeMap$SubRangeMap.span() ************************
*Commit: commit 35fbd05c6f9d09db66b98285b00b77bccd3fc468 1354126804 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.NavigableMap.floorEntry(com.google.common.collect.Cut)
java.util.Map$Entry.getValue()
com.google.common.collect.TreeRangeMap$RangeMapEntry.getUpperBound()
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
java.util.NavigableMap.ceilingKey(com.google.common.collect.Cut)
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
java.util.NavigableMap.lowerEntry(com.google.common.collect.Cut)
java.util.Map$Entry.getValue()
com.google.common.collect.TreeRangeMap$RangeMapEntry.getUpperBound()
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
java.util.Map$Entry.getValue()
com.google.common.collect.TreeRangeMap$RangeMapEntry.getUpperBound()
com.google.common.collect.Range.create(com.google.common.collect.Cut, com.google.common.collect.Cut)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.TreeRangeMap$RangeMapEntry.getUpperBound()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.NavigableMap.ceilingKey(com.google.common.collect.Cut)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Também chamam:
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Confiança: 0.6999993945008567
Suporte: 0.00115607
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.NavigableMap.lowerEntry(com.google.common.collect.Cut)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Também chamam:
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Confiança: 0.6999993945008567
Suporte: 0.00115607
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.TreeRangeMap$RangeMapEntry.getUpperBound()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Também chamam:
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Confiança: 0.6999993945008567
Suporte: 0.00115607
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.TreeRangeMap$RangeMapEntry.getUpperBound()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Range.create(com.google.common.collect.Cut, com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.TreeRangeMap$SubRangeMap.getEntry(com.google.common.collect.TreeRangeMap$K) ************************
*Commit: commit 35fbd05c6f9d09db66b98285b00b77bccd3fc468 1354126804 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Range.contains(com.google.common.collect.TreeRangeMap$K)
com.google.common.collect.TreeRangeMap.getEntry(com.google.common.collect.TreeRangeMap$K)
java.util.Map$Entry.getKey()
com.google.common.collect.Range.intersection(com.google.common.collect.Range)
java.util.Map$Entry.getValue()
com.google.common.collect.Maps.immutableEntry(com.google.common.collect.Range, com.google.common.collect.TreeRangeMap$V)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.TreeRangeMap.getEntry(com.google.common.collect.TreeRangeMap$K)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Range.intersection(com.google.common.collect.Range)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6424601604070048
Suporte: 0.0189926
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Maps.immutableEntry(com.google.common.collect.Range, com.google.common.collect.TreeRangeMap$V)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.FilteredEntryMultimap$Keys.entrySet() ************************
*Commit: commit 2eabf213074afc5b2483c687598e6a3762c0ec5f 1354210628 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Multimaps$Keys.entryIterator()
com.google.common.collect.FilteredEntryMultimap.keySet()
java.util.Set.size()
com.google.common.collect.FilteredEntryMultimap.removeIf(com.google.common.base.Predicate)
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
java.util.Collection.size()
com.google.common.collect.Multisets.immutableEntry(com.google.common.collect.FilteredEntryMultimap$K, I)
com.google.common.base.Predicate.apply(null)
com.google.common.base.Predicates.in(java.util.Collection)
null.removeIf(com.google.common.base.Predicate)
com.google.common.base.Predicates.in(java.util.Collection)
com.google.common.base.Predicates.not(com.google.common.base.Predicate)
null.removeIf(com.google.common.base.Predicate)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.FilteredEntryMultimap.keySet()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Set.size()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.FilteredEntryMultimap.removeIf(com.google.common.base.Predicate)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6424601604070048
Suporte: 0.0189926
Posição da Sugestão: 1
**************************
Chamada: java.util.Collection.size()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Multisets.immutableEntry(com.google.common.collect.FilteredEntryMultimap$K, I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Predicate.apply(null)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Predicates.in(java.util.Collection)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
com.google.common.base.Predicate.apply(null)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5833345947937008
Suporte: 0.00115607
Posição da Sugestão: 0
**************************
Chamada: null.removeIf(com.google.common.base.Predicate)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Predicates.in(java.util.Collection)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Predicates.not(com.google.common.base.Predicate)
Nenhuma sugestão fornecida.
**************************
Chamada: null.removeIf(com.google.common.base.Predicate)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.FilteredEntryMultimap.removeIf(com.google.common.base.Predicate) ************************
*Commit: commit 2eabf213074afc5b2483c687598e6a3762c0ec5f 1354210628 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
asMap
entrySet
iterator
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.collect.FilteredEntryMultimap.filterCollection(java.util.Collection, com.google.common.base.Predicate)
java.util.Collection.isEmpty()
com.google.common.collect.Maps.immutableEntry(com.google.common.collect.FilteredEntryMultimap$K, java.util.Collection)
com.google.common.base.Predicate.apply(null)
java.util.Collection.size()
java.util.Map$Entry.getValue()
java.util.Collection.size()
java.util.Iterator.remove()
java.util.Collection.clear()
---------------- Chamadas de método adicionadas ---------------
Chamada: entrySet
Nenhuma sugestão fornecida.
**************************
Chamada: iterator
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7688450467665082
Suporte: 0.0252684
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7083334384547654
Suporte: 0.0028076
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.FilteredEntryMultimap.filterCollection(java.util.Collection, com.google.common.base.Predicate)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5
Suporte: 0.00247729
Posição da Sugestão: 1
**************************
Chamada: java.util.Collection.isEmpty()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Maps.immutableEntry(com.google.common.collect.FilteredEntryMultimap$K, java.util.Collection)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Predicate.apply(null)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.size()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Map$Entry.getValue()
com.google.common.base.Predicate.apply(null)
Também chamam:
java.util.Iterator.remove()
Confiança: 1.0
Suporte: 0.00115607
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.size()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5
Suporte: 0.00247729
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.remove()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.clear()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.FilteredEntryMultimap$AsMap.remove(java.lang.Object) ************************
*Commit: commit 2eabf213074afc5b2483c687598e6a3762c0ec5f 1354210628 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
asMap
get
com.google.common.collect.Lists.newArrayList()
java.util.Collection.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.collect.FilteredEntryMultimap.satisfies(com.google.common.collect.FilteredEntryMultimap$K, com.google.common.collect.FilteredEntryMultimap$V)
java.util.Iterator.remove()
java.util.List.add(com.google.common.collect.FilteredEntryMultimap$V)
java.util.List.isEmpty()
com.google.common.collect.Sets.newLinkedHashSet(java.lang.Iterable)
java.util.Collections.unmodifiableSet(java.util.Set)
java.util.Collections.unmodifiableList(java.util.List)
---------------- Chamadas de método adicionadas ---------------
Chamada: get
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Lists.newArrayList()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.5483872227886571
Suporte: 0.0028076
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 1.0
Suporte: 0.00198183
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.FilteredEntryMultimap.satisfies(com.google.common.collect.FilteredEntryMultimap$K, com.google.common.collect.FilteredEntryMultimap$V)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.7499987385396326
Suporte: 0.00148637
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.remove()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.add(com.google.common.collect.FilteredEntryMultimap$V)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.isEmpty()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Sets.newLinkedHashSet(java.lang.Iterable)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collections.unmodifiableSet(java.util.Set)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collections.unmodifiableList(java.util.List)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.FilteredEntryMultimap$AsMap.values() ************************
*Commit: commit 2eabf213074afc5b2483c687598e6a3762c0ec5f 1354210628 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
asMap
entrySet
iterator
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.collect.FilteredEntryMultimap.filterCollection(java.util.Collection, com.google.common.base.Predicate)
java.util.Collection.isEmpty()
java.util.Collection.equals(java.lang.Object)
java.util.Collection.size()
java.util.Map$Entry.getValue()
java.util.Collection.size()
java.util.Iterator.remove()
java.util.Collection.clear()
com.google.common.base.Predicates.in(java.util.Collection)
valueFunction
com.google.common.base.Predicates.compose(com.google.common.base.Predicate, com.google.common.base.Function)
com.google.common.collect.FilteredEntryMultimap.removeIf(com.google.common.base.Predicate)
com.google.common.base.Predicates.in(java.util.Collection)
com.google.common.base.Predicates.not(com.google.common.base.Predicate)
valueFunction
com.google.common.base.Predicates.compose(com.google.common.base.Predicate, com.google.common.base.Function)
com.google.common.collect.FilteredEntryMultimap.removeIf(com.google.common.base.Predicate)
---------------- Chamadas de método adicionadas ---------------
Chamada: entrySet
Nenhuma sugestão fornecida.
**************************
Chamada: iterator
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7688450467665082
Suporte: 0.0252684
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7083334384547654
Suporte: 0.0028076
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.FilteredEntryMultimap.filterCollection(java.util.Collection, com.google.common.base.Predicate)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5
Suporte: 0.00247729
Posição da Sugestão: 1
**************************
Chamada: java.util.Collection.isEmpty()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.equals(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.size()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5
Suporte: 0.00247729
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.remove()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.clear()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Predicates.in(java.util.Collection)
Nenhuma sugestão fornecida.
**************************
Chamada: valueFunction
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Predicates.compose(com.google.common.base.Predicate, com.google.common.base.Function)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.FilteredEntryMultimap.removeIf(com.google.common.base.Predicate)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Predicates.in(java.util.Collection)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Predicates.not(com.google.common.base.Predicate)
Nenhuma sugestão fornecida.
**************************
Chamada: valueFunction
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Predicates.compose(com.google.common.base.Predicate, com.google.common.base.Function)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.FilteredEntryMultimap.removeIf(com.google.common.base.Predicate)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.FilteredEntryMultimap$Keys.remove(java.lang.Object, I) ************************
*Commit: commit 2eabf213074afc5b2483c687598e6a3762c0ec5f 1354210628 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Multisets.checkNonnegative(I, java.lang.String)
com.google.common.collect.Multimaps$Keys.count(java.lang.Object)
asMap
get
java.util.Collection.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.collect.FilteredEntryMultimap.satisfies(com.google.common.collect.FilteredEntryMultimap$K, com.google.common.collect.FilteredEntryMultimap$V)
java.util.Iterator.remove()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Multimaps$Keys.count(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: asMap
Nenhuma sugestão fornecida.
**************************
Chamada: get
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.5483872227886571
Suporte: 0.0028076
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 1.0
Suporte: 0.00198183
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.FilteredEntryMultimap.satisfies(com.google.common.collect.FilteredEntryMultimap$K, com.google.common.collect.FilteredEntryMultimap$V)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.7499987385396326
Suporte: 0.00148637
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.remove()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.FilteredEntryMultimap$AsMap.entrySet() ************************
*Commit: commit 2eabf213074afc5b2483c687598e6a3762c0ec5f 1354210628 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
asMap
entrySet
iterator
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.collect.FilteredEntryMultimap.filterCollection(java.util.Collection, com.google.common.base.Predicate)
java.util.Collection.isEmpty()
com.google.common.collect.Maps.immutableEntry(com.google.common.collect.FilteredEntryMultimap$K, java.util.Collection)
com.google.common.collect.AbstractIterator.endOfData()
com.google.common.base.Predicates.in(java.util.Collection)
com.google.common.collect.FilteredEntryMultimap.removeIf(com.google.common.base.Predicate)
com.google.common.base.Predicates.in(java.util.Collection)
com.google.common.base.Predicates.not(com.google.common.base.Predicate)
com.google.common.collect.FilteredEntryMultimap.removeIf(com.google.common.base.Predicate)
null.iterator()
com.google.common.collect.Iterators.size(java.util.Iterator)
---------------- Chamadas de método adicionadas ---------------
Chamada: entrySet
Nenhuma sugestão fornecida.
**************************
Chamada: iterator
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7688450467665082
Suporte: 0.0252684
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7083334384547654
Suporte: 0.0028076
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.FilteredEntryMultimap.filterCollection(java.util.Collection, com.google.common.base.Predicate)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5
Suporte: 0.00247729
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
java.util.Map$Entry.getValue()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5
Suporte: 0.00247729
Posição da Sugestão: 0
**************************
Chamada: java.util.Collection.isEmpty()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Maps.immutableEntry(com.google.common.collect.FilteredEntryMultimap$K, java.util.Collection)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.AbstractIterator.endOfData()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Predicates.in(java.util.Collection)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.FilteredEntryMultimap.removeIf(com.google.common.base.Predicate)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Predicates.in(java.util.Collection)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Predicates.not(com.google.common.base.Predicate)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.FilteredEntryMultimap.removeIf(com.google.common.base.Predicate)
Nenhuma sugestão fornecida.
**************************
Chamada: null.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Iterators.size(java.util.Iterator)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.FilteredKeyMultimap.createEntries() ************************
*Commit: commit 2eabf213074afc5b2483c687598e6a3762c0ec5f 1354210628 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.FilteredKeyMultimap.entryIterator()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
containsEntry
java.util.Map$Entry.getKey()
com.google.common.base.Predicate.apply(null)
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
remove
keyFunction
com.google.common.base.Predicates.compose(com.google.common.base.Predicate, com.google.common.base.Function)
com.google.common.base.Predicates.in(java.util.Collection)
com.google.common.base.Predicates.and(com.google.common.base.Predicate, com.google.common.base.Predicate)
entries
iterator
com.google.common.collect.Iterators.removeIf(java.util.Iterator, com.google.common.base.Predicate)
keyFunction
com.google.common.base.Predicates.compose(com.google.common.base.Predicate, com.google.common.base.Function)
com.google.common.base.Predicates.in(java.util.Collection)
com.google.common.base.Predicates.not(com.google.common.base.Predicate)
com.google.common.base.Predicates.and(com.google.common.base.Predicate, com.google.common.base.Predicate)
entries
iterator
com.google.common.collect.Iterators.removeIf(java.util.Iterator, com.google.common.base.Predicate)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6424601604070048
Suporte: 0.0189926
Posição da Sugestão: 1
**************************
Chamada: containsEntry
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Predicate.apply(null)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7058804673030347
Suporte: 0.00198183
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
com.google.common.base.Predicate.apply(null)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5833345947937008
Suporte: 0.00115607
Posição da Sugestão: 0
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7058804673030347
Suporte: 0.00198183
Posição da Sugestão: 1
**************************
Chamada: remove
Nenhuma sugestão fornecida.
**************************
Chamada: keyFunction
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Predicates.compose(com.google.common.base.Predicate, com.google.common.base.Function)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Predicates.in(java.util.Collection)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Predicates.and(com.google.common.base.Predicate, com.google.common.base.Predicate)
Nenhuma sugestão fornecida.
**************************
Chamada: entries
Nenhuma sugestão fornecida.
**************************
Chamada: iterator
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Iterators.removeIf(java.util.Iterator, com.google.common.base.Predicate)
Nenhuma sugestão fornecida.
**************************
Chamada: keyFunction
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Predicates.compose(com.google.common.base.Predicate, com.google.common.base.Function)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Predicates.in(java.util.Collection)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Predicates.not(com.google.common.base.Predicate)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Predicates.and(com.google.common.base.Predicate, com.google.common.base.Predicate)
Nenhuma sugestão fornecida.
**************************
Chamada: entries
Nenhuma sugestão fornecida.
**************************
Chamada: iterator
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Iterators.removeIf(java.util.Iterator, com.google.common.base.Predicate)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.FilteredKeyMultimap$AddRejectingList.addAll(I, java.util.Collection) ************************
*Commit: commit 2eabf213074afc5b2483c687598e6a3762c0ec5f 1354210628 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.util.Collection)
com.google.common.base.Preconditions.checkPositionIndex(I, I)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkPositionIndex(I, I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.util.Collection)
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.4705878162626732
Suporte: 0.00264244
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.util.concurrent.ServiceManager.startAsync() ************************
*Commit: commit dd05d2a900ad1da6a5b2d87e38c25e70e3bef80f 1354210734 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableMap.entrySet()
java.util.Map$Entry.getKey()
com.google.common.util.concurrent.Service.state()
com.google.common.base.Preconditions.checkState(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.collect.ImmutableMap.values()
com.google.common.util.concurrent.ServiceManager$ServiceListener.start()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableMap.entrySet()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.6250018921905512
Suporte: 0.00165153
Posição da Sugestão: 1
**************************
Chamada: com.google.common.util.concurrent.Service.state()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableMap.entrySet()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6999993945008567
Suporte: 0.00115607
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6424601604070048
Suporte: 0.0189926
Posição da Sugestão: 0
**************************
Chamada: com.google.common.base.Preconditions.checkState(Z, java.lang.String, [Ljava.lang.Object;)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableMap.values()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.util.concurrent.ServiceManager$ServiceListener.start()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.util.concurrent.ServiceManager.startupTimes() ************************
*Commit: commit dd05d2a900ad1da6a5b2d87e38c25e70e3bef80f 1354210734 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.size()
com.google.common.collect.Maps.newHashMapWithExpectedSize(I)
com.google.common.collect.ImmutableMap.entrySet()
java.util.Map$Entry.getKey()
com.google.common.util.concurrent.Service.state()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.util.concurrent.ServiceManager$ServiceListener.startupTimeMillis()
java.util.Map.put(com.google.common.util.concurrent.Service, java.lang.Long)
com.google.common.collect.Ordering.natural()
com.google.common.collect.Ordering.onResultOf(com.google.common.base.Function)
java.util.Map.entrySet()
com.google.common.collect.Ordering.sortedCopy(java.lang.Iterable)
java.util.Map$Entry.getValue()
com.google.common.collect.ImmutableMap.builder()
com.google.common.collect.ImmutableMap$Builder.put(java.util.Map$Entry)
com.google.common.collect.ImmutableMap$Builder.build()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Maps.newHashMapWithExpectedSize(I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableMap.entrySet()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableMap.entrySet()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.6250018921905512
Suporte: 0.00165153
Posição da Sugestão: 1
**************************
Chamada: com.google.common.util.concurrent.Service.state()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.size()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.8888903839555425
Suporte: 0.00132122
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.size()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.8888903839555425
Suporte: 0.00132122
Posição da Sugestão: 1
**************************
Chamada: com.google.common.util.concurrent.ServiceManager$ServiceListener.startupTimeMillis()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.put(com.google.common.util.concurrent.Service, java.lang.Long)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Ordering.natural()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Ordering.onResultOf(com.google.common.base.Function)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.entrySet()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Ordering.sortedCopy(java.lang.Iterable)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.size()
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 1.0
Suporte: 9.90917E-4
Posição da Sugestão: 2
**************************
Usuários que chamam:
java.util.Map.size()
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 1.0
Suporte: 9.90917E-4
Posição da Sugestão: 2
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableMap.builder()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableMap$Builder.put(java.util.Map$Entry)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableMap.builder()
Também chamam:
com.google.common.collect.ImmutableMap$Builder.build()
Confiança: 0.9230736985267747
Suporte: 0.00198183
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ImmutableMap$Builder.build()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.util.concurrent.ServiceManager.ServiceManager(java.lang.Iterable) ************************
*Commit: commit dd05d2a900ad1da6a5b2d87e38c25e70e3bef80f 1354210734 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableList.copyOf(java.lang.Iterable)
java.util.List.size()
com.google.common.collect.ImmutableMap.builder()
com.google.common.util.concurrent.MoreExecutors.sameThreadExecutor()
com.google.common.util.concurrent.Service.addListener(com.google.common.util.concurrent.Service$Listener, java.util.concurrent.Executor)
com.google.common.util.concurrent.Service.state()
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.collect.ImmutableMap$Builder.put(com.google.common.util.concurrent.Service, com.google.common.util.concurrent.ServiceManager$ServiceListener)
com.google.common.collect.ImmutableMap$Builder.build()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableMap.builder()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.util.concurrent.MoreExecutors.sameThreadExecutor()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableMap.builder()
Também chamam:
com.google.common.collect.ImmutableMap$Builder.build()
Confiança: 0.9230736985267747
Suporte: 0.00198183
Posição da Sugestão: 1
**************************
Chamada: com.google.common.util.concurrent.Service.addListener(com.google.common.util.concurrent.Service$Listener, java.util.concurrent.Executor)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.util.concurrent.Service.state()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableMap$Builder.put(com.google.common.util.concurrent.Service, com.google.common.util.concurrent.ServiceManager$ServiceListener)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableMap$Builder.build()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: asByteSource ************************
*Commit: commit 2459638f76d1e57824acfc013a3b7a018ba74de1 1354304266 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.io.InputSupplier)
com.google.common.io.InputSupplier.getInput()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.io.InputSupplier.getInput()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.io.InputSupplier)
Também chamam:
com.google.common.io.InputSupplier.getInput()
Confiança: 0.750001513752441
Suporte: 9.90917E-4
Posição da Sugestão: 1
**************************
************************ Método Avaliado: asCharSource ************************
*Commit: commit 2459638f76d1e57824acfc013a3b7a018ba74de1 1354304266 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.io.InputSupplier)
com.google.common.io.InputSupplier.getInput()
com.google.common.io.CharStreams.asReader(com.google.common.io.CharStreams$(Lcom/google/common/io/InputSupplier;)LCharSource;$R)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.io.InputSupplier.getInput()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.io.InputSupplier)
Também chamam:
com.google.common.io.InputSupplier.getInput()
Confiança: 0.750001513752441
Suporte: 9.90917E-4
Posição da Sugestão: 1
**************************
Chamada: com.google.common.io.CharStreams.asReader(com.google.common.io.CharStreams$(Lcom/google/common/io/InputSupplier;)LCharSource;$R)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.io.InputSupplier.getInput()
Também chamam:
com.google.common.io.Closeables.close(java.io.Closeable, Z)
Confiança: 0.6666655453704482
Suporte: 0.00198183
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.base.CharMatcher.finishCollapseFrom(java.lang.CharSequence, I, I, C, java.lang.StringBuilder, Z) ************************
*Commit: commit b4cf74aa3a56751f25ae09eb79b68e0656d40618 1354891105 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.CharSequence.charAt(I)
com.google.common.base.CharMatcher.matches(C)
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.toString()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.CharMatcher.matches(C)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(C)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.8367338112249753
Suporte: 0.00677126
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00462428
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.base.CharMatcher.finishCollapseFrom(java.lang.CharSequence, I, I, C, java.lang.StringBuilder, Z) ************************
*Commit: commit b4cf74aa3a56751f25ae09eb79b68e0656d40618 1354891105 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.CharSequence.charAt(I)
com.google.common.base.CharMatcher.matches(C)
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.toString()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.CharMatcher.matches(C)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(C)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.8367338112249753
Suporte: 0.00677126
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00462428
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.AbstractSortedMultiset.pollFirstEntry() ************************
*Commit: commit bf0fb34c412629d8f2b32095ee0524b732ed6410 1355160580 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.AbstractMultiset.entryIterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.collect.Multiset$Entry.getElement()
com.google.common.collect.Multiset$Entry.getCount()
com.google.common.collect.Multisets.immutableEntry(com.google.common.collect.AbstractSortedMultiset$E, I)
java.util.Iterator.remove()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7688450467665082
Suporte: 0.0252684
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Multiset$Entry.getElement()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Multiset$Entry.getCount()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.collect.Multiset$Entry.getElement()
Também chamam:
com.google.common.collect.Multiset$Entry.getCount()
Confiança: 0.9444453788579598
Suporte: 0.0028076
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Multisets.immutableEntry(com.google.common.collect.AbstractSortedMultiset$E, I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.collect.Multiset$Entry.getCount()
Também chamam:
com.google.common.collect.Multisets.immutableEntry(com.google.common.collect.Multisets$(Lcom/google/common/collect/Multiset;Lcom/google/common/collect/Multiset;)Lcom/google/common/collect/Multiset;$E, I)
Confiança: 0.7058804673030347
Suporte: 0.00198183
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
com.google.common.collect.Multiset$Entry.getCount()
Também chamam:
com.google.common.collect.Multiset.count(java.lang.Object)
Confiança: 0.7058804673030347
Suporte: 0.00198183
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
com.google.common.collect.Multiset$Entry.getCount()
Também chamam:
com.google.common.collect.AbstractIterator.endOfData()
Confiança: 0.7058804673030347
Suporte: 0.00198183
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
com.google.common.collect.Multiset$Entry.getElement()
com.google.common.collect.Multiset$Entry.getCount()
Também chamam:
com.google.common.collect.Multisets.immutableEntry(com.google.common.collect.Multisets$(Lcom/google/common/collect/Multiset;Lcom/google/common/collect/Multiset;)Lcom/google/common/collect/Multiset;$E, I)
Confiança: 0.7058804673030347
Suporte: 0.00198183
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.collect.Multiset$Entry.getCount()
Também chamam:
com.google.common.collect.AbstractIterator.endOfData()
Confiança: 0.7058804673030347
Suporte: 0.00198183
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.collect.Multiset$Entry.getElement()
com.google.common.collect.Multiset$Entry.getCount()
Também chamam:
com.google.common.collect.Multiset.count(java.lang.Object)
Confiança: 0.7058804673030347
Suporte: 0.00198183
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.collect.Multiset$Entry.getElement()
com.google.common.collect.Multiset$Entry.getCount()
Também chamam:
com.google.common.collect.AbstractIterator.endOfData()
Confiança: 0.7058804673030347
Suporte: 0.00198183
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
com.google.common.collect.Multiset$Entry.getElement()
com.google.common.collect.Multiset$Entry.getCount()
Também chamam:
com.google.common.collect.AbstractIterator.endOfData()
Confiança: 0.7058804673030347
Suporte: 0.00198183
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
com.google.common.collect.Multiset$Entry.getCount()
Também chamam:
com.google.common.collect.Multisets.immutableEntry(com.google.common.collect.Multisets$(Lcom/google/common/collect/Multiset;Lcom/google/common/collect/Multiset;)Lcom/google/common/collect/Multiset;$E, I)
Confiança: 0.7058804673030347
Suporte: 0.00198183
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.collect.Multiset$Entry.getCount()
Também chamam:
com.google.common.collect.Multiset.count(java.lang.Object)
Confiança: 0.7058804673030347
Suporte: 0.00198183
Posição da Sugestão: 0
**************************
Chamada: java.util.Iterator.remove()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.AbstractSortedMultiset.lastEntry() ************************
*Commit: commit bf0fb34c412629d8f2b32095ee0524b732ed6410 1355160580 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.AbstractSortedMultiset.descendingEntryIterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7688450467665082
Suporte: 0.0252684
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.AbstractSortedMultiset.firstEntry() ************************
*Commit: commit bf0fb34c412629d8f2b32095ee0524b732ed6410 1355160580 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.AbstractMultiset.entryIterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7688450467665082
Suporte: 0.0252684
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.AbstractSortedMultiset.pollLastEntry() ************************
*Commit: commit bf0fb34c412629d8f2b32095ee0524b732ed6410 1355160580 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.AbstractSortedMultiset.descendingEntryIterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.collect.Multiset$Entry.getElement()
com.google.common.collect.Multiset$Entry.getCount()
com.google.common.collect.Multisets.immutableEntry(com.google.common.collect.AbstractSortedMultiset$E, I)
java.util.Iterator.remove()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7688450467665082
Suporte: 0.0252684
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Multiset$Entry.getElement()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Multiset$Entry.getCount()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.collect.Multiset$Entry.getElement()
Também chamam:
com.google.common.collect.Multiset$Entry.getCount()
Confiança: 0.9444453788579598
Suporte: 0.0028076
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Multisets.immutableEntry(com.google.common.collect.AbstractSortedMultiset$E, I)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.collect.Multiset$Entry.getCount()
Também chamam:
com.google.common.collect.Multisets.immutableEntry(com.google.common.collect.Multisets$(Lcom/google/common/collect/Multiset;Lcom/google/common/collect/Multiset;)Lcom/google/common/collect/Multiset;$E, I)
Confiança: 0.7058804673030347
Suporte: 0.00198183
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
com.google.common.collect.Multiset$Entry.getCount()
Também chamam:
com.google.common.collect.Multiset.count(java.lang.Object)
Confiança: 0.7058804673030347
Suporte: 0.00198183
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
com.google.common.collect.Multiset$Entry.getCount()
Também chamam:
com.google.common.collect.AbstractIterator.endOfData()
Confiança: 0.7058804673030347
Suporte: 0.00198183
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
com.google.common.collect.Multiset$Entry.getElement()
com.google.common.collect.Multiset$Entry.getCount()
Também chamam:
com.google.common.collect.Multisets.immutableEntry(com.google.common.collect.Multisets$(Lcom/google/common/collect/Multiset;Lcom/google/common/collect/Multiset;)Lcom/google/common/collect/Multiset;$E, I)
Confiança: 0.7058804673030347
Suporte: 0.00198183
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.collect.Multiset$Entry.getCount()
Também chamam:
com.google.common.collect.AbstractIterator.endOfData()
Confiança: 0.7058804673030347
Suporte: 0.00198183
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.collect.Multiset$Entry.getElement()
com.google.common.collect.Multiset$Entry.getCount()
Também chamam:
com.google.common.collect.Multiset.count(java.lang.Object)
Confiança: 0.7058804673030347
Suporte: 0.00198183
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.collect.Multiset$Entry.getElement()
com.google.common.collect.Multiset$Entry.getCount()
Também chamam:
com.google.common.collect.AbstractIterator.endOfData()
Confiança: 0.7058804673030347
Suporte: 0.00198183
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
com.google.common.collect.Multiset$Entry.getElement()
com.google.common.collect.Multiset$Entry.getCount()
Também chamam:
com.google.common.collect.AbstractIterator.endOfData()
Confiança: 0.7058804673030347
Suporte: 0.00198183
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
com.google.common.collect.Multiset$Entry.getCount()
Também chamam:
com.google.common.collect.Multisets.immutableEntry(com.google.common.collect.Multisets$(Lcom/google/common/collect/Multiset;Lcom/google/common/collect/Multiset;)Lcom/google/common/collect/Multiset;$E, I)
Confiança: 0.7058804673030347
Suporte: 0.00198183
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
com.google.common.collect.Multiset$Entry.getCount()
Também chamam:
com.google.common.collect.Multiset.count(java.lang.Object)
Confiança: 0.7058804673030347
Suporte: 0.00198183
Posição da Sugestão: 0
**************************
Chamada: java.util.Iterator.remove()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.DescendingMultiset.comparator() ************************
*Commit: commit bf0fb34c412629d8f2b32095ee0524b732ed6410 1355160580 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.DescendingMultiset.forwardMultiset()
com.google.common.collect.SortedMultiset.comparator()
com.google.common.collect.Ordering.from(java.util.Comparator)
com.google.common.collect.Ordering.reverse()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.SortedMultiset.comparator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Ordering.from(java.util.Comparator)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Ordering.reverse()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Ordering.from(java.util.Comparator)
Também chamam:
com.google.common.collect.Ordering.reverse()
Confiança: 0.6153824656845164
Suporte: 0.00132122
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.DescendingMultiset.createEntrySet() ************************
*Commit: commit bf0fb34c412629d8f2b32095ee0524b732ed6410 1355160580 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.DescendingMultiset.entryIterator()
com.google.common.collect.DescendingMultiset.forwardMultiset()
com.google.common.collect.Multiset.entrySet()
java.util.Set.size()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.DescendingMultiset.forwardMultiset()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Multiset.entrySet()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Set.size()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multiset.entrySet()
Também chamam:
com.google.common.collect.Multiset$Entry.getElement()
Confiança: 0.6451616683659717
Suporte: 0.00330306
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Multiset.entrySet()
Também chamam:
com.google.common.collect.Multiset$Entry.getCount()
Confiança: 0.6451616683659717
Suporte: 0.00330306
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Multiset.entrySet()
Também chamam:
com.google.common.collect.Multiset$Entry.getElement()
com.google.common.collect.Multiset$Entry.getCount()
Confiança: 0.612902217690742
Suporte: 0.0031379
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Multiset.entrySet()
Também chamam:
com.google.common.collect.Multiset.count(java.lang.Object)
Confiança: 0.41935527976030035
Suporte: 0.00214699
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Multiset.entrySet()
Também chamam:
com.google.common.collect.Multiset$Entry.getElement()
com.google.common.collect.Multiset.count(java.lang.Object)
Confiança: 0.41935527976030035
Suporte: 0.00214699
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.DescendingMultiset.comparator() ************************
*Commit: commit bf0fb34c412629d8f2b32095ee0524b732ed6410 1355160580 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.DescendingMultiset.forwardMultiset()
com.google.common.collect.SortedMultiset.comparator()
com.google.common.collect.Ordering.from(java.util.Comparator)
com.google.common.collect.Ordering.reverse()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.SortedMultiset.comparator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Ordering.from(java.util.Comparator)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Ordering.reverse()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Ordering.from(java.util.Comparator)
Também chamam:
com.google.common.collect.Ordering.reverse()
Confiança: 0.6153824656845164
Suporte: 0.00132122
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.DescendingMultiset.createEntrySet() ************************
*Commit: commit bf0fb34c412629d8f2b32095ee0524b732ed6410 1355160580 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.DescendingMultiset.entryIterator()
com.google.common.collect.DescendingMultiset.forwardMultiset()
com.google.common.collect.Multiset.entrySet()
java.util.Set.size()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.DescendingMultiset.forwardMultiset()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Multiset.entrySet()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Set.size()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multiset.entrySet()
Também chamam:
com.google.common.collect.Multiset$Entry.getElement()
Confiança: 0.6451616683659717
Suporte: 0.00330306
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Multiset.entrySet()
Também chamam:
com.google.common.collect.Multiset$Entry.getCount()
Confiança: 0.6451616683659717
Suporte: 0.00330306
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Multiset.entrySet()
Também chamam:
com.google.common.collect.Multiset$Entry.getElement()
com.google.common.collect.Multiset$Entry.getCount()
Confiança: 0.612902217690742
Suporte: 0.0031379
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Multiset.entrySet()
Também chamam:
com.google.common.collect.Multiset.count(java.lang.Object)
Confiança: 0.41935527976030035
Suporte: 0.00214699
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Multiset.entrySet()
Também chamam:
com.google.common.collect.Multiset$Entry.getElement()
com.google.common.collect.Multiset.count(java.lang.Object)
Confiança: 0.41935527976030035
Suporte: 0.00214699
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.base.Ascii.toLowerCase(java.lang.CharSequence) ************************
*Commit: commit caf4fc4fe94090803e9c7e634d9004d82b60fe3e 1355175718 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
com.google.common.base.Ascii.toLowerCase(C)
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.toString()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.CharSequence.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.6428561130958044
Suporte: 0.00445912
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.Ascii.toLowerCase(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
Também chamam:
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.40740773964369653
Suporte: 0.00181668
Posição da Sugestão: 0
**************************
Chamada: java.lang.StringBuilder.append(C)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.8367338112249753
Suporte: 0.00677126
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.base.Ascii.toUpperCase(java.lang.CharSequence) ************************
*Commit: commit caf4fc4fe94090803e9c7e634d9004d82b60fe3e 1355175718 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
com.google.common.base.Ascii.toUpperCase(C)
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.toString()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.CharSequence.charAt(I)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
Também chamam:
java.lang.CharSequence.charAt(I)
Confiança: 0.6428561130958044
Suporte: 0.00445912
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.Ascii.toUpperCase(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.CharSequence.length()
java.lang.CharSequence.charAt(I)
Também chamam:
com.google.common.base.CharMatcher.matches(C)
Confiança: 0.40740773964369653
Suporte: 0.00181668
Posição da Sugestão: 0
**************************
Chamada: java.lang.StringBuilder.append(C)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.8367338112249753
Suporte: 0.00677126
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.AbstractNavigableMap$DescendingMap.comparator() ************************
*Commit: commit 39b6a72246fcde454321b03823f4981f6394a63f 1355444092 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.AbstractNavigableMap$DescendingMap.delegate()
java.util.SortedMap.comparator()
com.google.common.collect.Ordering.from(java.util.Comparator)
com.google.common.collect.Ordering.reverse()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.SortedMap.comparator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Ordering.from(java.util.Comparator)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Ordering.reverse()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Ordering.from(java.util.Comparator)
Também chamam:
com.google.common.collect.Ordering.reverse()
Confiança: 0.6153824656845164
Suporte: 0.00132122
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.descendingEntryIterator() ************************
*Commit: commit 39b6a72246fcde454321b03823f4981f6394a63f 1355444092 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Range.hasUpperBound()
com.google.common.collect.Range.upperEndpoint()
com.google.common.collect.Cut.aboveAll()
com.google.common.collect.Range.hasUpperBound()
com.google.common.collect.Range.upperBoundType()
java.util.NavigableMap.headMap(com.google.common.collect.Cut, Z)
java.util.NavigableMap.descendingMap()
java.util.SortedMap.values()
java.util.Collection.iterator()
com.google.common.collect.Iterators.peekingIterator(java.util.Iterator)
java.util.Iterator.hasNext()
com.google.common.collect.PeekingIterator.peek()
java.util.NavigableMap.higherKey(com.google.common.collect.Cut)
com.google.common.collect.Cut.belowAll()
com.google.common.collect.Range.contains(com.google.common.collect.Cut)
com.google.common.collect.Cut.belowAll()
java.util.Map.containsKey(java.lang.Object)
com.google.common.collect.Iterators.emptyIterator()
com.google.common.collect.Cut.belowAll()
java.util.NavigableMap.higherKey(com.google.common.collect.Cut)
com.google.common.collect.Cut.aboveAll()
com.google.common.base.Objects.firstNonNull(com.google.common.collect.Cut, com.google.common.collect.Cut)
com.google.common.collect.Cut.belowAll()
com.google.common.collect.AbstractIterator.endOfData()
java.util.Iterator.hasNext()
com.google.common.collect.PeekingIterator.next()
com.google.common.collect.Range.create(com.google.common.collect.Cut, com.google.common.collect.Cut)
com.google.common.collect.Cut.isLessThan(com.google.common.collect.Cut)
com.google.common.collect.Maps.immutableEntry(com.google.common.collect.Cut, com.google.common.collect.Range)
com.google.common.collect.Cut.belowAll()
com.google.common.collect.Cut.isLessThan(com.google.common.collect.Cut)
com.google.common.collect.Cut.belowAll()
com.google.common.collect.Range.create(com.google.common.collect.Cut, com.google.common.collect.Cut)
com.google.common.collect.Cut.belowAll()
com.google.common.collect.Cut.belowAll()
com.google.common.collect.Maps.immutableEntry(com.google.common.collect.Cut, com.google.common.collect.Range)
com.google.common.collect.AbstractIterator.endOfData()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Range.upperEndpoint()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.aboveAll()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Range.hasUpperBound()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Range.upperBoundType()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.NavigableMap.headMap(com.google.common.collect.Cut, Z)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.NavigableMap.descendingMap()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.SortedMap.values()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Iterators.peekingIterator(java.util.Iterator)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.5483872227886571
Suporte: 0.0028076
Posição da Sugestão: 0
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.PeekingIterator.peek()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 1.0
Suporte: 0.00198183
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7688450467665082
Suporte: 0.0252684
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.7499987385396326
Suporte: 0.00148637
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
java.util.Iterator.remove()
Confiança: 0.7499987385396326
Suporte: 0.00148637
Posição da Sugestão: 0
**************************
Chamada: java.util.NavigableMap.higherKey(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.belowAll()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Range.contains(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.belowAll()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.containsKey(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Iterators.emptyIterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.belowAll()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.NavigableMap.higherKey(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.aboveAll()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Objects.firstNonNull(com.google.common.collect.Cut, com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.belowAll()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.AbstractIterator.endOfData()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.PeekingIterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 1.0
Suporte: 0.00198183
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.8108106338932848
Suporte: 0.00495458
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7688450467665082
Suporte: 0.0252684
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.7499987385396326
Suporte: 0.00148637
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
java.util.Iterator.remove()
Confiança: 0.7499987385396326
Suporte: 0.00148637
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Range.create(com.google.common.collect.Cut, com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.isLessThan(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Maps.immutableEntry(com.google.common.collect.Cut, com.google.common.collect.Range)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.belowAll()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.isLessThan(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.belowAll()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Range.create(com.google.common.collect.Cut, com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.belowAll()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.belowAll()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Maps.immutableEntry(com.google.common.collect.Cut, com.google.common.collect.Range)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.AbstractIterator.endOfData()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.entryIterator() ************************
*Commit: commit 39b6a72246fcde454321b03823f4981f6394a63f 1355444092 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Range.hasLowerBound()
com.google.common.collect.Range.lowerEndpoint()
com.google.common.collect.Range.lowerBoundType()
java.util.NavigableMap.tailMap(com.google.common.collect.Cut, Z)
java.util.SortedMap.values()
java.util.SortedMap.values()
java.util.Collection.iterator()
com.google.common.collect.Iterators.peekingIterator(java.util.Iterator)
com.google.common.collect.Cut.belowAll()
com.google.common.collect.Range.contains(com.google.common.collect.Cut)
java.util.Iterator.hasNext()
com.google.common.collect.PeekingIterator.peek()
com.google.common.collect.Cut.belowAll()
com.google.common.collect.Cut.belowAll()
java.util.Iterator.hasNext()
com.google.common.collect.PeekingIterator.next()
com.google.common.collect.Iterators.emptyIterator()
com.google.common.collect.Cut.isLessThan(com.google.common.collect.Cut)
com.google.common.collect.Cut.aboveAll()
com.google.common.collect.AbstractIterator.endOfData()
java.util.Iterator.hasNext()
com.google.common.collect.PeekingIterator.next()
com.google.common.collect.Range.create(com.google.common.collect.Cut, com.google.common.collect.Cut)
com.google.common.collect.Cut.aboveAll()
com.google.common.collect.Range.create(com.google.common.collect.Cut, com.google.common.collect.Cut)
com.google.common.collect.Cut.aboveAll()
com.google.common.collect.Maps.immutableEntry(com.google.common.collect.Cut, com.google.common.collect.Range)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Range.lowerEndpoint()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Range.lowerBoundType()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.NavigableMap.tailMap(com.google.common.collect.Cut, Z)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.SortedMap.values()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.SortedMap.values()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Iterators.peekingIterator(java.util.Iterator)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.5483872227886571
Suporte: 0.0028076
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Cut.belowAll()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Range.contains(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.PeekingIterator.peek()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 1.0
Suporte: 0.00198183
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7688450467665082
Suporte: 0.0252684
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.7499987385396326
Suporte: 0.00148637
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
java.util.Iterator.remove()
Confiança: 0.7499987385396326
Suporte: 0.00148637
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Cut.belowAll()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.belowAll()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.PeekingIterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 1.0
Suporte: 0.00198183
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.8108106338932848
Suporte: 0.00495458
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7688450467665082
Suporte: 0.0252684
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.7499987385396326
Suporte: 0.00148637
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
java.util.Iterator.remove()
Confiança: 0.7499987385396326
Suporte: 0.00148637
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Iterators.emptyIterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.isLessThan(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.aboveAll()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.AbstractIterator.endOfData()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.PeekingIterator.next()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 1.0
Suporte: 0.00198183
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.8108106338932848
Suporte: 0.00495458
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7688450467665082
Suporte: 0.0252684
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.7499987385396326
Suporte: 0.00148637
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
java.util.Iterator.remove()
Confiança: 0.7499987385396326
Suporte: 0.00148637
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Range.create(com.google.common.collect.Cut, com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.aboveAll()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Range.create(com.google.common.collect.Cut, com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.aboveAll()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Maps.immutableEntry(com.google.common.collect.Cut, com.google.common.collect.Range)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.get(java.lang.Object) ************************
*Commit: commit 39b6a72246fcde454321b03823f4981f6394a63f 1355444092 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.TreeRangeSet$ComplementRangesByLowerBound.tailMap(com.google.common.collect.Cut, Z)
java.util.NavigableMap.firstEntry()
java.util.Map$Entry.getKey()
com.google.common.collect.Cut.equals(java.lang.Object)
java.util.Map$Entry.getValue()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.NavigableMap.firstEntry()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.equals(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6424601604070048
Suporte: 0.0189926
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.TreeRangeSet$RangesByUpperBound.entryIterator() ************************
*Commit: commit 39b6a72246fcde454321b03823f4981f6394a63f 1355444092 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Range.hasLowerBound()
java.util.SortedMap.values()
java.util.Collection.iterator()
com.google.common.collect.Range.lowerEndpoint()
java.util.NavigableMap.lowerEntry(com.google.common.collect.Cut)
java.util.SortedMap.values()
java.util.Collection.iterator()
java.util.Map$Entry.getValue()
com.google.common.collect.Cut.isLessThan(com.google.common.collect.Cut)
java.util.Map$Entry.getKey()
java.util.NavigableMap.tailMap(com.google.common.collect.Cut, Z)
java.util.SortedMap.values()
java.util.Collection.iterator()
com.google.common.collect.Range.lowerEndpoint()
java.util.NavigableMap.tailMap(com.google.common.collect.Cut, Z)
java.util.SortedMap.values()
java.util.Collection.iterator()
java.util.Iterator.hasNext()
com.google.common.collect.AbstractIterator.endOfData()
java.util.Iterator.next()
com.google.common.collect.Cut.isLessThan(com.google.common.collect.Cut)
com.google.common.collect.AbstractIterator.endOfData()
com.google.common.collect.Maps.immutableEntry(com.google.common.collect.Cut, com.google.common.collect.Range)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.SortedMap.values()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Range.lowerEndpoint()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.5483872227886571
Suporte: 0.0028076
Posição da Sugestão: 1
**************************
Chamada: java.util.NavigableMap.lowerEntry(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.SortedMap.values()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.5483872227886571
Suporte: 0.0028076
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Cut.isLessThan(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.NavigableMap.tailMap(com.google.common.collect.Cut, Z)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6424601604070048
Suporte: 0.0189926
Posição da Sugestão: 0
**************************
Chamada: java.util.SortedMap.values()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Range.lowerEndpoint()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.5483872227886571
Suporte: 0.0028076
Posição da Sugestão: 1
**************************
Chamada: java.util.NavigableMap.tailMap(com.google.common.collect.Cut, Z)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.SortedMap.values()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.5483872227886571
Suporte: 0.0028076
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.AbstractIterator.endOfData()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 1.0
Suporte: 0.00198183
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.next()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.isLessThan(com.google.common.collect.Cut)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.7499987385396326
Suporte: 0.00148637
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5882355036329961
Suporte: 0.00165153
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.AbstractIterator.endOfData()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Maps.immutableEntry(com.google.common.collect.Cut, com.google.common.collect.Range)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.TreeRangeSet$RangesByUpperBound.descendingEntryIterator() ************************
*Commit: commit 39b6a72246fcde454321b03823f4981f6394a63f 1355444092 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Range.hasUpperBound()
com.google.common.collect.Range.upperEndpoint()
java.util.NavigableMap.headMap(com.google.common.collect.Cut, Z)
java.util.NavigableMap.descendingMap()
java.util.SortedMap.values()
java.util.Collection.iterator()
com.google.common.collect.Iterators.peekingIterator(java.util.Iterator)
java.util.NavigableMap.descendingMap()
java.util.SortedMap.values()
java.util.Collection.iterator()
com.google.common.collect.Iterators.peekingIterator(java.util.Iterator)
java.util.Iterator.hasNext()
com.google.common.collect.PeekingIterator.peek()
com.google.common.collect.Cut.isLessThan(com.google.common.collect.Cut)
com.google.common.collect.PeekingIterator.next()
java.util.Iterator.hasNext()
com.google.common.collect.AbstractIterator.endOfData()
com.google.common.collect.PeekingIterator.next()
com.google.common.collect.Cut.isLessThan(com.google.common.collect.Cut)
com.google.common.collect.Maps.immutableEntry(com.google.common.collect.Cut, com.google.common.collect.Range)
com.google.common.collect.AbstractIterator.endOfData()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Range.upperEndpoint()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.NavigableMap.headMap(com.google.common.collect.Cut, Z)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.NavigableMap.descendingMap()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.SortedMap.values()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Iterators.peekingIterator(java.util.Iterator)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.5483872227886571
Suporte: 0.0028076
Posição da Sugestão: 0
**************************
Chamada: java.util.NavigableMap.descendingMap()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.SortedMap.values()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Iterators.peekingIterator(java.util.Iterator)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.5483872227886571
Suporte: 0.0028076
Posição da Sugestão: 0
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.PeekingIterator.peek()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 1.0
Suporte: 0.00198183
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7688450467665082
Suporte: 0.0252684
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.7499987385396326
Suporte: 0.00148637
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
java.util.Iterator.remove()
Confiança: 0.7499987385396326
Suporte: 0.00148637
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Cut.isLessThan(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.PeekingIterator.next()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.AbstractIterator.endOfData()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 1.0
Suporte: 0.00198183
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.8108106338932848
Suporte: 0.00495458
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7688450467665082
Suporte: 0.0252684
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.7499987385396326
Suporte: 0.00148637
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
java.util.Iterator.remove()
Confiança: 0.7499987385396326
Suporte: 0.00148637
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.PeekingIterator.next()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.isLessThan(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Maps.immutableEntry(com.google.common.collect.Cut, com.google.common.collect.Range)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.AbstractIterator.endOfData()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.TreeRangeSet.rangeEnclosing(com.google.common.collect.Range) ************************
*Commit: commit ca36f308785f8a9780a10ea48a76bd026b202fa9 1355444092 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Range)
java.util.NavigableMap.floorEntry(com.google.common.collect.Cut)
java.util.Map$Entry.getValue()
com.google.common.collect.Range.encloses(com.google.common.collect.Range)
java.util.Map$Entry.getValue()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.NavigableMap.floorEntry(com.google.common.collect.Cut)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Range)
Também chamam:
com.google.common.collect.Range.isEmpty()
Confiança: 0.7777807679110853
Suporte: 0.00115607
Posição da Sugestão: 0
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Range.encloses(com.google.common.collect.Range)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.descendingEntryIterator() ************************
*Commit: commit ca36f308785f8a9780a10ea48a76bd026b202fa9 1355444092 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Range.isEmpty()
com.google.common.collect.Iterators.emptyIterator()
com.google.common.collect.Ordering.natural()
com.google.common.collect.Cut.belowValue(com.google.common.collect.Cut)
com.google.common.collect.Ordering.min(com.google.common.collect.Cut, com.google.common.collect.Cut)
com.google.common.collect.Cut.endpoint()
com.google.common.collect.Cut.typeAsUpperBound()
java.util.NavigableMap.headMap(com.google.common.collect.Cut, Z)
java.util.NavigableMap.descendingMap()
java.util.SortedMap.values()
java.util.Collection.iterator()
java.util.Iterator.hasNext()
com.google.common.collect.AbstractIterator.endOfData()
java.util.Iterator.next()
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
com.google.common.collect.AbstractIterator.endOfData()
com.google.common.collect.Range.intersection(com.google.common.collect.Range)
com.google.common.collect.Range.contains(com.google.common.collect.Cut)
com.google.common.collect.Maps.immutableEntry(com.google.common.collect.Cut, com.google.common.collect.Range)
com.google.common.collect.AbstractIterator.endOfData()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Iterators.emptyIterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Ordering.natural()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.belowValue(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Ordering.min(com.google.common.collect.Cut, com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.endpoint()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.typeAsUpperBound()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.NavigableMap.headMap(com.google.common.collect.Cut, Z)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.NavigableMap.descendingMap()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.SortedMap.values()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.5483872227886571
Suporte: 0.0028076
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.AbstractIterator.endOfData()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 1.0
Suporte: 0.00198183
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.next()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.7499987385396326
Suporte: 0.00148637
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5882355036329961
Suporte: 0.00165153
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.AbstractIterator.endOfData()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Também chamam:
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Confiança: 0.6999993945008567
Suporte: 0.00115607
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Range.intersection(com.google.common.collect.Range)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Range.contains(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Maps.immutableEntry(com.google.common.collect.Cut, com.google.common.collect.Range)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.AbstractIterator.endOfData()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.SubRangeSetRangesByLowerBound(com.google.common.collect.Range, com.google.common.collect.Range, java.util.NavigableMap) ************************
*Commit: commit ca36f308785f8a9780a10ea48a76bd026b202fa9 1355444092 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Range)
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Range)
com.google.common.base.Preconditions.checkNotNull(java.util.NavigableMap)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Range)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Range)
Também chamam:
com.google.common.collect.Range.isEmpty()
Confiança: 0.7777807679110853
Suporte: 0.00115607
Posição da Sugestão: 0
**************************
Chamada: com.google.common.base.Preconditions.checkNotNull(java.util.NavigableMap)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(com.google.common.collect.Range)
Também chamam:
com.google.common.collect.Range.isEmpty()
Confiança: 0.7777807679110853
Suporte: 0.00115607
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.get(java.lang.Object) ************************
*Commit: commit ca36f308785f8a9780a10ea48a76bd026b202fa9 1355444092 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Range.contains(com.google.common.collect.Cut)
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
com.google.common.collect.Cut.equals(java.lang.Object)
java.util.NavigableMap.floorEntry(com.google.common.collect.Cut)
valueOrNull
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
com.google.common.collect.Range.intersection(com.google.common.collect.Range)
java.util.Map.get(java.lang.Object)
com.google.common.collect.Range.intersection(com.google.common.collect.Range)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Também chamam:
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Confiança: 0.6999993945008567
Suporte: 0.00115607
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Cut.equals(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Também chamam:
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Confiança: 0.6999993945008567
Suporte: 0.00115607
Posição da Sugestão: 1
**************************
Chamada: java.util.NavigableMap.floorEntry(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: valueOrNull
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Range.intersection(com.google.common.collect.Range)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Também chamam:
com.google.common.collect.Cut.compareTo(com.google.common.collect.Cut)
Confiança: 0.6999993945008567
Suporte: 0.00115607
Posição da Sugestão: 0
**************************
Chamada: java.util.Map.get(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Range.intersection(com.google.common.collect.Range)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.TreeRangeSet$SubRangeSetRangesByLowerBound.entryIterator() ************************
*Commit: commit ca36f308785f8a9780a10ea48a76bd026b202fa9 1355444092 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Range.isEmpty()
com.google.common.collect.Iterators.emptyIterator()
com.google.common.collect.Cut.isLessThan(com.google.common.collect.Cut)
com.google.common.collect.Iterators.emptyIterator()
com.google.common.collect.Cut.isLessThan(com.google.common.collect.Cut)
java.util.NavigableMap.tailMap(com.google.common.collect.Cut, Z)
java.util.SortedMap.values()
java.util.Collection.iterator()
com.google.common.collect.Cut.endpoint()
com.google.common.collect.Range.lowerBoundType()
java.util.NavigableMap.tailMap(com.google.common.collect.Cut, Z)
java.util.SortedMap.values()
java.util.Collection.iterator()
com.google.common.collect.Ordering.natural()
com.google.common.collect.Cut.belowValue(com.google.common.collect.Cut)
com.google.common.collect.Ordering.min(com.google.common.collect.Cut, com.google.common.collect.Cut)
java.util.Iterator.hasNext()
com.google.common.collect.AbstractIterator.endOfData()
java.util.Iterator.next()
com.google.common.collect.Cut.isLessThan(com.google.common.collect.Cut)
com.google.common.collect.AbstractIterator.endOfData()
com.google.common.collect.Range.intersection(com.google.common.collect.Range)
com.google.common.collect.Maps.immutableEntry(com.google.common.collect.Cut, com.google.common.collect.Range)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Iterators.emptyIterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.isLessThan(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Iterators.emptyIterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.isLessThan(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.NavigableMap.tailMap(com.google.common.collect.Cut, Z)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.SortedMap.values()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.endpoint()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.5483872227886571
Suporte: 0.0028076
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Range.lowerBoundType()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.NavigableMap.tailMap(com.google.common.collect.Cut, Z)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.SortedMap.values()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Ordering.natural()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.5483872227886571
Suporte: 0.0028076
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Cut.belowValue(com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Ordering.min(com.google.common.collect.Cut, com.google.common.collect.Cut)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.AbstractIterator.endOfData()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 1.0
Suporte: 0.00198183
Posição da Sugestão: 1
**************************
Chamada: java.util.Iterator.next()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Cut.isLessThan(com.google.common.collect.Cut)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.hasNext()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.7499987385396326
Suporte: 0.00148637
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Collection.iterator()
java.util.Iterator.next()
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5882355036329961
Suporte: 0.00165153
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.AbstractIterator.endOfData()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Range.intersection(com.google.common.collect.Range)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Maps.immutableEntry(com.google.common.collect.Cut, com.google.common.collect.Range)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.cache.LocalCache$Segment.insertLoadingValueReference(com.google.common.cache.LocalCache$Segment$K, I, Z) ************************
*Commit: commit 75085833f67d07b9dcc071e0703cb1027e6c0b28 1356041333 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.concurrent.locks.ReentrantLock.lock()
com.google.common.base.Ticker.read()
com.google.common.cache.LocalCache$Segment.preWriteCleanup(J)
java.util.concurrent.atomic.AtomicReferenceArray.length()
java.util.concurrent.atomic.AtomicReferenceArray.get(I)
com.google.common.cache.LocalCache$ReferenceEntry.getNext()
com.google.common.cache.LocalCache$ReferenceEntry.getKey()
com.google.common.cache.LocalCache$ReferenceEntry.getHash()
com.google.common.base.Equivalence.equivalent(java.lang.Object, java.lang.Object)
com.google.common.cache.LocalCache$ReferenceEntry.getValueReference()
com.google.common.cache.LocalCache$ValueReference.isLoading()
com.google.common.cache.LocalCache$ReferenceEntry.getWriteTime()
com.google.common.cache.LocalCache$ReferenceEntry.setValueReference(com.google.common.cache.LocalCache$ValueReference)
com.google.common.cache.LocalCache$Segment.newEntry(com.google.common.cache.LocalCache$Segment$K, I, com.google.common.cache.LocalCache$ReferenceEntry)
com.google.common.cache.LocalCache$ReferenceEntry.setValueReference(com.google.common.cache.LocalCache$ValueReference)
java.util.concurrent.atomic.AtomicReferenceArray.set(I, com.google.common.cache.LocalCache$ReferenceEntry)
java.util.concurrent.locks.ReentrantLock.unlock()
com.google.common.cache.LocalCache$Segment.postWriteCleanup()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Ticker.read()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.locks.ReentrantLock.lock()
Também chamam:
java.util.concurrent.locks.ReentrantLock.unlock()
Confiança: 0.9750004162812911
Suporte: 0.00644096
Posição da Sugestão: 1
**************************
Chamada: com.google.common.cache.LocalCache$Segment.preWriteCleanup(J)
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.locks.ReentrantLock.lock()
com.google.common.base.Ticker.read()
Também chamam:
com.google.common.cache.LocalCache$Segment.preWriteCleanup(J)
Confiança: 1.0
Suporte: 0.00132122
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReferenceArray.length()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.locks.ReentrantLock.lock()
com.google.common.cache.LocalCache$Segment.preWriteCleanup(J)
Também chamam:
com.google.common.cache.LocalCache$ReferenceEntry.getKey()
Confiança: 1.0
Suporte: 0.00132122
Posição da Sugestão: 1
**************************
Chamada: java.util.concurrent.atomic.AtomicReferenceArray.get(I)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.cache.LocalCache$Segment.preWriteCleanup(J)
java.util.concurrent.atomic.AtomicReferenceArray.length()
Também chamam:
com.google.common.cache.LocalCache$Segment.postWriteCleanup()
Confiança: 1.0
Suporte: 0.00132122
Posição da Sugestão: 1
**************************
Chamada: com.google.common.cache.LocalCache$ReferenceEntry.getNext()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.locks.ReentrantLock.lock()
com.google.common.cache.LocalCache$Segment.preWriteCleanup(J)
java.util.concurrent.atomic.AtomicReferenceArray.get(I)
Também chamam:
com.google.common.base.Equivalence.equivalent(java.lang.Object, java.lang.Object)
Confiança: 1.0
Suporte: 0.00132122
Posição da Sugestão: 1
**************************
Chamada: com.google.common.cache.LocalCache$ReferenceEntry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.cache.LocalCache$Segment.preWriteCleanup(J)
java.util.concurrent.atomic.AtomicReferenceArray.length()
com.google.common.cache.LocalCache$ReferenceEntry.getNext()
Também chamam:
java.util.concurrent.atomic.AtomicReferenceArray.set(I, com.google.common.cache.LocalCache$ReferenceEntry)
Confiança: 1.0
Suporte: 0.00132122
Posição da Sugestão: 1
**************************
Chamada: com.google.common.cache.LocalCache$ReferenceEntry.getHash()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.locks.ReentrantLock.lock()
com.google.common.base.Ticker.read()
com.google.common.cache.LocalCache$Segment.preWriteCleanup(J)
com.google.common.cache.LocalCache$ReferenceEntry.getNext()
com.google.common.cache.LocalCache$ReferenceEntry.getKey()
Também chamam:
java.util.concurrent.locks.ReentrantLock.unlock()
Confiança: 1.0
Suporte: 0.00132122
Posição da Sugestão: 1
**************************
Chamada: com.google.common.base.Equivalence.equivalent(java.lang.Object, java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Ticker.read()
com.google.common.cache.LocalCache$Segment.preWriteCleanup(J)
java.util.concurrent.atomic.AtomicReferenceArray.get(I)
com.google.common.cache.LocalCache$ReferenceEntry.getNext()
com.google.common.cache.LocalCache$ReferenceEntry.getHash()
Também chamam:
com.google.common.cache.LocalCache$Segment.postWriteCleanup()
Confiança: 1.0
Suporte: 0.00132122
Posição da Sugestão: 1
**************************
Chamada: com.google.common.cache.LocalCache$ReferenceEntry.getValueReference()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.locks.ReentrantLock.lock()
com.google.common.base.Ticker.read()
com.google.common.cache.LocalCache$Segment.preWriteCleanup(J)
com.google.common.cache.LocalCache$ReferenceEntry.getHash()
com.google.common.base.Equivalence.equivalent(java.lang.Object, java.lang.Object)
Também chamam:
com.google.common.cache.LocalCache$ReferenceEntry.getValueReference()
Confiança: 1.0
Suporte: 0.00132122
Posição da Sugestão: 1
**************************
Chamada: com.google.common.cache.LocalCache$ValueReference.isLoading()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Ticker.read()
com.google.common.cache.LocalCache$Segment.preWriteCleanup(J)
com.google.common.cache.LocalCache$ReferenceEntry.getValueReference()
Também chamam:
java.util.concurrent.atomic.AtomicReferenceArray.set(I, com.google.common.cache.LocalCache$ReferenceEntry)
Confiança: 1.0
Suporte: 0.00132122
Posição da Sugestão: 1
**************************
Chamada: com.google.common.cache.LocalCache$ReferenceEntry.getWriteTime()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.cache.LocalCache$ReferenceEntry.setValueReference(com.google.common.cache.LocalCache$ValueReference)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.cache.LocalCache$Segment.newEntry(com.google.common.cache.LocalCache$Segment$K, I, com.google.common.cache.LocalCache$ReferenceEntry)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.cache.LocalCache$ReferenceEntry.setValueReference(com.google.common.cache.LocalCache$ValueReference)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.atomic.AtomicReferenceArray.set(I, com.google.common.cache.LocalCache$ReferenceEntry)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.concurrent.locks.ReentrantLock.unlock()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Ticker.read()
com.google.common.cache.LocalCache$ReferenceEntry.getHash()
java.util.concurrent.atomic.AtomicReferenceArray.set(I, com.google.common.cache.LocalCache$ReferenceEntry)
Também chamam:
com.google.common.cache.LocalCache$Segment.postWriteCleanup()
Confiança: 1.0
Suporte: 0.00132122
Posição da Sugestão: 1
**************************
Chamada: com.google.common.cache.LocalCache$Segment.postWriteCleanup()
** Sugestões fornecidas **
Usuários que chamam:
java.util.concurrent.locks.ReentrantLock.lock()
com.google.common.cache.LocalCache$ReferenceEntry.getValueReference()
java.util.concurrent.locks.ReentrantLock.unlock()
Também chamam:
com.google.common.cache.LocalCache$Segment.postWriteCleanup()
Confiança: 1.0
Suporte: 0.00198183
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.RegularImmutableTable$SparseImmutableTable.SparseImmutableTable(com.google.common.collect.ImmutableList, com.google.common.collect.ImmutableSet, com.google.common.collect.ImmutableSet) ************************
*Commit: commit f237e1e015fecb13e34739858300508dac235117 1357250061 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Maps.newHashMap()
com.google.common.collect.Maps.newLinkedHashMap()
java.util.Map.size()
java.util.Map.put(com.google.common.collect.RegularImmutableTable$SparseImmutableTable$R, java.lang.Integer)
java.util.Map.put(com.google.common.collect.RegularImmutableTable$SparseImmutableTable$R, java.util.Map)
com.google.common.collect.Maps.newLinkedHashMap()
java.util.Map.put(com.google.common.collect.RegularImmutableTable$SparseImmutableTable$C, java.util.Map)
java.util.List.size()
java.util.List.size()
java.util.List.size()
java.util.List.get(I)
com.google.common.collect.Table$Cell.getRowKey()
com.google.common.collect.Table$Cell.getColumnKey()
com.google.common.collect.Table$Cell.getValue()
java.util.Map.get(java.lang.Object)
java.util.Map.get(java.lang.Object)
java.util.Map.size()
java.util.Map.put(com.google.common.collect.RegularImmutableTable$SparseImmutableTable$C, com.google.common.collect.RegularImmutableTable$SparseImmutableTable$V)
java.util.Map.get(java.lang.Object)
java.util.Map.put(com.google.common.collect.RegularImmutableTable$SparseImmutableTable$R, com.google.common.collect.RegularImmutableTable$SparseImmutableTable$V)
com.google.common.collect.ImmutableMap.builder()
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.collect.ImmutableMap.copyOf(java.util.Map)
com.google.common.collect.ImmutableMap$Builder.put(com.google.common.collect.RegularImmutableTable$SparseImmutableTable$R, java.util.Map)
com.google.common.collect.ImmutableMap$Builder.build()
com.google.common.collect.ImmutableMap.builder()
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.collect.ImmutableMap.copyOf(java.util.Map)
com.google.common.collect.ImmutableMap$Builder.put(com.google.common.collect.RegularImmutableTable$SparseImmutableTable$C, java.util.Map)
com.google.common.collect.ImmutableMap$Builder.build()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Maps.newLinkedHashMap()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.size()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Maps.newLinkedHashMap()
Também chamam:
com.google.common.collect.ImmutableMap.copyOf(java.util.Map)
Confiança: 0.8571427335714966
Suporte: 9.90917E-4
Posição da Sugestão: 1
**************************
Chamada: java.util.Map.put(com.google.common.collect.RegularImmutableTable$SparseImmutableTable$R, java.lang.Integer)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.put(com.google.common.collect.RegularImmutableTable$SparseImmutableTable$R, java.util.Map)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Maps.newLinkedHashMap()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.put(com.google.common.collect.RegularImmutableTable$SparseImmutableTable$C, java.util.Map)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Maps.newLinkedHashMap()
Também chamam:
com.google.common.collect.ImmutableMap.copyOf(java.util.Map)
Confiança: 0.8571427335714966
Suporte: 9.90917E-4
Posição da Sugestão: 1
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Table$Cell.getRowKey()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Table$Cell.getColumnKey()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Table$Cell.getRowKey()
Também chamam:
com.google.common.collect.Table$Cell.getColumnKey()
Confiança: 0.8749996846357039
Suporte: 0.00346821
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Table$Cell.getValue()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Table$Cell.getColumnKey()
Também chamam:
com.google.common.collect.Table$Cell.getValue()
Confiança: 0.8333337538190616
Suporte: 0.00330306
Posição da Sugestão: 1
**************************
Chamada: java.util.Map.get(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.get(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.put(com.google.common.collect.RegularImmutableTable$SparseImmutableTable$C, com.google.common.collect.RegularImmutableTable$SparseImmutableTable$V)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.get(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.put(com.google.common.collect.RegularImmutableTable$SparseImmutableTable$R, com.google.common.collect.RegularImmutableTable$SparseImmutableTable$V)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableMap.builder()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.entrySet()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableMap.builder()
Também chamam:
com.google.common.collect.ImmutableMap$Builder.build()
Confiança: 0.9230736985267747
Suporte: 0.00198183
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.size()
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 1.0
Suporte: 9.90917E-4
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.size()
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 1.0
Suporte: 9.90917E-4
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ImmutableMap.copyOf(java.util.Map)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableMap$Builder.put(com.google.common.collect.RegularImmutableTable$SparseImmutableTable$R, java.util.Map)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableMap$Builder.build()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableMap.builder()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.entrySet()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableMap.builder()
Também chamam:
com.google.common.collect.ImmutableMap$Builder.build()
Confiança: 0.9230736985267747
Suporte: 0.00198183
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.size()
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 1.0
Suporte: 9.90917E-4
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.size()
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 1.0
Suporte: 9.90917E-4
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ImmutableMap.copyOf(java.util.Map)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableMap$Builder.put(com.google.common.collect.RegularImmutableTable$SparseImmutableTable$C, java.util.Map)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableMap$Builder.build()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.RegularImmutableTable$CellSet.contains(java.lang.Object) ************************
*Commit: commit f237e1e015fecb13e34739858300508dac235117 1357250061 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Table$Cell.getRowKey()
com.google.common.collect.Table$Cell.getColumnKey()
com.google.common.collect.Table.get(java.lang.Object, java.lang.Object)
com.google.common.collect.Table$Cell.getValue()
java.lang.Object.equals(java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Table$Cell.getColumnKey()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Table$Cell.getRowKey()
Também chamam:
com.google.common.collect.Table$Cell.getColumnKey()
Confiança: 0.8749996846357039
Suporte: 0.00346821
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Table.get(java.lang.Object, java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Table$Cell.getColumnKey()
Também chamam:
com.google.common.collect.Table$Cell.getValue()
Confiança: 0.8333337538190616
Suporte: 0.00330306
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Table$Cell.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Object.equals(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.RegularImmutableTable$SparseImmutableTable$SparseCellSet.createAsList() ************************
*Commit: commit f237e1e015fecb13e34739858300508dac235117 1357250061 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableMap.entrySet()
com.google.common.collect.ImmutableCollection.asList()
java.util.List.get(I)
java.util.Map$Entry.getValue()
com.google.common.collect.ImmutableMap.entrySet()
com.google.common.collect.ImmutableCollection.asList()
java.util.List.get(I)
java.util.Map$Entry.getKey()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.collect.Tables.immutableCell(com.google.common.collect.RegularImmutableTable$SparseImmutableTable$R, com.google.common.collect.RegularImmutableTable$SparseImmutableTable$C, com.google.common.collect.RegularImmutableTable$SparseImmutableTable$V)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableCollection.asList()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableMap.entrySet()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.6250018921905512
Suporte: 0.00165153
Posição da Sugestão: 1
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableMap.entrySet()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableCollection.asList()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableMap.entrySet()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.6250018921905512
Suporte: 0.00165153
Posição da Sugestão: 1
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableMap.entrySet()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6999993945008567
Suporte: 0.00115607
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7058804673030347
Suporte: 0.00198183
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Tables.immutableCell(com.google.common.collect.RegularImmutableTable$SparseImmutableTable$R, com.google.common.collect.RegularImmutableTable$SparseImmutableTable$C, com.google.common.collect.RegularImmutableTable$SparseImmutableTable$V)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.RegularImmutableTable$DenseImmutableTable.DenseImmutableTable(com.google.common.collect.ImmutableList, com.google.common.collect.ImmutableSet, com.google.common.collect.ImmutableSet) ************************
*Commit: commit f237e1e015fecb13e34739858300508dac235117 1357250061 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Set.size()
java.util.Set.size()
com.google.common.collect.RegularImmutableTable$DenseImmutableTable.makeIndex(com.google.common.collect.ImmutableSet)
com.google.common.collect.RegularImmutableTable$DenseImmutableTable.makeIndex(com.google.common.collect.ImmutableSet)
java.util.Map.size()
java.util.Map.size()
java.util.List.size()
java.util.List.size()
java.util.List.size()
java.util.List.get(I)
com.google.common.collect.Table$Cell.getRowKey()
com.google.common.collect.Table$Cell.getColumnKey()
com.google.common.collect.ImmutableMap.get(java.lang.Object)
com.google.common.collect.ImmutableMap.get(java.lang.Object)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.collect.Table$Cell.getValue()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Set.size()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.RegularImmutableTable$DenseImmutableTable.makeIndex(com.google.common.collect.ImmutableSet)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.RegularImmutableTable$DenseImmutableTable.makeIndex(com.google.common.collect.ImmutableSet)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.size()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.List.get(I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Table$Cell.getRowKey()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Table$Cell.getColumnKey()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Table$Cell.getRowKey()
Também chamam:
com.google.common.collect.Table$Cell.getColumnKey()
Confiança: 0.8749996846357039
Suporte: 0.00346821
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ImmutableMap.get(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Table$Cell.getColumnKey()
Também chamam:
com.google.common.collect.Table$Cell.getValue()
Confiança: 0.8333337538190616
Suporte: 0.00330306
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ImmutableMap.get(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Table$Cell.getValue()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.reflect.ClassPath.getTopLevelClasses() ************************
*Commit: commit 28f3cd2759061207c89c25a2635154c3adaabc2b 1357923333 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableSet.builder()
com.google.common.collect.ImmutableSet$Builder.add(com.google.common.reflect.ClassPath$ClassInfo)
com.google.common.collect.ImmutableSet$Builder.build()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableSet$Builder.add(com.google.common.reflect.ClassPath$ClassInfo)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableSet.builder()
Também chamam:
com.google.common.collect.ImmutableSet$Builder.build()
Confiança: 1.0
Suporte: 0.00132122
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ImmutableSet$Builder.build()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.RegularImmutableList.toString() ************************
*Commit: commit 01c33a7487d8c3f90608ae5cd05debf62794c25b 1357926614 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.RegularImmutableList.size()
com.google.common.collect.Collections2.newStringBuilderForCollection(I)
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(java.lang.Object)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(java.lang.Object)
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.toString()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Collections2.newStringBuilderForCollection(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(C)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 0.8367338112249753
Suporte: 0.00677126
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.Object)
Também chamam:
java.lang.StringBuilder.append(C)
Confiança: 0.5833345947937008
Suporte: 0.00115607
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00363336
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(java.lang.Object)
Também chamam:
java.lang.StringBuilder.append(C)
Confiança: 0.5833345947937008
Suporte: 0.00115607
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00462428
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.SingletonImmutableList.toString() ************************
*Commit: commit 01c33a7487d8c3f90608ae5cd05debf62794c25b 1357926614 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.lang.Object.toString()
java.lang.String.length()
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.append(java.lang.String)
java.lang.StringBuilder.append(C)
java.lang.StringBuilder.toString()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.lang.String.length()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.StringBuilder.append(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
Também chamam:
java.lang.String.charAt(I)
Confiança: 0.4250004919687986
Suporte: 0.0028076
Posição da Sugestão: 0
**************************
Chamada: java.lang.StringBuilder.append(java.lang.String)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00181668
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.append(C)
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
java.lang.StringBuilder.append(java.lang.String)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00165153
Posição da Sugestão: 1
**************************
Chamada: java.lang.StringBuilder.toString()
** Sugestões fornecidas **
Usuários que chamam:
java.lang.String.length()
java.lang.StringBuilder.append(C)
Também chamam:
java.lang.StringBuilder.toString()
Confiança: 1.0
Suporte: 0.00181668
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.Maps.asSetEntryIterator(java.util.Set, com.google.common.base.Function) ************************
*Commit: commit 8485330b17d5cd0b93fbb2f1429c09bf2a4155ab 1358033571 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Set.iterator()
com.google.common.base.Function.apply(null)
com.google.common.collect.Maps.immutableEntry(com.google.common.collect.Maps$(Ljava/util/Set;Lcom/google/common/base/Function;)Ljava/util/Iterator;$K, com.google.common.collect.Maps$(Ljava/util/Set;Lcom/google/common/base/Function;)Ljava/util/Iterator;$V)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Function.apply(null)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.526882259492682
Suporte: 0.00809249
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.4516133652794417
Suporte: 0.00693642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Confiança: 0.41935517474868483
Suporte: 0.00644096
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Maps.immutableEntry(com.google.common.collect.Maps$(Ljava/util/Set;Lcom/google/common/base/Function;)Ljava/util/Iterator;$K, com.google.common.collect.Maps$(Ljava/util/Set;Lcom/google/common/base/Function;)Ljava/util/Iterator;$V)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Collections2.safeRemove(java.util.Collection, java.lang.Object) ************************
*Commit: commit 8485330b17d5cd0b93fbb2f1429c09bf2a4155ab 1358033571 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.base.Preconditions.checkNotNull(java.util.Collection)
java.util.Collection.remove(java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Collection.remove(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.base.Preconditions.checkNotNull(java.util.Collection)
Também chamam:
java.util.Collection.contains(java.lang.Object)
Confiança: 0.4705878162626732
Suporte: 0.00264244
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Maps.asSetEntryIterator(java.util.Set, com.google.common.base.Function) ************************
*Commit: commit 8485330b17d5cd0b93fbb2f1429c09bf2a4155ab 1358033571 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Set.iterator()
com.google.common.base.Function.apply(null)
com.google.common.collect.Maps.immutableEntry(com.google.common.collect.Maps$(Ljava/util/Set;Lcom/google/common/base/Function;)Ljava/util/Iterator;$K, com.google.common.collect.Maps$(Ljava/util/Set;Lcom/google/common/base/Function;)Ljava/util/Iterator;$V)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Function.apply(null)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.526882259492682
Suporte: 0.00809249
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.4516133652794417
Suporte: 0.00693642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Confiança: 0.41935517474868483
Suporte: 0.00644096
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Maps.immutableEntry(com.google.common.collect.Maps$(Ljava/util/Set;Lcom/google/common/base/Function;)Ljava/util/Iterator;$K, com.google.common.collect.Maps$(Ljava/util/Set;Lcom/google/common/base/Function;)Ljava/util/Iterator;$V)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Multimaps$MapMultimap.asMap() ************************
*Commit: commit f9c1a637a439f4534b6d2cb8bb534b19a4e6efcc 1358363595 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.size()
java.util.Map.keySet()
java.util.Set.iterator()
com.google.common.collect.Multimaps$AsMap.get(java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map.keySet()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Set.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Multimaps$AsMap.get(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.526882259492682
Suporte: 0.00809249
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.4516133652794417
Suporte: 0.00693642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Confiança: 0.41935517474868483
Suporte: 0.00644096
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Multimaps.equalsImpl(com.google.common.collect.Multimap, java.lang.Object) ************************
*Commit: commit f9c1a637a439f4534b6d2cb8bb534b19a4e6efcc 1358363595 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Multimap.asMap()
com.google.common.collect.Multimap.asMap()
java.util.Map.equals(java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Multimap.asMap()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multimap.asMap()
Também chamam:
java.util.Map.entrySet()
Confiança: 0.43333440977842724
Suporte: 0.00214699
Posição da Sugestão: 0
**************************
Chamada: java.util.Map.equals(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multimap.asMap()
Também chamam:
java.util.Map.entrySet()
Confiança: 0.43333440977842724
Suporte: 0.00214699
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Multimaps$MapMultimap.asMap() ************************
*Commit: commit f9c1a637a439f4534b6d2cb8bb534b19a4e6efcc 1358363595 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.size()
java.util.Map.keySet()
java.util.Set.iterator()
com.google.common.collect.Multimaps$AsMap.get(java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map.keySet()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Set.iterator()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Multimaps$AsMap.get(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.526882259492682
Suporte: 0.00809249
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.hasNext()
Confiança: 0.4516133652794417
Suporte: 0.00693642
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Set.iterator()
Também chamam:
java.util.Iterator.hasNext()
java.util.Iterator.next()
Confiança: 0.41935517474868483
Suporte: 0.00644096
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Multimaps.equalsImpl(com.google.common.collect.Multimap, java.lang.Object) ************************
*Commit: commit f9c1a637a439f4534b6d2cb8bb534b19a4e6efcc 1358363595 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.Multimap.asMap()
com.google.common.collect.Multimap.asMap()
java.util.Map.equals(java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.Multimap.asMap()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multimap.asMap()
Também chamam:
java.util.Map.entrySet()
Confiança: 0.43333440977842724
Suporte: 0.00214699
Posição da Sugestão: 0
**************************
Chamada: java.util.Map.equals(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multimap.asMap()
Também chamam:
java.util.Map.entrySet()
Confiança: 0.43333440977842724
Suporte: 0.00214699
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Iterators$MergingIterator.next() ************************
*Commit: commit 0071d72213c47537f79355468eb7b855af532340 1358363688 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Queue.remove()
com.google.common.collect.PeekingIterator.next()
java.util.Iterator.hasNext()
java.util.Queue.add(com.google.common.collect.PeekingIterator)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.PeekingIterator.next()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Queue.add(com.google.common.collect.PeekingIterator)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7688450467665082
Suporte: 0.0252684
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Iterators$MergingIterator.next() ************************
*Commit: commit 0071d72213c47537f79355468eb7b855af532340 1358363688 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Queue.remove()
com.google.common.collect.PeekingIterator.next()
java.util.Iterator.hasNext()
java.util.Queue.add(com.google.common.collect.PeekingIterator)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.PeekingIterator.next()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Iterator.hasNext()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Queue.add(com.google.common.collect.PeekingIterator)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Iterator.hasNext()
Também chamam:
java.util.Iterator.next()
Confiança: 0.7688450467665082
Suporte: 0.0252684
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.FilteredKeyMultimap$Entries.retainAll(java.util.Collection) ************************
*Commit: commit b99b83e93dd3f0a448db8f0284c14b0ae759d85b 1358363786 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
keyFunction
com.google.common.base.Predicates.compose(com.google.common.base.Predicate, com.google.common.base.Function)
com.google.common.base.Predicates.in(java.util.Collection)
com.google.common.base.Predicates.not(com.google.common.base.Predicate)
com.google.common.base.Predicates.and(com.google.common.base.Predicate, com.google.common.base.Predicate)
com.google.common.collect.Multimap.entries()
java.util.Collection.iterator()
com.google.common.collect.Iterators.removeIf(java.util.Iterator, com.google.common.base.Predicate)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Predicates.compose(com.google.common.base.Predicate, com.google.common.base.Function)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Predicates.in(java.util.Collection)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Predicates.not(com.google.common.base.Predicate)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Predicates.and(com.google.common.base.Predicate, com.google.common.base.Predicate)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Multimap.entries()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.iterator()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multimap.entries()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.57894770387839
Suporte: 0.00181668
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Multimap.entries()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.42105229612161
Suporte: 0.00132122
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Iterators.removeIf(java.util.Iterator, com.google.common.base.Predicate)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.5483872227886571
Suporte: 0.0028076
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.FilteredKeyMultimap$Entries.remove(java.lang.Object) ************************
*Commit: commit b99b83e93dd3f0a448db8f0284c14b0ae759d85b 1358363786 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.collect.Multimap.containsEntry(java.lang.Object, java.lang.Object)
java.util.Map$Entry.getKey()
com.google.common.base.Predicate.apply(null)
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.collect.Multimap.remove(java.lang.Object, java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6424601604070048
Suporte: 0.0189926
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Multimap.containsEntry(java.lang.Object, java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Predicate.apply(null)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7058804673030347
Suporte: 0.00198183
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getValue()
com.google.common.base.Predicate.apply(null)
Também chamam:
java.util.Iterator.remove()
Confiança: 0.5833345947937008
Suporte: 0.00115607
Posição da Sugestão: 0
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7058804673030347
Suporte: 0.00198183
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Multimap.remove(java.lang.Object, java.lang.Object)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.FilteredKeyMultimap$Entries.removeAll(java.util.Collection) ************************
*Commit: commit b99b83e93dd3f0a448db8f0284c14b0ae759d85b 1358363786 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
keyFunction
com.google.common.base.Predicates.compose(com.google.common.base.Predicate, com.google.common.base.Function)
com.google.common.base.Predicates.in(java.util.Collection)
com.google.common.base.Predicates.and(com.google.common.base.Predicate, com.google.common.base.Predicate)
com.google.common.collect.Multimap.entries()
java.util.Collection.iterator()
com.google.common.collect.Iterators.removeIf(java.util.Iterator, com.google.common.base.Predicate)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Predicates.compose(com.google.common.base.Predicate, com.google.common.base.Function)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Predicates.in(java.util.Collection)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Predicates.and(com.google.common.base.Predicate, com.google.common.base.Predicate)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Multimap.entries()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Collection.iterator()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.Multimap.entries()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.57894770387839
Suporte: 0.00181668
Posição da Sugestão: 0
**************************
Usuários que chamam:
com.google.common.collect.Multimap.entries()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.42105229612161
Suporte: 0.00132122
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Iterators.removeIf(java.util.Iterator, com.google.common.base.Predicate)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Collection.iterator()
Também chamam:
java.util.Iterator.next()
Confiança: 0.5483872227886571
Suporte: 0.0028076
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.Maps.doDifference(java.util.Map, java.util.Map, com.google.common.base.Equivalence, java.util.Map, java.util.Map, java.util.Map, java.util.Map) ************************
*Commit: commit 40ab4e481cfab78b02a6a1d41c66ff7d4c79462e 1358363874 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
java.util.Map.containsKey(java.lang.Object)
java.util.Map.remove(java.lang.Object)
com.google.common.base.Equivalence.equivalent(null, null)
java.util.Map.put(com.google.common.collect.Maps$(Ljava/util/Map;Ljava/util/Map;Lcom/google/common/base/Equivalence;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;)V$K, com.google.common.collect.Maps$(Ljava/util/Map;Ljava/util/Map;Lcom/google/common/base/Equivalence;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;)V$V)
com.google.common.collect.Maps$ValueDifferenceImpl.create(com.google.common.collect.Maps$(Ljava/util/Map;Ljava/util/Map;Lcom/google/common/base/Equivalence;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;)V$V, com.google.common.collect.Maps$(Ljava/util/Map;Ljava/util/Map;Lcom/google/common/base/Equivalence;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;)V$V)
java.util.Map.put(com.google.common.collect.Maps$(Ljava/util/Map;Ljava/util/Map;Lcom/google/common/base/Equivalence;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;)V$K, com.google.common.collect.MapDifference$ValueDifference)
java.util.Map.put(com.google.common.collect.Maps$(Ljava/util/Map;Ljava/util/Map;Lcom/google/common/base/Equivalence;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;)V$K, com.google.common.collect.Maps$(Ljava/util/Map;Ljava/util/Map;Lcom/google/common/base/Equivalence;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;)V$V)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6125013245333859
Suporte: 0.00809249
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.8125005518882146
Suporte: 0.00644096
Posição da Sugestão: 1
**************************
Chamada: java.util.Map.containsKey(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.remove(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Equivalence.equivalent(null, null)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.put(com.google.common.collect.Maps$(Ljava/util/Map;Ljava/util/Map;Lcom/google/common/base/Equivalence;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;)V$K, com.google.common.collect.Maps$(Ljava/util/Map;Ljava/util/Map;Lcom/google/common/base/Equivalence;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;)V$V)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Maps$ValueDifferenceImpl.create(com.google.common.collect.Maps$(Ljava/util/Map;Ljava/util/Map;Lcom/google/common/base/Equivalence;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;)V$V, com.google.common.collect.Maps$(Ljava/util/Map;Ljava/util/Map;Lcom/google/common/base/Equivalence;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;)V$V)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.put(com.google.common.collect.Maps$(Ljava/util/Map;Ljava/util/Map;Lcom/google/common/base/Equivalence;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;)V$K, com.google.common.collect.MapDifference$ValueDifference)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.put(com.google.common.collect.Maps$(Ljava/util/Map;Ljava/util/Map;Lcom/google/common/base/Equivalence;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;)V$K, com.google.common.collect.Maps$(Ljava/util/Map;Ljava/util/Map;Lcom/google/common/base/Equivalence;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;)V$V)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Maps.doDifference(java.util.Map, java.util.Map, com.google.common.base.Equivalence, java.util.Map, java.util.Map, java.util.Map, java.util.Map) ************************
*Commit: commit 40ab4e481cfab78b02a6a1d41c66ff7d4c79462e 1358363874 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
java.util.Map.containsKey(java.lang.Object)
java.util.Map.remove(java.lang.Object)
com.google.common.base.Equivalence.equivalent(null, null)
java.util.Map.put(com.google.common.collect.Maps$(Ljava/util/Map;Ljava/util/Map;Lcom/google/common/base/Equivalence;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;)V$K, com.google.common.collect.Maps$(Ljava/util/Map;Ljava/util/Map;Lcom/google/common/base/Equivalence;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;)V$V)
com.google.common.collect.Maps$ValueDifferenceImpl.create(com.google.common.collect.Maps$(Ljava/util/Map;Ljava/util/Map;Lcom/google/common/base/Equivalence;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;)V$V, com.google.common.collect.Maps$(Ljava/util/Map;Ljava/util/Map;Lcom/google/common/base/Equivalence;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;)V$V)
java.util.Map.put(com.google.common.collect.Maps$(Ljava/util/Map;Ljava/util/Map;Lcom/google/common/base/Equivalence;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;)V$K, com.google.common.collect.MapDifference$ValueDifference)
java.util.Map.put(com.google.common.collect.Maps$(Ljava/util/Map;Ljava/util/Map;Lcom/google/common/base/Equivalence;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;)V$K, com.google.common.collect.Maps$(Ljava/util/Map;Ljava/util/Map;Lcom/google/common/base/Equivalence;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;)V$V)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6125013245333859
Suporte: 0.00809249
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.8125005518882146
Suporte: 0.00644096
Posição da Sugestão: 1
**************************
Chamada: java.util.Map.containsKey(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.remove(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Equivalence.equivalent(null, null)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.put(com.google.common.collect.Maps$(Ljava/util/Map;Ljava/util/Map;Lcom/google/common/base/Equivalence;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;)V$K, com.google.common.collect.Maps$(Ljava/util/Map;Ljava/util/Map;Lcom/google/common/base/Equivalence;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;)V$V)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Maps$ValueDifferenceImpl.create(com.google.common.collect.Maps$(Ljava/util/Map;Ljava/util/Map;Lcom/google/common/base/Equivalence;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;)V$V, com.google.common.collect.Maps$(Ljava/util/Map;Ljava/util/Map;Lcom/google/common/base/Equivalence;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;)V$V)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.put(com.google.common.collect.Maps$(Ljava/util/Map;Ljava/util/Map;Lcom/google/common/base/Equivalence;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;)V$K, com.google.common.collect.MapDifference$ValueDifference)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map.put(com.google.common.collect.Maps$(Ljava/util/Map;Ljava/util/Map;Lcom/google/common/base/Equivalence;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;)V$K, com.google.common.collect.Maps$(Ljava/util/Map;Ljava/util/Map;Lcom/google/common/base/Equivalence;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;Ljava/util/Map;)V$V)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableBiMap.fromEntries(I, [Ljava.util.Map$Entry;) ************************
*Commit: commit f90d07978c10519b3c73e8a0801df30122ad06b9 1358457466 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableBiMap.of()
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6424601604070048
Suporte: 0.0189926
Posição da Sugestão: 1
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableSortedMap.sortEntries(java.util.Comparator, I, [Ljava.util.Map$Entry;) ************************
*Commit: commit f90d07978c10519b3c73e8a0801df30122ad06b9 1358457466 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map$Entry.getKey()
java.util.Map$Entry.getKey()
java.util.Comparator.compare(null, null)
java.util.Arrays.sort([Ljava.util.Map$Entry;, I, I, java.util.Comparator)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6424601604070048
Suporte: 0.0189926
Posição da Sugestão: 0
**************************
Chamada: java.util.Comparator.compare(null, null)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7058804673030347
Suporte: 0.00198183
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6424601604070048
Suporte: 0.0189926
Posição da Sugestão: 0
**************************
Chamada: java.util.Arrays.sort([Ljava.util.Map$Entry;, I, I, java.util.Comparator)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableSortedMap.validateEntries(I, [Ljava.util.Map$Entry;, java.util.Comparator) ************************
*Commit: commit f90d07978c10519b3c73e8a0801df30122ad06b9 1358457466 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map$Entry.getKey()
java.util.Map$Entry.getKey()
java.util.Comparator.compare(null, null)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6424601604070048
Suporte: 0.0189926
Posição da Sugestão: 0
**************************
Chamada: java.util.Comparator.compare(null, null)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7058804673030347
Suporte: 0.00198183
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6424601604070048
Suporte: 0.0189926
Posição da Sugestão: 0
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableSortedMap.fromSortedEntries(java.util.Comparator, I, [Ljava.util.Map$Entry;) ************************
*Commit: commit f90d07978c10519b3c73e8a0801df30122ad06b9 1358457466 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.ImmutableSortedMap.emptyMap(java.util.Comparator)
com.google.common.collect.ImmutableList.builder()
com.google.common.collect.ImmutableList.builder()
java.util.Map$Entry.getKey()
com.google.common.collect.ImmutableList$Builder.add(com.google.common.collect.ImmutableSortedMap$(Ljava/util/Comparator;I[Ljava/util/Map$Entry;)Lcom/google/common/collect/ImmutableSortedMap;$K)
java.util.Map$Entry.getValue()
com.google.common.collect.ImmutableList$Builder.add(com.google.common.collect.ImmutableSortedMap$(Ljava/util/Comparator;I[Ljava/util/Map$Entry;)Lcom/google/common/collect/ImmutableSortedMap;$V)
com.google.common.collect.ImmutableList$Builder.build()
com.google.common.collect.ImmutableList$Builder.build()
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.ImmutableList.builder()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableList.builder()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableList.builder()
Também chamam:
com.google.common.collect.ImmutableList$Builder.build()
Confiança: 1.0
Suporte: 0.00148637
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getKey()
** Sugestões fornecidas **
Usuários que chamam:
com.google.common.collect.ImmutableList.builder()
Também chamam:
com.google.common.collect.ImmutableList$Builder.build()
Confiança: 1.0
Suporte: 0.00148637
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ImmutableList$Builder.add(com.google.common.collect.ImmutableSortedMap$(Ljava/util/Comparator;I[Ljava/util/Map$Entry;)Lcom/google/common/collect/ImmutableSortedMap;$K)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6424601604070048
Suporte: 0.0189926
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableList$Builder.add(com.google.common.collect.ImmutableSortedMap$(Ljava/util/Comparator;I[Ljava/util/Map$Entry;)Lcom/google/common/collect/ImmutableSortedMap;$V)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableList$Builder.build()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableList$Builder.build()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.ImmutableSortedMap.fromEntries(java.util.Comparator, Z, I, [Ljava.util.Map$Entry;) ************************
*Commit: commit f90d07978c10519b3c73e8a0801df30122ad06b9 1358457466 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
com.google.common.collect.ImmutableMap.entryOf(com.google.common.collect.ImmutableSortedMap$(Ljava/util/Comparator;ZI[Ljava/util/Map$Entry;)Lcom/google/common/collect/ImmutableSortedMap;$K, com.google.common.collect.ImmutableSortedMap$(Ljava/util/Comparator;ZI[Ljava/util/Map$Entry;)Lcom/google/common/collect/ImmutableSortedMap;$V)
com.google.common.collect.ImmutableSortedMap.sortEntries(java.util.Comparator, I, [Ljava.util.Map$Entry;)
com.google.common.collect.ImmutableSortedMap.validateEntries(I, [Ljava.util.Map$Entry;, java.util.Comparator)
com.google.common.collect.ImmutableSortedMap.fromSortedEntries(java.util.Comparator, I, [Ljava.util.Map$Entry;)
---------------- Chamadas de método adicionadas ---------------
Chamada: java.util.Map$Entry.getValue()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6424601604070048
Suporte: 0.0189926
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.ImmutableMap.entryOf(com.google.common.collect.ImmutableSortedMap$(Ljava/util/Comparator;ZI[Ljava/util/Map$Entry;)Lcom/google/common/collect/ImmutableSortedMap;$K, com.google.common.collect.ImmutableSortedMap$(Ljava/util/Comparator;ZI[Ljava/util/Map$Entry;)Lcom/google/common/collect/ImmutableSortedMap;$V)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableSortedMap.sortEntries(java.util.Comparator, I, [Ljava.util.Map$Entry;)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableSortedMap.validateEntries(I, [Ljava.util.Map$Entry;, java.util.Comparator)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableSortedMap.fromSortedEntries(java.util.Comparator, I, [Ljava.util.Map$Entry;)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.RegularImmutableBiMap.RegularImmutableBiMap(I, [Ljava.util.Map$Entry;) ************************
*Commit: commit f90d07978c10519b3c73e8a0801df30122ad06b9 1358457466 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
closedTableSize
com.google.common.collect.RegularImmutableBiMap.createEntryArray(I)
com.google.common.collect.RegularImmutableBiMap.createEntryArray(I)
com.google.common.collect.RegularImmutableBiMap.createEntryArray(I)
java.util.Map$Entry.getKey()
com.google.common.base.Preconditions.checkNotNull(null)
java.util.Map$Entry.getValue()
com.google.common.base.Preconditions.checkNotNull(null)
java.lang.Object.hashCode()
java.lang.Object.hashCode()
com.google.common.collect.Hashing.smear(I)
com.google.common.collect.Hashing.smear(I)
com.google.common.collect.RegularImmutableBiMap$BiMapEntry.getNextInKToVBucket()
com.google.common.collect.ImmutableEntry.getKey()
java.lang.Object.equals(java.lang.Object)
com.google.common.collect.RegularImmutableBiMap$BiMapEntry.getNextInVToKBucket()
com.google.common.collect.ImmutableEntry.getValue()
java.lang.Object.equals(java.lang.Object)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.collect.RegularImmutableBiMap.createEntryArray(I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.RegularImmutableBiMap.createEntryArray(I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.RegularImmutableBiMap.createEntryArray(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkNotNull(null)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6424601604070048
Suporte: 0.0189926
Posição da Sugestão: 1
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Preconditions.checkNotNull(null)
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Object.hashCode()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Object.hashCode()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Hashing.smear(I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Hashing.smear(I)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.RegularImmutableBiMap$BiMapEntry.getNextInKToVBucket()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableEntry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Object.equals(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.RegularImmutableBiMap$BiMapEntry.getNextInVToKBucket()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.ImmutableEntry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Object.equals(java.lang.Object)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.RegularImmutableMap.RegularImmutableMap(I, [Ljava.util.Map$Entry;) ************************
*Commit: commit f90d07978c10519b3c73e8a0801df30122ad06b9 1358457466 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Sim
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
com.google.common.collect.RegularImmutableMap.createEntryArray(I)
closedTableSize
com.google.common.collect.RegularImmutableMap.createEntryArray(I)
java.util.Map$Entry.getKey()
java.lang.Object.hashCode()
com.google.common.collect.Hashing.smear(I)
java.util.Map$Entry.getValue()
com.google.common.collect.RegularImmutableMap.newLinkedEntry(com.google.common.collect.RegularImmutableMap$K, com.google.common.collect.RegularImmutableMap$V, com.google.common.collect.RegularImmutableMap$LinkedEntry)
java.util.Map$Entry.getKey()
java.lang.Object.equals(java.lang.Object)
com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
com.google.common.collect.RegularImmutableMap$LinkedEntry.next()
---------------- Chamadas de método adicionadas ---------------
Chamada: closedTableSize
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.RegularImmutableMap.createEntryArray(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Object.hashCode()
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6424601604070048
Suporte: 0.0189926
Posição da Sugestão: 1
**************************
Chamada: com.google.common.collect.Hashing.smear(I)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getValue()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.RegularImmutableMap.newLinkedEntry(com.google.common.collect.RegularImmutableMap$K, com.google.common.collect.RegularImmutableMap$V, com.google.common.collect.RegularImmutableMap$LinkedEntry)
Nenhuma sugestão fornecida.
**************************
Chamada: java.util.Map$Entry.getKey()
Nenhuma sugestão fornecida.
**************************
Chamada: java.lang.Object.equals(java.lang.Object)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.7058804673030347
Suporte: 0.00198183
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map$Entry.getKey()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6424601604070048
Suporte: 0.0189926
Posição da Sugestão: 0
**************************
Chamada: com.google.common.base.Preconditions.checkArgument(Z, java.lang.String, [Ljava.lang.Object;)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.RegularImmutableMap$LinkedEntry.next()
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Maps$FilteredEntryMap$KeySet.removeAll(java.util.Collection) ************************
*Commit: commit cc34329792125a962b7b5f800fdb1d1874631aa7 1358877757 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.entrySet()
com.google.common.base.Predicates.in(java.util.Collection)
com.google.common.collect.Maps.keyFunction()
com.google.common.base.Predicates.compose(com.google.common.base.Predicate, com.google.common.base.Function)
com.google.common.base.Predicates.and(com.google.common.base.Predicate, com.google.common.base.Predicate)
com.google.common.collect.Iterables.removeIf(java.lang.Iterable, com.google.common.base.Predicate)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Predicates.in(java.util.Collection)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6125013245333859
Suporte: 0.00809249
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.6000007568762205
Suporte: 0.00792733
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Confiança: 0.48750094609527556
Suporte: 0.00644096
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Maps.keyFunction()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Predicates.compose(com.google.common.base.Predicate, com.google.common.base.Function)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Predicates.and(com.google.common.base.Predicate, com.google.common.base.Predicate)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Iterables.removeIf(java.lang.Iterable, com.google.common.base.Predicate)
Nenhuma sugestão fornecida.
**************************
************************ Método Avaliado: com.google.common.collect.Maps$FilteredEntryMap$KeySet.removeAll(java.util.Collection) ************************
*Commit: commit cc34329792125a962b7b5f800fdb1d1874631aa7 1358877757 ----sp
*Alguma Sugestão Fornecida: Sim
*Alguma Sugestão Aprovada: Não
**************************************************************************************************************
----------------Chamadas de método antigas:---------------
----------------Chamadas de método novas:---------------
java.util.Map.entrySet()
com.google.common.base.Predicates.in(java.util.Collection)
com.google.common.collect.Maps.keyFunction()
com.google.common.base.Predicates.compose(com.google.common.base.Predicate, com.google.common.base.Function)
com.google.common.base.Predicates.and(com.google.common.base.Predicate, com.google.common.base.Predicate)
com.google.common.collect.Iterables.removeIf(java.lang.Iterable, com.google.common.base.Predicate)
---------------- Chamadas de método adicionadas ---------------
Chamada: com.google.common.base.Predicates.in(java.util.Collection)
** Sugestões fornecidas **
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getValue()
Confiança: 0.6125013245333859
Suporte: 0.00809249
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getKey()
Confiança: 0.6000007568762205
Suporte: 0.00792733
Posição da Sugestão: 0
**************************
Usuários que chamam:
java.util.Map.entrySet()
Também chamam:
java.util.Map$Entry.getKey()
java.util.Map$Entry.getValue()
Confiança: 0.48750094609527556
Suporte: 0.00644096
Posição da Sugestão: 0
**************************
Chamada: com.google.common.collect.Maps.keyFunction()
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Predicates.compose(com.google.common.base.Predicate, com.google.common.base.Function)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.base.Predicates.and(com.google.common.base.Predicate, com.google.common.base.Predicate)
Nenhuma sugestão fornecida.
**************************
Chamada: com.google.common.collect.Iterables.removeIf(java.lang.Iterable, com.google.common.base.Predicate)
Nenhuma sugestão fornecida.
**************************
